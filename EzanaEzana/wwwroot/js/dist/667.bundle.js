"use strict";(self.webpackChunkezanaezana=self.webpackChunkezanaezana||[]).push([[667],{43667:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  A: () => (/* binding */ components_CongressionalTrading)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(96540);\n// EXTERNAL MODULE: ./node_modules/axios/lib/axios.js + 9 modules\nvar axios = __webpack_require__(33319);\n;// ./wwwroot/js/react/services/quiverApi.ts\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\n\n\n// Quiver Quantitative API Service for Congressional Trading Data\n// https://www.quiverquant.com/\n\n// API Configuration\nvar API_CONFIG = {\n  QUIVER: {\n    BASE_URL: \'https://api.quiverquant.com/beta\',\n    API_KEY: \'2fb95c89103d4cb07b26fff07c8cfa77626291da\',\n    FREE_TIER_LIMIT: 1000 // requests per month\n  }\n};\n\n// Types for congressional trading data\n// Main Quiver Quantitative API Service\nvar QuiverApiService = /*#__PURE__*/function () {\n  // Default to real API calls\n\n  function QuiverApiService() {\n    _classCallCheck(this, QuiverApiService);\n    _defineProperty(this, "quiver", void 0);\n    _defineProperty(this, "useMockData", false);\n    this.quiver = axios/* default */.A.create({\n      baseURL: API_CONFIG.QUIVER.BASE_URL,\n      timeout: 15000,\n      headers: {\n        \'Authorization\': "Bearer ".concat(API_CONFIG.QUIVER.API_KEY),\n        \'Content-Type\': \'application/json\'\n      }\n    });\n    console.log(\'Quiver Quantitative API Service initialized\');\n  }\n\n  // Toggle between real API and mock data\n  return _createClass(QuiverApiService, [{\n    key: "setUseMockData",\n    value: function setUseMockData(useMock) {\n      this.useMockData = useMock;\n      console.log("Quiver API: ".concat(useMock ? \'Using mock data\' : \'Using Quiver Quantitative API\'));\n    }\n\n    // Get all congresspeople\n  }, {\n    key: "getCongressPeople",\n    value: function () {\n      var _getCongressPeople = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.useMockData) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt("return", this.generateMockCongressPeople());\n            case 2:\n              _context.prev = 2;\n              console.log(\'Fetching congresspeople from Quiver Quantitative...\');\n              _context.next = 6;\n              return this.quiver.get(\'/congresspeople\');\n            case 6:\n              response = _context.sent;\n              if (!(!response.data || !Array.isArray(response.data))) {\n                _context.next = 9;\n                break;\n              }\n              throw new Error(\'Invalid response format from Quiver API\');\n            case 9:\n              return _context.abrupt("return", response.data.map(function (person) {\n                return {\n                  id: person.id || person.congressperson_id,\n                  name: person.name || person.congressperson_name,\n                  party: person.party || \'I\',\n                  state: person.state || \'Unknown\',\n                  chamber: person.chamber || \'House\',\n                  committee: person.committee || [],\n                  imageUrl: person.image_url,\n                  lastTradeDate: person.last_trade_date,\n                  totalTrades: person.total_trades || 0\n                };\n              }));\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context["catch"](2);\n              console.error(\'Error fetching congresspeople from Quiver:\', _context.t0);\n              console.log(\'Falling back to mock data\');\n              return _context.abrupt("return", this.generateMockCongressPeople());\n            case 17:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, this, [[2, 12]]);\n      }));\n      function getCongressPeople() {\n        return _getCongressPeople.apply(this, arguments);\n      }\n      return getCongressPeople;\n    }() // Get congressional trades for a specific person\n  }, {\n    key: "getCongressPersonTrades",\n    value: function () {\n      var _getCongressPersonTrades = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(congressPersonId) {\n        var limit,\n          response,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              limit = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 50;\n              if (!this.useMockData) {\n                _context2.next = 3;\n                break;\n              }\n              return _context2.abrupt("return", this.generateMockTrades(congressPersonId, limit));\n            case 3:\n              _context2.prev = 3;\n              console.log("Fetching trades for congressperson ".concat(congressPersonId, " from Quiver..."));\n              _context2.next = 7;\n              return this.quiver.get("/congressperson/".concat(congressPersonId, "/trades"), {\n                params: {\n                  limit: limit\n                }\n              });\n            case 7:\n              response = _context2.sent;\n              if (!(!response.data || !Array.isArray(response.data))) {\n                _context2.next = 10;\n                break;\n              }\n              throw new Error(\'Invalid response format from Quiver API\');\n            case 10:\n              return _context2.abrupt("return", response.data.map(function (trade) {\n                var _trade$trade_type;\n                return {\n                  id: trade.id || trade.trade_id,\n                  congressPersonId: trade.congressperson_id,\n                  congressPersonName: trade.congressperson_name,\n                  ticker: trade.ticker,\n                  companyName: trade.company_name,\n                  tradeType: ((_trade$trade_type = trade.trade_type) === null || _trade$trade_type === void 0 ? void 0 : _trade$trade_type.toLowerCase()) || \'buy\',\n                  amount: trade.amount || 0,\n                  amountRange: trade.amount_range || \'1,001-15,000\',\n                  tradeDate: trade.trade_date,\n                  disclosureDate: trade.disclosure_date,\n                  owner: trade.owner || \'self\',\n                  sector: trade.sector,\n                  industry: trade.industry\n                };\n              }));\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2["catch"](3);\n              console.error("Error fetching trades for congressperson ".concat(congressPersonId, ":"), _context2.t0);\n              console.log(\'Falling back to mock data\');\n              return _context2.abrupt("return", this.generateMockTrades(congressPersonId, limit));\n            case 18:\n            case "end":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[3, 13]]);\n      }));\n      function getCongressPersonTrades(_x) {\n        return _getCongressPersonTrades.apply(this, arguments);\n      }\n      return getCongressPersonTrades;\n    }() // Get recent congressional trades across all congresspeople\n  }, {\n    key: "getRecentTrades",\n    value: function () {\n      var _getRecentTrades = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var limit,\n          response,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              limit = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : 100;\n              if (!this.useMockData) {\n                _context3.next = 3;\n                break;\n              }\n              return _context3.abrupt("return", this.generateMockRecentTrades(limit));\n            case 3:\n              _context3.prev = 3;\n              console.log(\'Fetching recent congressional trades from Quiver...\');\n              _context3.next = 7;\n              return this.quiver.get(\'/congressional-trades\', {\n                params: {\n                  limit: limit\n                }\n              });\n            case 7:\n              response = _context3.sent;\n              if (!(!response.data || !Array.isArray(response.data))) {\n                _context3.next = 10;\n                break;\n              }\n              throw new Error(\'Invalid response format from Quiver API\');\n            case 10:\n              return _context3.abrupt("return", response.data.map(function (trade) {\n                var _trade$trade_type2;\n                return {\n                  id: trade.id || trade.trade_id,\n                  congressPersonId: trade.congressperson_id,\n                  congressPersonName: trade.congressperson_name,\n                  ticker: trade.ticker,\n                  companyName: trade.company_name,\n                  tradeType: ((_trade$trade_type2 = trade.trade_type) === null || _trade$trade_type2 === void 0 ? void 0 : _trade$trade_type2.toLowerCase()) || \'buy\',\n                  amount: trade.amount || 0,\n                  amountRange: trade.amount_range || \'1,001-15,000\',\n                  tradeDate: trade.trade_date,\n                  disclosureDate: trade.disclosure_date,\n                  owner: trade.owner || \'self\',\n                  sector: trade.sector,\n                  industry: trade.industry\n                };\n              }));\n            case 13:\n              _context3.prev = 13;\n              _context3.t0 = _context3["catch"](3);\n              console.error(\'Error fetching recent congressional trades:\', _context3.t0);\n              console.log(\'Falling back to mock data\');\n              return _context3.abrupt("return", this.generateMockRecentTrades(limit));\n            case 18:\n            case "end":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[3, 13]]);\n      }));\n      function getRecentTrades() {\n        return _getRecentTrades.apply(this, arguments);\n      }\n      return getRecentTrades;\n    }() // Get trading analytics and insights\n  }, {\n    key: "getTradingAnalytics",\n    value: function () {\n      var _getTradingAnalytics = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!this.useMockData) {\n                _context4.next = 2;\n                break;\n              }\n              return _context4.abrupt("return", this.generateMockTradingAnalytics());\n            case 2:\n              _context4.prev = 2;\n              console.log(\'Fetching trading analytics from Quiver...\');\n              _context4.next = 6;\n              return this.quiver.get(\'/congressional-trading-analytics\');\n            case 6:\n              response = _context4.sent;\n              if (response.data) {\n                _context4.next = 9;\n                break;\n              }\n              throw new Error(\'Invalid response format from Quiver API\');\n            case 9:\n              return _context4.abrupt("return", {\n                totalTrades: response.data.total_trades || 0,\n                totalVolume: response.data.total_volume || 0,\n                mostTradedStocks: response.data.most_traded_stocks || [],\n                sectorBreakdown: response.data.sector_breakdown || [],\n                partyBreakdown: response.data.party_breakdown || [],\n                monthlyTrends: response.data.monthly_trends || []\n              });\n            case 12:\n              _context4.prev = 12;\n              _context4.t0 = _context4["catch"](2);\n              console.error(\'Error fetching trading analytics:\', _context4.t0);\n              console.log(\'Falling back to mock data\');\n              return _context4.abrupt("return", this.generateMockTradingAnalytics());\n            case 17:\n            case "end":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[2, 12]]);\n      }));\n      function getTradingAnalytics() {\n        return _getTradingAnalytics.apply(this, arguments);\n      }\n      return getTradingAnalytics;\n    }() // Search congresspeople by name, state, or party\n  }, {\n    key: "searchCongressPeople",\n    value: function () {\n      var _searchCongressPeople = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(query) {\n        var allPeople;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.getCongressPeople();\n            case 2:\n              allPeople = _context5.sent;\n              return _context5.abrupt("return", allPeople.filter(function (person) {\n                return person.name.toLowerCase().includes(query.toLowerCase()) || person.state.toLowerCase().includes(query.toLowerCase()) || person.party.toLowerCase().includes(query.toLowerCase());\n              }));\n            case 4:\n            case "end":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function searchCongressPeople(_x2) {\n        return _searchCongressPeople.apply(this, arguments);\n      }\n      return searchCongressPeople;\n    }() // Get congresspeople by state\n  }, {\n    key: "getCongressPeopleByState",\n    value: function () {\n      var _getCongressPeopleByState = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(state) {\n        var allPeople;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this.getCongressPeople();\n            case 2:\n              allPeople = _context6.sent;\n              return _context6.abrupt("return", allPeople.filter(function (person) {\n                return person.state.toLowerCase() === state.toLowerCase();\n              }));\n            case 4:\n            case "end":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function getCongressPeopleByState(_x3) {\n        return _getCongressPeopleByState.apply(this, arguments);\n      }\n      return getCongressPeopleByState;\n    }() // Get congresspeople by party\n  }, {\n    key: "getCongressPeopleByParty",\n    value: function () {\n      var _getCongressPeopleByParty = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(party) {\n        var allPeople;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this.getCongressPeople();\n            case 2:\n              allPeople = _context7.sent;\n              return _context7.abrupt("return", allPeople.filter(function (person) {\n                return person.party === party;\n              }));\n            case 4:\n            case "end":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function getCongressPeopleByParty(_x4) {\n        return _getCongressPeopleByParty.apply(this, arguments);\n      }\n      return getCongressPeopleByParty;\n    }() // Get congresspeople by chamber\n  }, {\n    key: "getCongressPeopleByChamber",\n    value: function () {\n      var _getCongressPeopleByChamber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(chamber) {\n        var allPeople;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this.getCongressPeople();\n            case 2:\n              allPeople = _context8.sent;\n              return _context8.abrupt("return", allPeople.filter(function (person) {\n                return person.chamber === chamber;\n              }));\n            case 4:\n            case "end":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function getCongressPeopleByChamber(_x5) {\n        return _getCongressPeopleByChamber.apply(this, arguments);\n      }\n      return getCongressPeopleByChamber;\n    }() // Mock data generators for fallback\n  }, {\n    key: "generateMockCongressPeople",\n    value: function generateMockCongressPeople() {\n      var mockPeople = [{\n        id: \'1\',\n        name: \'Nancy Pelosi\',\n        party: \'D\',\n        state: \'CA\',\n        chamber: \'House\',\n        committee: [\'Appropriations\', \'Intelligence\'],\n        lastTradeDate: \'2024-01-15\',\n        totalTrades: 45\n      }, {\n        id: \'2\',\n        name: \'Mitch McConnell\',\n        party: \'R\',\n        state: \'KY\',\n        chamber: \'Senate\',\n        committee: [\'Appropriations\', \'Rules\'],\n        lastTradeDate: \'2024-01-10\',\n        totalTrades: 32\n      }, {\n        id: \'3\',\n        name: \'Chuck Schumer\',\n        party: \'D\',\n        state: \'NY\',\n        chamber: \'Senate\',\n        committee: [\'Finance\', \'Judiciary\'],\n        lastTradeDate: \'2024-01-12\',\n        totalTrades: 28\n      }, {\n        id: \'4\',\n        name: \'Kevin McCarthy\',\n        party: \'R\',\n        state: \'CA\',\n        chamber: \'House\',\n        committee: [\'Financial Services\'],\n        lastTradeDate: \'2024-01-08\',\n        totalTrades: 19\n      }, {\n        id: \'5\',\n        name: \'Alexandria Ocasio-Cortez\',\n        party: \'D\',\n        state: \'NY\',\n        chamber: \'House\',\n        committee: [\'Oversight\', \'Financial Services\'],\n        lastTradeDate: \'2024-01-05\',\n        totalTrades: 12\n      }];\n      return mockPeople;\n    }\n  }, {\n    key: "generateMockTrades",\n    value: function generateMockTrades(congressPersonId, limit) {\n      var mockTrades = [];\n      var companies = [\'AAPL\', \'MSFT\', \'GOOGL\', \'TSLA\', \'META\', \'NVDA\', \'JPM\', \'JNJ\', \'V\', \'PG\'];\n      var companyNames = [\'Apple Inc.\', \'Microsoft Corp.\', \'Alphabet Inc.\', \'Tesla Inc.\', \'Meta Platforms Inc.\', \'NVIDIA Corp.\', \'JPMorgan Chase & Co.\', \'Johnson & Johnson\', \'Visa Inc.\', \'Procter & Gamble Co.\'];\n      for (var i = 0; i < limit; i++) {\n        var companyIndex = Math.floor(Math.random() * companies.length);\n        var tradeType = Math.random() > 0.5 ? \'buy\' : \'sell\';\n        var amountRanges = [\'1,001-15,000\', \'15,001-50,000\', \'50,001-100,000\', \'100,001-250,000\', \'250,001-500,000\', \'500,001-1,000,000\', \'1,000,001+\'];\n        var amountRange = amountRanges[Math.floor(Math.random() * amountRanges.length)];\n        mockTrades.push({\n          id: "trade-".concat(congressPersonId, "-").concat(i),\n          congressPersonId: congressPersonId,\n          congressPersonName: \'Mock Congressperson\',\n          ticker: companies[companyIndex],\n          companyName: companyNames[companyIndex],\n          tradeType: tradeType,\n          amount: Math.floor(Math.random() * 1000000) + 1000,\n          amountRange: amountRange,\n          tradeDate: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString().split(\'T\')[0],\n          disclosureDate: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString().split(\'T\')[0],\n          owner: Math.random() > 0.7 ? \'spouse\' : \'self\',\n          sector: \'Technology\',\n          industry: \'Software\'\n        });\n      }\n      return mockTrades.sort(function (a, b) {\n        return new Date(b.tradeDate).getTime() - new Date(a.tradeDate).getTime();\n      });\n    }\n  }, {\n    key: "generateMockRecentTrades",\n    value: function generateMockRecentTrades(limit) {\n      var mockTrades = [];\n      var congressPeople = this.generateMockCongressPeople();\n      for (var i = 0; i < limit; i++) {\n        var congressPerson = congressPeople[Math.floor(Math.random() * congressPeople.length)];\n        var trades = this.generateMockTrades(congressPerson.id, 1);\n        mockTrades.push(_objectSpread(_objectSpread({}, trades[0]), {}, {\n          congressPersonName: congressPerson.name\n        }));\n      }\n      return mockTrades.sort(function (a, b) {\n        return new Date(b.tradeDate).getTime() - new Date(a.tradeDate).getTime();\n      });\n    }\n  }, {\n    key: "generateMockTradingAnalytics",\n    value: function generateMockTradingAnalytics() {\n      return {\n        totalTrades: 1250,\n        totalVolume: 45000000,\n        mostTradedStocks: [{\n          ticker: \'AAPL\',\n          count: 45,\n          volume: 2500000\n        }, {\n          ticker: \'MSFT\',\n          count: 38,\n          volume: 2100000\n        }, {\n          ticker: \'GOOGL\',\n          count: 32,\n          volume: 1800000\n        }, {\n          ticker: \'TSLA\',\n          count: 28,\n          volume: 1500000\n        }, {\n          ticker: \'META\',\n          count: 25,\n          volume: 1200000\n        }],\n        sectorBreakdown: [{\n          sector: \'Technology\',\n          count: 45,\n          volume: 2500000\n        }, {\n          sector: \'Healthcare\',\n          count: 38,\n          volume: 2100000\n        }, {\n          sector: \'Financial\',\n          count: 32,\n          volume: 1800000\n        }, {\n          sector: \'Energy\',\n          count: 28,\n          volume: 1500000\n        }, {\n          sector: \'Consumer\',\n          count: 25,\n          volume: 1200000\n        }],\n        partyBreakdown: [{\n          party: \'D\',\n          count: 650,\n          volume: 23000000\n        }, {\n          party: \'R\',\n          count: 550,\n          volume: 20000000\n        }, {\n          party: \'I\',\n          count: 50,\n          volume: 2000000\n        }],\n        monthlyTrends: [{\n          month: \'Jan 2024\',\n          count: 120,\n          volume: 4500000\n        }, {\n          month: \'Dec 2023\',\n          count: 95,\n          volume: 3800000\n        }, {\n          month: \'Nov 2023\',\n          count: 110,\n          volume: 4200000\n        }, {\n          month: \'Oct 2023\',\n          count: 105,\n          volume: 4000000\n        }]\n      };\n    }\n\n    // Get API status\n  }, {\n    key: "getApiStatus",\n    value: function getApiStatus() {\n      return {\n        quiver: {\n          configured: true,\n          apiKey: API_CONFIG.QUIVER.API_KEY ? \'Set\' : \'Not Set\',\n          baseUrl: API_CONFIG.QUIVER.BASE_URL,\n          status: this.useMockData ? \'Using Mock Data\' : \'Active - Real API calls enabled\'\n        },\n        mockData: {\n          enabled: this.useMockData,\n          available: true,\n          note: \'Available as fallback if API calls fail\'\n        }\n      };\n    }\n  }]);\n}();\nvar quiverApiService = new QuiverApiService();\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(74848);\n;// ./wwwroot/js/react/components/CongressionalTrading.tsx\nfunction CongressionalTrading_typeof(o) { "@babel/helpers - typeof"; return CongressionalTrading_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, CongressionalTrading_typeof(o); }\nfunction CongressionalTrading_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ CongressionalTrading_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == CongressionalTrading_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(CongressionalTrading_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction CongressionalTrading_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction CongressionalTrading_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { CongressionalTrading_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { CongressionalTrading_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\nvar CongressionalTrading = function CongressionalTrading(_ref) {\n  var _ref$className = _ref.className,\n    className = _ref$className === void 0 ? \'\' : _ref$className;\n  var _useState = (0,react.useState)([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    congressPeople = _useState2[0],\n    setCongressPeople = _useState2[1];\n  var _useState3 = (0,react.useState)([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    recentTrades = _useState4[0],\n    setRecentTrades = _useState4[1];\n  var _useState5 = (0,react.useState)(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    analytics = _useState6[0],\n    setAnalytics = _useState6[1];\n  var _useState7 = (0,react.useState)(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    selectedPerson = _useState8[0],\n    setSelectedPerson = _useState8[1];\n  var _useState9 = (0,react.useState)([]),\n    _useState0 = _slicedToArray(_useState9, 2),\n    personTrades = _useState0[0],\n    setPersonTrades = _useState0[1];\n  var _useState1 = (0,react.useState)(\'\'),\n    _useState10 = _slicedToArray(_useState1, 2),\n    searchQuery = _useState10[0],\n    setSearchQuery = _useState10[1];\n  var _useState11 = (0,react.useState)(\'all\'),\n    _useState12 = _slicedToArray(_useState11, 2),\n    filterParty = _useState12[0],\n    setFilterParty = _useState12[1];\n  var _useState13 = (0,react.useState)(\'all\'),\n    _useState14 = _slicedToArray(_useState13, 2),\n    filterChamber = _useState14[0],\n    setFilterChamber = _useState14[1];\n  var _useState15 = (0,react.useState)(false),\n    _useState16 = _slicedToArray(_useState15, 2),\n    loading = _useState16[0],\n    setLoading = _useState16[1];\n  var _useState17 = (0,react.useState)(null),\n    _useState18 = _slicedToArray(_useState17, 2),\n    error = _useState18[0],\n    setError = _useState18[1];\n  var _useState19 = (0,react.useState)(\'overview\'),\n    _useState20 = _slicedToArray(_useState19, 2),\n    activeTab = _useState20[0],\n    setActiveTab = _useState20[1];\n  (0,react.useEffect)(function () {\n    loadInitialData();\n  }, []);\n  var loadInitialData = /*#__PURE__*/function () {\n    var _ref2 = CongressionalTrading_asyncToGenerator(/*#__PURE__*/CongressionalTrading_regeneratorRuntime().mark(function _callee() {\n      var _yield$Promise$all, _yield$Promise$all2, people, trades, tradingAnalytics;\n      return CongressionalTrading_regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            setError(null);\n            _context.prev = 2;\n            _context.next = 5;\n            return Promise.all([quiverApiService.getCongressPeople(), quiverApiService.getRecentTrades(20), quiverApiService.getTradingAnalytics()]);\n          case 5:\n            _yield$Promise$all = _context.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3);\n            people = _yield$Promise$all2[0];\n            trades = _yield$Promise$all2[1];\n            tradingAnalytics = _yield$Promise$all2[2];\n            setCongressPeople(people);\n            setRecentTrades(trades);\n            setAnalytics(tradingAnalytics);\n            _context.next = 19;\n            break;\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context["catch"](2);\n            setError(\'Failed to load congressional trading data\');\n            console.error(\'Error loading data:\', _context.t0);\n          case 19:\n            _context.prev = 19;\n            setLoading(false);\n            return _context.finish(19);\n          case 22:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee, null, [[2, 15, 19, 22]]);\n    }));\n    return function loadInitialData() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handlePersonSelect = /*#__PURE__*/function () {\n    var _ref3 = CongressionalTrading_asyncToGenerator(/*#__PURE__*/CongressionalTrading_regeneratorRuntime().mark(function _callee2(person) {\n      var trades;\n      return CongressionalTrading_regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            setSelectedPerson(person);\n            setActiveTab(\'trades\');\n            _context2.prev = 2;\n            _context2.next = 5;\n            return quiverApiService.getCongressPersonTrades(person.id, 50);\n          case 5:\n            trades = _context2.sent;\n            setPersonTrades(trades);\n            _context2.next = 12;\n            break;\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2["catch"](2);\n            console.error(\'Error loading person trades:\', _context2.t0);\n          case 12:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[2, 9]]);\n    }));\n    return function handlePersonSelect(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var handleSearch = /*#__PURE__*/function () {\n    var _ref4 = CongressionalTrading_asyncToGenerator(/*#__PURE__*/CongressionalTrading_regeneratorRuntime().mark(function _callee3() {\n      var results;\n      return CongressionalTrading_regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            if (searchQuery.trim()) {\n              _context3.next = 7;\n              break;\n            }\n            _context3.t0 = setCongressPeople;\n            _context3.next = 4;\n            return quiverApiService.getCongressPeople();\n          case 4:\n            _context3.t1 = _context3.sent;\n            (0, _context3.t0)(_context3.t1);\n            return _context3.abrupt("return");\n          case 7:\n            _context3.prev = 7;\n            _context3.next = 10;\n            return quiverApiService.searchCongressPeople(searchQuery);\n          case 10:\n            results = _context3.sent;\n            setCongressPeople(results);\n            _context3.next = 17;\n            break;\n          case 14:\n            _context3.prev = 14;\n            _context3.t2 = _context3["catch"](7);\n            console.error(\'Error searching:\', _context3.t2);\n          case 17:\n          case "end":\n            return _context3.stop();\n        }\n      }, _callee3, null, [[7, 14]]);\n    }));\n    return function handleSearch() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var getFilteredCongressPeople = function getFilteredCongressPeople() {\n    return congressPeople.filter(function (person) {\n      var partyMatch = filterParty === \'all\' || person.party === filterParty;\n      var chamberMatch = filterChamber === \'all\' || person.chamber === filterChamber;\n      return partyMatch && chamberMatch;\n    });\n  };\n  var getPartyColor = function getPartyColor(party) {\n    switch (party) {\n      case \'D\':\n        return \'bg-blue-500\';\n      case \'R\':\n        return \'bg-red-500\';\n      case \'I\':\n        return \'bg-purple-500\';\n      default:\n        return \'bg-gray-500\';\n    }\n  };\n  var getTradeTypeColor = function getTradeTypeColor(type) {\n    return type === \'buy\' ? \'text-green-600\' : \'text-red-600\';\n  };\n  var formatAmount = function formatAmount(amount) {\n    if (amount >= 1000000) {\n      return "$".concat((amount / 1000000).toFixed(1), "M");\n    } else if (amount >= 1000) {\n      return "$".concat((amount / 1000).toFixed(1), "K");\n    }\n    return "$".concat(amount.toFixed(0));\n  };\n  if (loading) {\n    return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "flex items-center justify-center p-8 ".concat(className),\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "text-center",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n          className: "text-gray-600",\n          children: "Loading congressional trading data..."\n        })]\n      })\n    });\n  }\n  if (error) {\n    return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "p-6 bg-red-50 border border-red-200 rounded-lg ".concat(className),\n      children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "flex items-center",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "flex-shrink-0",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)("svg", {\n            className: "h-5 w-5 text-red-400",\n            viewBox: "0 0 20 20",\n            fill: "currentColor",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("path", {\n              fillRule: "evenodd",\n              d: "M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z",\n              clipRule: "evenodd"\n            })\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "ml-3",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n            className: "text-sm font-medium text-red-800",\n            children: "Error Loading Data"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n            className: "text-sm text-red-700 mt-1",\n            children: error\n          })]\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n        onClick: loadInitialData,\n        className: "mt-4 bg-red-100 text-red-800 px-4 py-2 rounded-md text-sm font-medium hover:bg-red-200",\n        children: "Retry"\n      })]\n    });\n  }\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n    className: "bg-white rounded-lg shadow-lg ".concat(className),\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "px-6 py-4 border-b border-gray-200",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "flex items-center justify-between",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h2", {\n            className: "text-2xl font-bold text-gray-900",\n            children: "Congressional Trading Dashboard"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n            className: "text-gray-600 mt-1",\n            children: "Track investments made by members of Congress"\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "flex items-center space-x-2",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n            className: "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800",\n            children: "Live Data"\n          })\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "px-6 py-4 border-b border-gray-200 bg-gray-50",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "flex flex-wrap gap-4 items-center",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "flex-1 min-w-64",\n          children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "relative",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n              type: "text",\n              placeholder: "Search congresspeople by name, state, or party...",\n              value: searchQuery,\n              onChange: function onChange(e) {\n                return setSearchQuery(e.target.value);\n              },\n              onKeyPress: function onKeyPress(e) {\n                return e.key === \'Enter\' && handleSearch();\n              },\n              className: "w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none",\n              children: /*#__PURE__*/(0,jsx_runtime.jsx)("svg", {\n                className: "h-5 w-5 text-gray-400",\n                fill: "none",\n                viewBox: "0 0 24 24",\n                stroke: "currentColor",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("path", {\n                  strokeLinecap: "round",\n                  strokeLinejoin: "round",\n                  strokeWidth: 2,\n                  d: "M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"\n                })\n              })\n            })]\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("select", {\n          value: filterParty,\n          onChange: function onChange(e) {\n            return setFilterParty(e.target.value);\n          },\n          className: "px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("option", {\n            value: "all",\n            children: "All Parties"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("option", {\n            value: "D",\n            children: "Democrat"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("option", {\n            value: "R",\n            children: "Republican"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("option", {\n            value: "I",\n            children: "Independent"\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("select", {\n          value: filterChamber,\n          onChange: function onChange(e) {\n            return setFilterChamber(e.target.value);\n          },\n          className: "px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("option", {\n            value: "all",\n            children: "All Chambers"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("option", {\n            value: "House",\n            children: "House"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("option", {\n            value: "Senate",\n            children: "Senate"\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n          onClick: handleSearch,\n          className: "px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2",\n          children: "Search"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "border-b border-gray-200",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("nav", {\n        className: "-mb-px flex space-x-8 px-6",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n          onClick: function onClick() {\n            return setActiveTab(\'overview\');\n          },\n          className: "py-4 px-1 border-b-2 font-medium text-sm ".concat(activeTab === \'overview\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'),\n          children: "Overview"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n          onClick: function onClick() {\n            return setActiveTab(\'trades\');\n          },\n          className: "py-4 px-1 border-b-2 font-medium text-sm ".concat(activeTab === \'trades\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'),\n          children: "Recent Trades"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n          onClick: function onClick() {\n            return setActiveTab(\'analytics\');\n          },\n          className: "py-4 px-1 border-b-2 font-medium text-sm ".concat(activeTab === \'analytics\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'),\n          children: "Analytics"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "p-6",\n      children: [activeTab === \'overview\' && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "space-y-6",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "grid grid-cols-1 md:grid-cols-4 gap-6",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "bg-blue-50 p-6 rounded-lg",\n            children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "flex items-center",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "flex-shrink-0",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("svg", {\n                  className: "h-8 w-8 text-blue-600",\n                  fill: "none",\n                  viewBox: "0 0 24 24",\n                  stroke: "currentColor",\n                  children: /*#__PURE__*/(0,jsx_runtime.jsx)("path", {\n                    strokeLinecap: "round",\n                    strokeLinejoin: "round",\n                    strokeWidth: 2,\n                    d: "M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"\n                  })\n                })\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "ml-4",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                  className: "text-sm font-medium text-blue-600",\n                  children: "Total Congresspeople"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                  className: "text-2xl font-semibold text-blue-900",\n                  children: congressPeople.length\n                })]\n              })]\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "bg-green-50 p-6 rounded-lg",\n            children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "flex items-center",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "flex-shrink-0",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("svg", {\n                  className: "h-8 w-8 text-green-600",\n                  fill: "none",\n                  viewBox: "0 0 24 24",\n                  stroke: "currentColor",\n                  children: /*#__PURE__*/(0,jsx_runtime.jsx)("path", {\n                    strokeLinecap: "round",\n                    strokeLinejoin: "round",\n                    strokeWidth: 2,\n                    d: "M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"\n                  })\n                })\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "ml-4",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                  className: "text-sm font-medium text-green-600",\n                  children: "Total Trades"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                  className: "text-2xl font-semibold text-green-900",\n                  children: (analytics === null || analytics === void 0 ? void 0 : analytics.totalTrades) || 0\n                })]\n              })]\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "bg-purple-50 p-6 rounded-lg",\n            children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "flex items-center",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "flex-shrink-0",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("svg", {\n                  className: "h-8 w-8 text-purple-600",\n                  fill: "none",\n                  viewBox: "0 0 24 24",\n                  stroke: "currentColor",\n                  children: /*#__PURE__*/(0,jsx_runtime.jsx)("path", {\n                    strokeLinecap: "round",\n                    strokeLinejoin: "round",\n                    strokeWidth: 2,\n                    d: "M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"\n                  })\n                })\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "ml-4",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                  className: "text-sm font-medium text-purple-600",\n                  children: "Total Volume"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                  className: "text-2xl font-semibold text-purple-900",\n                  children: analytics ? formatAmount(analytics.totalVolume) : \'$0\'\n                })]\n              })]\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "bg-orange-50 p-6 rounded-lg",\n            children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "flex items-center",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "flex-shrink-0",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("svg", {\n                  className: "h-8 w-8 text-orange-600",\n                  fill: "none",\n                  viewBox: "0 0 24 24",\n                  stroke: "currentColor",\n                  children: /*#__PURE__*/(0,jsx_runtime.jsx)("path", {\n                    strokeLinecap: "round",\n                    strokeLinejoin: "round",\n                    strokeWidth: 2,\n                    d: "M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"\n                  })\n                })\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "ml-4",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                  className: "text-sm font-medium text-orange-600",\n                  children: "Recent Activity"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                  className: "text-2xl font-semibold text-orange-900",\n                  children: recentTrades.length\n                })]\n              })]\n            })\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n            className: "text-lg font-medium text-gray-900 mb-4",\n            children: "Congresspeople"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4",\n            children: getFilteredCongressPeople().map(function (person) {\n              return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                onClick: function onClick() {\n                  return handlePersonSelect(person);\n                },\n                className: "border border-gray-200 rounded-lg p-4 cursor-pointer hover:bg-gray-50 hover:border-blue-300 transition-colors",\n                children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "flex items-start justify-between",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                    className: "flex-1",\n                    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n                      className: "text-sm font-medium text-gray-900",\n                      children: person.name\n                    }), /*#__PURE__*/(0,jsx_runtime.jsxs)("p", {\n                      className: "text-xs text-gray-500",\n                      children: [person.state, " \\u2022 ", person.chamber]\n                    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                      className: "flex items-center mt-2",\n                      children: /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                        className: "inline-flex items-center px-2 py-1 rounded-full text-xs font-medium text-white ".concat(getPartyColor(person.party)),\n                        children: person.party === \'D\' ? \'Democrat\' : person.party === \'R\' ? \'Republican\' : \'Independent\'\n                      })\n                    }), person.committee.length > 0 && /*#__PURE__*/(0,jsx_runtime.jsxs)("p", {\n                      className: "text-xs text-gray-500 mt-2",\n                      children: ["Committees: ", person.committee.slice(0, 2).join(\', \'), person.committee.length > 2 && \'...\']\n                    })]\n                  }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                    className: "text-right",\n                    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                      className: "text-xs text-gray-500",\n                      children: "Trades"\n                    }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                      className: "text-sm font-medium text-gray-900",\n                      children: person.totalTrades || 0\n                    }), person.lastTradeDate && /*#__PURE__*/(0,jsx_runtime.jsxs)("p", {\n                      className: "text-xs text-gray-400 mt-1",\n                      children: ["Last: ", new Date(person.lastTradeDate).toLocaleDateString()]\n                    })]\n                  })]\n                })\n              }, person.id);\n            })\n          })]\n        })]\n      }), activeTab === \'trades\' && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "space-y-6",\n        children: [selectedPerson && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "bg-blue-50 p-4 rounded-lg",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("h3", {\n            className: "text-lg font-medium text-blue-900 mb-2",\n            children: ["Trades by ", selectedPerson.name]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("p", {\n            className: "text-sm text-blue-700",\n            children: [selectedPerson.state, " \\u2022 ", selectedPerson.chamber, " \\u2022 ", selectedPerson.party === \'D\' ? \'Democrat\' : selectedPerson.party === \'R\' ? \'Republican\' : \'Independent\']\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "overflow-x-auto",\n          children: /*#__PURE__*/(0,jsx_runtime.jsxs)("table", {\n            className: "min-w-full divide-y divide-gray-200",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("thead", {\n              className: "bg-gray-50",\n              children: /*#__PURE__*/(0,jsx_runtime.jsxs)("tr", {\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("th", {\n                  className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider",\n                  children: "Congressperson"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("th", {\n                  className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider",\n                  children: "Company"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("th", {\n                  className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider",\n                  children: "Trade"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("th", {\n                  className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider",\n                  children: "Amount"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("th", {\n                  className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider",\n                  children: "Date"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("th", {\n                  className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider",\n                  children: "Owner"\n                })]\n              })\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("tbody", {\n              className: "bg-white divide-y divide-gray-200",\n              children: (selectedPerson ? personTrades : recentTrades).map(function (trade) {\n                return /*#__PURE__*/(0,jsx_runtime.jsxs)("tr", {\n                  className: "hover:bg-gray-50",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("td", {\n                    className: "px-6 py-4 whitespace-nowrap",\n                    children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                      className: "flex items-center",\n                      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                        className: "flex-shrink-0 h-8 w-8",\n                        children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                          className: "h-8 w-8 rounded-full bg-gray-300 flex items-center justify-center",\n                          children: /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                            className: "text-sm font-medium text-gray-700",\n                            children: trade.congressPersonName.charAt(0)\n                          })\n                        })\n                      }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                        className: "ml-4",\n                        children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                          className: "text-sm font-medium text-gray-900",\n                          children: trade.congressPersonName\n                        })\n                      })]\n                    })\n                  }), /*#__PURE__*/(0,jsx_runtime.jsxs)("td", {\n                    className: "px-6 py-4 whitespace-nowrap",\n                    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                      className: "text-sm text-gray-900",\n                      children: trade.ticker\n                    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                      className: "text-sm text-gray-500",\n                      children: trade.companyName\n                    })]\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("td", {\n                    className: "px-6 py-4 whitespace-nowrap",\n                    children: /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                      className: "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ".concat(trade.tradeType === \'buy\' ? \'bg-green-100 text-green-800\' : \'bg-red-100 text-red-800\'),\n                      children: trade.tradeType.toUpperCase()\n                    })\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("td", {\n                    className: "px-6 py-4 whitespace-nowrap text-sm text-gray-900",\n                    children: formatAmount(trade.amount)\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("td", {\n                    className: "px-6 py-4 whitespace-nowrap text-sm text-gray-500",\n                    children: new Date(trade.tradeDate).toLocaleDateString()\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("td", {\n                    className: "px-6 py-4 whitespace-nowrap text-sm text-gray-500",\n                    children: trade.owner\n                  })]\n                }, trade.id);\n              })\n            })]\n          })\n        })]\n      }), activeTab === \'analytics\' && analytics && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "space-y-6",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n            className: "text-lg font-medium text-gray-900 mb-4",\n            children: "Most Traded Stocks"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "bg-gray-50 rounded-lg p-4",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "space-y-3",\n              children: analytics.mostTradedStocks.map(function (stock, index) {\n                return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "flex items-center justify-between",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                    className: "flex items-center",\n                    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n                      className: "text-sm font-medium text-gray-500 w-6",\n                      children: [index + 1, "."]\n                    }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                      className: "text-sm font-medium text-gray-900",\n                      children: stock.ticker\n                    }), /*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n                      className: "text-sm text-gray-500 ml-2",\n                      children: ["(", stock.count, " trades)"]\n                    })]\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                    className: "text-sm font-medium text-gray-900",\n                    children: formatAmount(stock.volume)\n                  })]\n                }, stock.ticker);\n              })\n            })\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n            className: "text-lg font-medium text-gray-900 mb-4",\n            children: "Trading by Party"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "grid grid-cols-1 md:grid-cols-3 gap-4",\n            children: analytics.partyBreakdown.map(function (party) {\n              return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "bg-gray-50 rounded-lg p-4",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "flex items-center justify-between",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                    className: "text-sm font-medium text-gray-900",\n                    children: party.party === \'D\' ? \'Democrats\' : party.party === \'R\' ? \'Republicans\' : \'Independents\'\n                  }), /*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n                    className: "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ".concat(party.party === \'D\' ? \'bg-blue-100 text-blue-800\' : party.party === \'R\' ? \'bg-red-100 text-red-800\' : \'bg-purple-100 text-purple-800\'),\n                    children: [party.count, " trades"]\n                  })]\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "mt-2 text-2xl font-bold text-gray-900",\n                  children: formatAmount(party.volume)\n                })]\n              }, party.party);\n            })\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n            className: "text-lg font-medium text-gray-900 mb-4",\n            children: "Monthly Trading Trends"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "bg-gray-50 rounded-lg p-4",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "space-y-3",\n              children: analytics.monthlyTrends.map(function (trend) {\n                return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "flex items-center justify-between",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                    className: "text-sm font-medium text-gray-900",\n                    children: trend.month\n                  }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                    className: "flex items-center space-x-4",\n                    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n                      className: "text-sm text-gray-500",\n                      children: [trend.count, " trades"]\n                    }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                      className: "text-sm font-medium text-gray-900",\n                      children: formatAmount(trend.volume)\n                    })]\n                  })]\n                }, trend.month);\n              })\n            })\n          })]\n        })]\n      })]\n    })]\n  });\n};\n/* harmony default export */ const components_CongressionalTrading = (CongressionalTrading);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QSxnQkFDbEV2RSxtQkFBQTtvQkFBTU0sU0FBUyxFQUFDLG1DQUFtQztvQkFBQWlFLFFBQUEsRUFBRW1CLEtBQUssQ0FBQ2xIO2tCQUFLLENBQU8sQ0FBQyxlQUN4RTBCLG9CQUFBO29CQUFLSSxTQUFTLEVBQUMsNkJBQTZCO29CQUFBaUUsUUFBQSxnQkFDMUNyRSxvQkFBQTtzQkFBTUksU0FBUyxFQUFDLHVCQUF1QjtzQkFBQWlFLFFBQUEsR0FBRW1CLEtBQUssQ0FBQ3BILEtBQUssRUFBQyxTQUFPO29CQUFBLENBQU0sQ0FBQyxlQUNuRTBCLG1CQUFBO3NCQUFNTSxTQUFTLEVBQUMsbUNBQW1DO3NCQUFBaUUsUUFBQSxFQUNoREYsWUFBWSxDQUFDcUIsS0FBSyxDQUFDbkgsTUFBTTtvQkFBQyxDQUN2QixDQUFDO2tCQUFBLENBQ0osQ0FBQztnQkFBQSxHQVBFbUgsS0FBSyxDQUFDbEgsS0FRWCxDQUFDO2NBQUEsQ0FDUDtZQUFDLENBQ0M7VUFBQyxDQUNILENBQUM7UUFBQSxDQUNILENBQUM7TUFBQSxDQUNILENBQ047SUFBQSxDQUNFLENBQUM7RUFBQSxDQUNILENBQUM7QUFFVixDQUFDO0FBRUQsc0VBQWUyQixvQkFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lemFuYWV6YW5hLy4vd3d3cm9vdC9qcy9yZWFjdC9zZXJ2aWNlcy9xdWl2ZXJBcGkudHM/NWFiNSIsIndlYnBhY2s6Ly9lemFuYWV6YW5hLy4vd3d3cm9vdC9qcy9yZWFjdC9jb21wb25lbnRzL0NvbmdyZXNzaW9uYWxUcmFkaW5nLnRzeD8xM2UxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcywgeyBBeGlvc0luc3RhbmNlIH0gZnJvbSAnYXhpb3MnO1xyXG5cclxuLy8gUXVpdmVyIFF1YW50aXRhdGl2ZSBBUEkgU2VydmljZSBmb3IgQ29uZ3Jlc3Npb25hbCBUcmFkaW5nIERhdGFcclxuLy8gaHR0cHM6Ly93d3cucXVpdmVycXVhbnQuY29tL1xyXG5cclxuLy8gQVBJIENvbmZpZ3VyYXRpb25cclxuY29uc3QgQVBJX0NPTkZJRyA9IHtcclxuICBRVUlWRVI6IHtcclxuICAgIEJBU0VfVVJMOiAnaHR0cHM6Ly9hcGkucXVpdmVycXVhbnQuY29tL2JldGEnLFxyXG4gICAgQVBJX0tFWTogJzJmYjk1Yzg5MTAzZDRjYjA3YjI2ZmZmMDdjOGNmYTc3NjI2MjkxZGEnLFxyXG4gICAgRlJFRV9USUVSX0xJTUlUOiAxMDAwIC8vIHJlcXVlc3RzIHBlciBtb250aFxyXG4gIH1cclxufTtcclxuXHJcbi8vIFR5cGVzIGZvciBjb25ncmVzc2lvbmFsIHRyYWRpbmcgZGF0YVxyXG5leHBvcnQgaW50ZXJmYWNlIENvbmdyZXNzUGVyc29uIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIG5hbWU6IHN0cmluZztcclxuICBwYXJ0eTogJ0QnIHwgJ1InIHwgJ0knO1xyXG4gIHN0YXRlOiBzdHJpbmc7XHJcbiAgY2hhbWJlcjogJ0hvdXNlJyB8ICdTZW5hdGUnO1xyXG4gIGNvbW1pdHRlZTogc3RyaW5nW107XHJcbiAgaW1hZ2VVcmw/OiBzdHJpbmc7XHJcbiAgbGFzdFRyYWRlRGF0ZT86IHN0cmluZztcclxuICB0b3RhbFRyYWRlcz86IG51bWJlcjtcclxuICBpc1RyYWNrZWQ/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbmdyZXNzaW9uYWxUcmFkZSB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBjb25ncmVzc1BlcnNvbklkOiBzdHJpbmc7XHJcbiAgY29uZ3Jlc3NQZXJzb25OYW1lOiBzdHJpbmc7XHJcbiAgdGlja2VyOiBzdHJpbmc7XHJcbiAgY29tcGFueU5hbWU6IHN0cmluZztcclxuICB0cmFkZVR5cGU6ICdidXknIHwgJ3NlbGwnO1xyXG4gIGFtb3VudDogbnVtYmVyOyAvLyBBbW91bnQgaW4gVVNEXHJcbiAgYW1vdW50UmFuZ2U6ICcxLDAwMS0xNSwwMDAnIHwgJzE1LDAwMS01MCwwMDAnIHwgJzUwLDAwMS0xMDAsMDAwJyB8ICcxMDAsMDAxLTI1MCwwMDAnIHwgJzI1MCwwMDEtNTAwLDAwMCcgfCAnNTAwLDAwMS0xLDAwMCwwMDAnIHwgJzEsMDAwLDAwMSsnO1xyXG4gIHRyYWRlRGF0ZTogc3RyaW5nO1xyXG4gIGRpc2Nsb3N1cmVEYXRlOiBzdHJpbmc7XHJcbiAgb3duZXI6ICdzZWxmJyB8ICdzcG91c2UnIHwgJ2RlcGVuZGVudCc7XHJcbiAgc2VjdG9yPzogc3RyaW5nO1xyXG4gIGluZHVzdHJ5Pzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRyYWRlTm90aWZpY2F0aW9uIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIGNvbmdyZXNzUGVyc29uSWQ6IHN0cmluZztcclxuICBjb25ncmVzc1BlcnNvbk5hbWU6IHN0cmluZztcclxuICB0aWNrZXI6IHN0cmluZztcclxuICBjb21wYW55TmFtZTogc3RyaW5nO1xyXG4gIHRyYWRlVHlwZTogJ2J1eScgfCAnc2VsbCc7XHJcbiAgYW1vdW50OiBudW1iZXI7XHJcbiAgdHJhZGVEYXRlOiBzdHJpbmc7XHJcbiAgaXNSZWFkOiBib29sZWFuO1xyXG4gIGNyZWF0ZWRBdDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZXJTdWJzY3JpcHRpb24ge1xyXG4gIHVzZXJJZDogc3RyaW5nO1xyXG4gIGNvbmdyZXNzUGVyc29uSWQ6IHN0cmluZztcclxuICBjb25ncmVzc1BlcnNvbk5hbWU6IHN0cmluZztcclxuICBub3RpZmljYXRpb25zRW5hYmxlZDogYm9vbGVhbjtcclxuICBlbWFpbEFsZXJ0czogYm9vbGVhbjtcclxuICBwdXNoTm90aWZpY2F0aW9uczogYm9vbGVhbjtcclxuICBjcmVhdGVkQXQ6IHN0cmluZztcclxuICBsYXN0Tm90aWZpY2F0aW9uRGF0ZT86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUcmFkaW5nQW5hbHl0aWNzIHtcclxuICB0b3RhbFRyYWRlczogbnVtYmVyO1xyXG4gIHRvdGFsVm9sdW1lOiBudW1iZXI7XHJcbiAgbW9zdFRyYWRlZFN0b2NrczogQXJyYXk8eyB0aWNrZXI6IHN0cmluZzsgY291bnQ6IG51bWJlcjsgdm9sdW1lOiBudW1iZXIgfT47XHJcbiAgc2VjdG9yQnJlYWtkb3duOiBBcnJheTx7IHNlY3Rvcjogc3RyaW5nOyBjb3VudDogbnVtYmVyOyB2b2x1bWU6IG51bWJlciB9PjtcclxuICBwYXJ0eUJyZWFrZG93bjogQXJyYXk8eyBwYXJ0eTogc3RyaW5nOyBjb3VudDogbnVtYmVyOyB2b2x1bWU6IG51bWJlciB9PjtcclxuICBtb250aGx5VHJlbmRzOiBBcnJheTx7IG1vbnRoOiBzdHJpbmc7IGNvdW50OiBudW1iZXI7IHZvbHVtZTogbnVtYmVyIH0+O1xyXG59XHJcblxyXG4vLyBNYWluIFF1aXZlciBRdWFudGl0YXRpdmUgQVBJIFNlcnZpY2VcclxuY2xhc3MgUXVpdmVyQXBpU2VydmljZSB7XHJcbiAgcHJpdmF0ZSBxdWl2ZXI6IEF4aW9zSW5zdGFuY2U7XHJcbiAgcHJpdmF0ZSB1c2VNb2NrRGF0YTogYm9vbGVhbiA9IGZhbHNlOyAvLyBEZWZhdWx0IHRvIHJlYWwgQVBJIGNhbGxzXHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5xdWl2ZXIgPSBheGlvcy5jcmVhdGUoe1xyXG4gICAgICBiYXNlVVJMOiBBUElfQ09ORklHLlFVSVZFUi5CQVNFX1VSTCxcclxuICAgICAgdGltZW91dDogMTUwMDAsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHtBUElfQ09ORklHLlFVSVZFUi5BUElfS0VZfWAsXHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGNvbnNvbGUubG9nKCdRdWl2ZXIgUXVhbnRpdGF0aXZlIEFQSSBTZXJ2aWNlIGluaXRpYWxpemVkJyk7XHJcbiAgfVxyXG5cclxuICAvLyBUb2dnbGUgYmV0d2VlbiByZWFsIEFQSSBhbmQgbW9jayBkYXRhXHJcbiAgc2V0VXNlTW9ja0RhdGEodXNlTW9jazogYm9vbGVhbikge1xyXG4gICAgdGhpcy51c2VNb2NrRGF0YSA9IHVzZU1vY2s7XHJcbiAgICBjb25zb2xlLmxvZyhgUXVpdmVyIEFQSTogJHt1c2VNb2NrID8gJ1VzaW5nIG1vY2sgZGF0YScgOiAnVXNpbmcgUXVpdmVyIFF1YW50aXRhdGl2ZSBBUEknfWApO1xyXG4gIH1cclxuXHJcbiAgLy8gR2V0IGFsbCBjb25ncmVzc3Blb3BsZVxyXG4gIGFzeW5jIGdldENvbmdyZXNzUGVvcGxlKCk6IFByb21pc2U8Q29uZ3Jlc3NQZXJzb25bXT4ge1xyXG4gICAgaWYgKHRoaXMudXNlTW9ja0RhdGEpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVNb2NrQ29uZ3Jlc3NQZW9wbGUoKTtcclxuICAgIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zb2xlLmxvZygnRmV0Y2hpbmcgY29uZ3Jlc3NwZW9wbGUgZnJvbSBRdWl2ZXIgUXVhbnRpdGF0aXZlLi4uJyk7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5xdWl2ZXIuZ2V0KCcvY29uZ3Jlc3NwZW9wbGUnKTtcclxuICAgICAgXHJcbiAgICAgIGlmICghcmVzcG9uc2UuZGF0YSB8fCAhQXJyYXkuaXNBcnJheShyZXNwb25zZS5kYXRhKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCByZXNwb25zZSBmb3JtYXQgZnJvbSBRdWl2ZXIgQVBJJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhLm1hcCgocGVyc29uOiBhbnkpID0+ICh7XHJcbiAgICAgICAgaWQ6IHBlcnNvbi5pZCB8fCBwZXJzb24uY29uZ3Jlc3NwZXJzb25faWQsXHJcbiAgICAgICAgbmFtZTogcGVyc29uLm5hbWUgfHwgcGVyc29uLmNvbmdyZXNzcGVyc29uX25hbWUsXHJcbiAgICAgICAgcGFydHk6IHBlcnNvbi5wYXJ0eSB8fCAnSScsXHJcbiAgICAgICAgc3RhdGU6IHBlcnNvbi5zdGF0ZSB8fCAnVW5rbm93bicsXHJcbiAgICAgICAgY2hhbWJlcjogcGVyc29uLmNoYW1iZXIgfHwgJ0hvdXNlJyxcclxuICAgICAgICBjb21taXR0ZWU6IHBlcnNvbi5jb21taXR0ZWUgfHwgW10sXHJcbiAgICAgICAgaW1hZ2VVcmw6IHBlcnNvbi5pbWFnZV91cmwsXHJcbiAgICAgICAgbGFzdFRyYWRlRGF0ZTogcGVyc29uLmxhc3RfdHJhZGVfZGF0ZSxcclxuICAgICAgICB0b3RhbFRyYWRlczogcGVyc29uLnRvdGFsX3RyYWRlcyB8fCAwXHJcbiAgICAgIH0pKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGNvbmdyZXNzcGVvcGxlIGZyb20gUXVpdmVyOicsIGVycm9yKTtcclxuICAgICAgY29uc29sZS5sb2coJ0ZhbGxpbmcgYmFjayB0byBtb2NrIGRhdGEnKTtcclxuICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVNb2NrQ29uZ3Jlc3NQZW9wbGUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEdldCBjb25ncmVzc2lvbmFsIHRyYWRlcyBmb3IgYSBzcGVjaWZpYyBwZXJzb25cclxuICBhc3luYyBnZXRDb25ncmVzc1BlcnNvblRyYWRlcyhjb25ncmVzc1BlcnNvbklkOiBzdHJpbmcsIGxpbWl0OiBudW1iZXIgPSA1MCk6IFByb21pc2U8Q29uZ3Jlc3Npb25hbFRyYWRlW10+IHtcclxuICAgIGlmICh0aGlzLnVzZU1vY2tEYXRhKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlTW9ja1RyYWRlcyhjb25ncmVzc1BlcnNvbklkLCBsaW1pdCk7XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc29sZS5sb2coYEZldGNoaW5nIHRyYWRlcyBmb3IgY29uZ3Jlc3NwZXJzb24gJHtjb25ncmVzc1BlcnNvbklkfSBmcm9tIFF1aXZlci4uLmApO1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMucXVpdmVyLmdldChgL2NvbmdyZXNzcGVyc29uLyR7Y29uZ3Jlc3NQZXJzb25JZH0vdHJhZGVzYCwge1xyXG4gICAgICAgIHBhcmFtczogeyBsaW1pdCB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKCFyZXNwb25zZS5kYXRhIHx8ICFBcnJheS5pc0FycmF5KHJlc3BvbnNlLmRhdGEpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlc3BvbnNlIGZvcm1hdCBmcm9tIFF1aXZlciBBUEknKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEubWFwKCh0cmFkZTogYW55KSA9PiAoe1xyXG4gICAgICAgIGlkOiB0cmFkZS5pZCB8fCB0cmFkZS50cmFkZV9pZCxcclxuICAgICAgICBjb25ncmVzc1BlcnNvbklkOiB0cmFkZS5jb25ncmVzc3BlcnNvbl9pZCxcclxuICAgICAgICBjb25ncmVzc1BlcnNvbk5hbWU6IHRyYWRlLmNvbmdyZXNzcGVyc29uX25hbWUsXHJcbiAgICAgICAgdGlja2VyOiB0cmFkZS50aWNrZXIsXHJcbiAgICAgICAgY29tcGFueU5hbWU6IHRyYWRlLmNvbXBhbnlfbmFtZSxcclxuICAgICAgICB0cmFkZVR5cGU6IHRyYWRlLnRyYWRlX3R5cGU/LnRvTG93ZXJDYXNlKCkgfHwgJ2J1eScsXHJcbiAgICAgICAgYW1vdW50OiB0cmFkZS5hbW91bnQgfHwgMCxcclxuICAgICAgICBhbW91bnRSYW5nZTogdHJhZGUuYW1vdW50X3JhbmdlIHx8ICcxLDAwMS0xNSwwMDAnLFxyXG4gICAgICAgIHRyYWRlRGF0ZTogdHJhZGUudHJhZGVfZGF0ZSxcclxuICAgICAgICBkaXNjbG9zdXJlRGF0ZTogdHJhZGUuZGlzY2xvc3VyZV9kYXRlLFxyXG4gICAgICAgIG93bmVyOiB0cmFkZS5vd25lciB8fCAnc2VsZicsXHJcbiAgICAgICAgc2VjdG9yOiB0cmFkZS5zZWN0b3IsXHJcbiAgICAgICAgaW5kdXN0cnk6IHRyYWRlLmluZHVzdHJ5XHJcbiAgICAgIH0pKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGZldGNoaW5nIHRyYWRlcyBmb3IgY29uZ3Jlc3NwZXJzb24gJHtjb25ncmVzc1BlcnNvbklkfTpgLCBlcnJvcik7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdGYWxsaW5nIGJhY2sgdG8gbW9jayBkYXRhJyk7XHJcbiAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlTW9ja1RyYWRlcyhjb25ncmVzc1BlcnNvbklkLCBsaW1pdCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBHZXQgcmVjZW50IGNvbmdyZXNzaW9uYWwgdHJhZGVzIGFjcm9zcyBhbGwgY29uZ3Jlc3NwZW9wbGVcclxuICBhc3luYyBnZXRSZWNlbnRUcmFkZXMobGltaXQ6IG51bWJlciA9IDEwMCk6IFByb21pc2U8Q29uZ3Jlc3Npb25hbFRyYWRlW10+IHtcclxuICAgIGlmICh0aGlzLnVzZU1vY2tEYXRhKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlTW9ja1JlY2VudFRyYWRlcyhsaW1pdCk7XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc29sZS5sb2coJ0ZldGNoaW5nIHJlY2VudCBjb25ncmVzc2lvbmFsIHRyYWRlcyBmcm9tIFF1aXZlci4uLicpO1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMucXVpdmVyLmdldCgnL2NvbmdyZXNzaW9uYWwtdHJhZGVzJywge1xyXG4gICAgICAgIHBhcmFtczogeyBsaW1pdCB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKCFyZXNwb25zZS5kYXRhIHx8ICFBcnJheS5pc0FycmF5KHJlc3BvbnNlLmRhdGEpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlc3BvbnNlIGZvcm1hdCBmcm9tIFF1aXZlciBBUEknKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEubWFwKCh0cmFkZTogYW55KSA9PiAoe1xyXG4gICAgICAgIGlkOiB0cmFkZS5pZCB8fCB0cmFkZS50cmFkZV9pZCxcclxuICAgICAgICBjb25ncmVzc1BlcnNvbklkOiB0cmFkZS5jb25ncmVzc3BlcnNvbl9pZCxcclxuICAgICAgICBjb25ncmVzc1BlcnNvbk5hbWU6IHRyYWRlLmNvbmdyZXNzcGVyc29uX25hbWUsXHJcbiAgICAgICAgdGlja2VyOiB0cmFkZS50aWNrZXIsXHJcbiAgICAgICAgY29tcGFueU5hbWU6IHRyYWRlLmNvbXBhbnlfbmFtZSxcclxuICAgICAgICB0cmFkZVR5cGU6IHRyYWRlLnRyYWRlX3R5cGU/LnRvTG93ZXJDYXNlKCkgfHwgJ2J1eScsXHJcbiAgICAgICAgYW1vdW50OiB0cmFkZS5hbW91bnQgfHwgMCxcclxuICAgICAgICBhbW91bnRSYW5nZTogdHJhZGUuYW1vdW50X3JhbmdlIHx8ICcxLDAwMS0xNSwwMDAnLFxyXG4gICAgICAgIHRyYWRlRGF0ZTogdHJhZGUudHJhZGVfZGF0ZSxcclxuICAgICAgICBkaXNjbG9zdXJlRGF0ZTogdHJhZGUuZGlzY2xvc3VyZV9kYXRlLFxyXG4gICAgICAgIG93bmVyOiB0cmFkZS5vd25lciB8fCAnc2VsZicsXHJcbiAgICAgICAgc2VjdG9yOiB0cmFkZS5zZWN0b3IsXHJcbiAgICAgICAgaW5kdXN0cnk6IHRyYWRlLmluZHVzdHJ5XHJcbiAgICAgIH0pKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHJlY2VudCBjb25ncmVzc2lvbmFsIHRyYWRlczonLCBlcnJvcik7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdGYWxsaW5nIGJhY2sgdG8gbW9jayBkYXRhJyk7XHJcbiAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlTW9ja1JlY2VudFRyYWRlcyhsaW1pdCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBHZXQgdHJhZGluZyBhbmFseXRpY3MgYW5kIGluc2lnaHRzXHJcbiAgYXN5bmMgZ2V0VHJhZGluZ0FuYWx5dGljcygpOiBQcm9taXNlPFRyYWRpbmdBbmFseXRpY3M+IHtcclxuICAgIGlmICh0aGlzLnVzZU1vY2tEYXRhKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlTW9ja1RyYWRpbmdBbmFseXRpY3MoKTtcclxuICAgIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zb2xlLmxvZygnRmV0Y2hpbmcgdHJhZGluZyBhbmFseXRpY3MgZnJvbSBRdWl2ZXIuLi4nKTtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnF1aXZlci5nZXQoJy9jb25ncmVzc2lvbmFsLXRyYWRpbmctYW5hbHl0aWNzJyk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoIXJlc3BvbnNlLmRhdGEpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcmVzcG9uc2UgZm9ybWF0IGZyb20gUXVpdmVyIEFQSScpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHRvdGFsVHJhZGVzOiByZXNwb25zZS5kYXRhLnRvdGFsX3RyYWRlcyB8fCAwLFxyXG4gICAgICAgIHRvdGFsVm9sdW1lOiByZXNwb25zZS5kYXRhLnRvdGFsX3ZvbHVtZSB8fCAwLFxyXG4gICAgICAgIG1vc3RUcmFkZWRTdG9ja3M6IHJlc3BvbnNlLmRhdGEubW9zdF90cmFkZWRfc3RvY2tzIHx8IFtdLFxyXG4gICAgICAgIHNlY3RvckJyZWFrZG93bjogcmVzcG9uc2UuZGF0YS5zZWN0b3JfYnJlYWtkb3duIHx8IFtdLFxyXG4gICAgICAgIHBhcnR5QnJlYWtkb3duOiByZXNwb25zZS5kYXRhLnBhcnR5X2JyZWFrZG93biB8fCBbXSxcclxuICAgICAgICBtb250aGx5VHJlbmRzOiByZXNwb25zZS5kYXRhLm1vbnRobHlfdHJlbmRzIHx8IFtdXHJcbiAgICAgIH07XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyB0cmFkaW5nIGFuYWx5dGljczonLCBlcnJvcik7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdGYWxsaW5nIGJhY2sgdG8gbW9jayBkYXRhJyk7XHJcbiAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlTW9ja1RyYWRpbmdBbmFseXRpY3MoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFNlYXJjaCBjb25ncmVzc3Blb3BsZSBieSBuYW1lLCBzdGF0ZSwgb3IgcGFydHlcclxuICBhc3luYyBzZWFyY2hDb25ncmVzc1Blb3BsZShxdWVyeTogc3RyaW5nKTogUHJvbWlzZTxDb25ncmVzc1BlcnNvbltdPiB7XHJcbiAgICBjb25zdCBhbGxQZW9wbGUgPSBhd2FpdCB0aGlzLmdldENvbmdyZXNzUGVvcGxlKCk7XHJcbiAgICBcclxuICAgIHJldHVybiBhbGxQZW9wbGUuZmlsdGVyKHBlcnNvbiA9PiBcclxuICAgICAgcGVyc29uLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhxdWVyeS50b0xvd2VyQ2FzZSgpKSB8fFxyXG4gICAgICBwZXJzb24uc3RhdGUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhxdWVyeS50b0xvd2VyQ2FzZSgpKSB8fFxyXG4gICAgICBwZXJzb24ucGFydHkudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhxdWVyeS50b0xvd2VyQ2FzZSgpKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8vIEdldCBjb25ncmVzc3Blb3BsZSBieSBzdGF0ZVxyXG4gIGFzeW5jIGdldENvbmdyZXNzUGVvcGxlQnlTdGF0ZShzdGF0ZTogc3RyaW5nKTogUHJvbWlzZTxDb25ncmVzc1BlcnNvbltdPiB7XHJcbiAgICBjb25zdCBhbGxQZW9wbGUgPSBhd2FpdCB0aGlzLmdldENvbmdyZXNzUGVvcGxlKCk7XHJcbiAgICByZXR1cm4gYWxsUGVvcGxlLmZpbHRlcihwZXJzb24gPT4gXHJcbiAgICAgIHBlcnNvbi5zdGF0ZS50b0xvd2VyQ2FzZSgpID09PSBzdGF0ZS50b0xvd2VyQ2FzZSgpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLy8gR2V0IGNvbmdyZXNzcGVvcGxlIGJ5IHBhcnR5XHJcbiAgYXN5bmMgZ2V0Q29uZ3Jlc3NQZW9wbGVCeVBhcnR5KHBhcnR5OiAnRCcgfCAnUicgfCAnSScpOiBQcm9taXNlPENvbmdyZXNzUGVyc29uW10+IHtcclxuICAgIGNvbnN0IGFsbFBlb3BsZSA9IGF3YWl0IHRoaXMuZ2V0Q29uZ3Jlc3NQZW9wbGUoKTtcclxuICAgIHJldHVybiBhbGxQZW9wbGUuZmlsdGVyKHBlcnNvbiA9PiBwZXJzb24ucGFydHkgPT09IHBhcnR5KTtcclxuICB9XHJcblxyXG4gIC8vIEdldCBjb25ncmVzc3Blb3BsZSBieSBjaGFtYmVyXHJcbiAgYXN5bmMgZ2V0Q29uZ3Jlc3NQZW9wbGVCeUNoYW1iZXIoY2hhbWJlcjogJ0hvdXNlJyB8ICdTZW5hdGUnKTogUHJvbWlzZTxDb25ncmVzc1BlcnNvbltdPiB7XHJcbiAgICBjb25zdCBhbGxQZW9wbGUgPSBhd2FpdCB0aGlzLmdldENvbmdyZXNzUGVvcGxlKCk7XHJcbiAgICByZXR1cm4gYWxsUGVvcGxlLmZpbHRlcihwZXJzb24gPT4gcGVyc29uLmNoYW1iZXIgPT09IGNoYW1iZXIpO1xyXG4gIH1cclxuXHJcbiAgLy8gTW9jayBkYXRhIGdlbmVyYXRvcnMgZm9yIGZhbGxiYWNrXHJcbiAgcHJpdmF0ZSBnZW5lcmF0ZU1vY2tDb25ncmVzc1Blb3BsZSgpOiBDb25ncmVzc1BlcnNvbltdIHtcclxuICAgIGNvbnN0IG1vY2tQZW9wbGUgPSBbXHJcbiAgICAgIHtcclxuICAgICAgICBpZDogJzEnLFxyXG4gICAgICAgIG5hbWU6ICdOYW5jeSBQZWxvc2knLFxyXG4gICAgICAgIHBhcnR5OiAnRCcgYXMgY29uc3QsXHJcbiAgICAgICAgc3RhdGU6ICdDQScsXHJcbiAgICAgICAgY2hhbWJlcjogJ0hvdXNlJyBhcyBjb25zdCxcclxuICAgICAgICBjb21taXR0ZWU6IFsnQXBwcm9wcmlhdGlvbnMnLCAnSW50ZWxsaWdlbmNlJ10sXHJcbiAgICAgICAgbGFzdFRyYWRlRGF0ZTogJzIwMjQtMDEtMTUnLFxyXG4gICAgICAgIHRvdGFsVHJhZGVzOiA0NVxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgaWQ6ICcyJyxcclxuICAgICAgICBuYW1lOiAnTWl0Y2ggTWNDb25uZWxsJyxcclxuICAgICAgICBwYXJ0eTogJ1InIGFzIGNvbnN0LFxyXG4gICAgICAgIHN0YXRlOiAnS1knLFxyXG4gICAgICAgIGNoYW1iZXI6ICdTZW5hdGUnIGFzIGNvbnN0LFxyXG4gICAgICAgIGNvbW1pdHRlZTogWydBcHByb3ByaWF0aW9ucycsICdSdWxlcyddLFxyXG4gICAgICAgIGxhc3RUcmFkZURhdGU6ICcyMDI0LTAxLTEwJyxcclxuICAgICAgICB0b3RhbFRyYWRlczogMzJcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGlkOiAnMycsXHJcbiAgICAgICAgbmFtZTogJ0NodWNrIFNjaHVtZXInLFxyXG4gICAgICAgIHBhcnR5OiAnRCcgYXMgY29uc3QsXHJcbiAgICAgICAgc3RhdGU6ICdOWScsXHJcbiAgICAgICAgY2hhbWJlcjogJ1NlbmF0ZScgYXMgY29uc3QsXHJcbiAgICAgICAgY29tbWl0dGVlOiBbJ0ZpbmFuY2UnLCAnSnVkaWNpYXJ5J10sXHJcbiAgICAgICAgbGFzdFRyYWRlRGF0ZTogJzIwMjQtMDEtMTInLFxyXG4gICAgICAgIHRvdGFsVHJhZGVzOiAyOFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgaWQ6ICc0JyxcclxuICAgICAgICBuYW1lOiAnS2V2aW4gTWNDYXJ0aHknLFxyXG4gICAgICAgIHBhcnR5OiAnUicgYXMgY29uc3QsXHJcbiAgICAgICAgc3RhdGU6ICdDQScsXHJcbiAgICAgICAgY2hhbWJlcjogJ0hvdXNlJyBhcyBjb25zdCxcclxuICAgICAgICBjb21taXR0ZWU6IFsnRmluYW5jaWFsIFNlcnZpY2VzJ10sXHJcbiAgICAgICAgbGFzdFRyYWRlRGF0ZTogJzIwMjQtMDEtMDgnLFxyXG4gICAgICAgIHRvdGFsVHJhZGVzOiAxOVxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgaWQ6ICc1JyxcclxuICAgICAgICBuYW1lOiAnQWxleGFuZHJpYSBPY2FzaW8tQ29ydGV6JyxcclxuICAgICAgICBwYXJ0eTogJ0QnIGFzIGNvbnN0LFxyXG4gICAgICAgIHN0YXRlOiAnTlknLFxyXG4gICAgICAgIGNoYW1iZXI6ICdIb3VzZScgYXMgY29uc3QsXHJcbiAgICAgICAgY29tbWl0dGVlOiBbJ092ZXJzaWdodCcsICdGaW5hbmNpYWwgU2VydmljZXMnXSxcclxuICAgICAgICBsYXN0VHJhZGVEYXRlOiAnMjAyNC0wMS0wNScsXHJcbiAgICAgICAgdG90YWxUcmFkZXM6IDEyXHJcbiAgICAgIH1cclxuICAgIF07XHJcblxyXG4gICAgcmV0dXJuIG1vY2tQZW9wbGU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdlbmVyYXRlTW9ja1RyYWRlcyhjb25ncmVzc1BlcnNvbklkOiBzdHJpbmcsIGxpbWl0OiBudW1iZXIpOiBDb25ncmVzc2lvbmFsVHJhZGVbXSB7XHJcbiAgICBjb25zdCBtb2NrVHJhZGVzOiBDb25ncmVzc2lvbmFsVHJhZGVbXSA9IFtdO1xyXG4gICAgY29uc3QgY29tcGFuaWVzID0gWydBQVBMJywgJ01TRlQnLCAnR09PR0wnLCAnVFNMQScsICdNRVRBJywgJ05WREEnLCAnSlBNJywgJ0pOSicsICdWJywgJ1BHJ107XHJcbiAgICBjb25zdCBjb21wYW55TmFtZXMgPSBbJ0FwcGxlIEluYy4nLCAnTWljcm9zb2Z0IENvcnAuJywgJ0FscGhhYmV0IEluYy4nLCAnVGVzbGEgSW5jLicsICdNZXRhIFBsYXRmb3JtcyBJbmMuJywgJ05WSURJQSBDb3JwLicsICdKUE1vcmdhbiBDaGFzZSAmIENvLicsICdKb2huc29uICYgSm9obnNvbicsICdWaXNhIEluYy4nLCAnUHJvY3RlciAmIEdhbWJsZSBDby4nXTtcclxuICAgIFxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW1pdDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGNvbXBhbnlJbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNvbXBhbmllcy5sZW5ndGgpO1xyXG4gICAgICBjb25zdCB0cmFkZVR5cGUgPSBNYXRoLnJhbmRvbSgpID4gMC41ID8gJ2J1eScgOiAnc2VsbCc7XHJcbiAgICAgIGNvbnN0IGFtb3VudFJhbmdlcyA9IFsnMSwwMDEtMTUsMDAwJywgJzE1LDAwMS01MCwwMDAnLCAnNTAsMDAxLTEwMCwwMDAnLCAnMTAwLDAwMS0yNTAsMDAwJywgJzI1MCwwMDEtNTAwLDAwMCcsICc1MDAsMDAxLTEsMDAwLDAwMCcsICcxLDAwMCwwMDErJ107XHJcbiAgICAgIGNvbnN0IGFtb3VudFJhbmdlID0gYW1vdW50UmFuZ2VzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFtb3VudFJhbmdlcy5sZW5ndGgpXTtcclxuICAgICAgXHJcbiAgICAgIG1vY2tUcmFkZXMucHVzaCh7XHJcbiAgICAgICAgaWQ6IGB0cmFkZS0ke2NvbmdyZXNzUGVyc29uSWR9LSR7aX1gLFxyXG4gICAgICAgIGNvbmdyZXNzUGVyc29uSWQsXHJcbiAgICAgICAgY29uZ3Jlc3NQZXJzb25OYW1lOiAnTW9jayBDb25ncmVzc3BlcnNvbicsXHJcbiAgICAgICAgdGlja2VyOiBjb21wYW5pZXNbY29tcGFueUluZGV4XSxcclxuICAgICAgICBjb21wYW55TmFtZTogY29tcGFueU5hbWVzW2NvbXBhbnlJbmRleF0sXHJcbiAgICAgICAgdHJhZGVUeXBlOiB0cmFkZVR5cGUgYXMgJ2J1eScgfCAnc2VsbCcsXHJcbiAgICAgICAgYW1vdW50OiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwKSArIDEwMDAsXHJcbiAgICAgICAgYW1vdW50UmFuZ2U6IGFtb3VudFJhbmdlIGFzIGFueSxcclxuICAgICAgICB0cmFkZURhdGU6IG5ldyBEYXRlKERhdGUubm93KCkgLSBNYXRoLnJhbmRvbSgpICogMzAgKiAyNCAqIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF0sXHJcbiAgICAgICAgZGlzY2xvc3VyZURhdGU6IG5ldyBEYXRlKERhdGUubm93KCkgLSBNYXRoLnJhbmRvbSgpICogNyAqIDI0ICogNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXSxcclxuICAgICAgICBvd25lcjogTWF0aC5yYW5kb20oKSA+IDAuNyA/ICdzcG91c2UnIDogJ3NlbGYnLFxyXG4gICAgICAgIHNlY3RvcjogJ1RlY2hub2xvZ3knLFxyXG4gICAgICAgIGluZHVzdHJ5OiAnU29mdHdhcmUnXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBtb2NrVHJhZGVzLnNvcnQoKGEsIGIpID0+IG5ldyBEYXRlKGIudHJhZGVEYXRlKS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShhLnRyYWRlRGF0ZSkuZ2V0VGltZSgpKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2VuZXJhdGVNb2NrUmVjZW50VHJhZGVzKGxpbWl0OiBudW1iZXIpOiBDb25ncmVzc2lvbmFsVHJhZGVbXSB7XHJcbiAgICBjb25zdCBtb2NrVHJhZGVzOiBDb25ncmVzc2lvbmFsVHJhZGVbXSA9IFtdO1xyXG4gICAgY29uc3QgY29uZ3Jlc3NQZW9wbGUgPSB0aGlzLmdlbmVyYXRlTW9ja0NvbmdyZXNzUGVvcGxlKCk7XHJcbiAgICBcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGltaXQ7IGkrKykge1xyXG4gICAgICBjb25zdCBjb25ncmVzc1BlcnNvbiA9IGNvbmdyZXNzUGVvcGxlW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNvbmdyZXNzUGVvcGxlLmxlbmd0aCldO1xyXG4gICAgICBjb25zdCB0cmFkZXMgPSB0aGlzLmdlbmVyYXRlTW9ja1RyYWRlcyhjb25ncmVzc1BlcnNvbi5pZCwgMSk7XHJcbiAgICAgIG1vY2tUcmFkZXMucHVzaCh7XHJcbiAgICAgICAgLi4udHJhZGVzWzBdLFxyXG4gICAgICAgIGNvbmdyZXNzUGVyc29uTmFtZTogY29uZ3Jlc3NQZXJzb24ubmFtZVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbW9ja1RyYWRlcy5zb3J0KChhLCBiKSA9PiBuZXcgRGF0ZShiLnRyYWRlRGF0ZSkuZ2V0VGltZSgpIC0gbmV3IERhdGUoYS50cmFkZURhdGUpLmdldFRpbWUoKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdlbmVyYXRlTW9ja1RyYWRpbmdBbmFseXRpY3MoKTogVHJhZGluZ0FuYWx5dGljcyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0b3RhbFRyYWRlczogMTI1MCxcclxuICAgICAgdG90YWxWb2x1bWU6IDQ1MDAwMDAwLFxyXG4gICAgICBtb3N0VHJhZGVkU3RvY2tzOiBbXHJcbiAgICAgICAgeyB0aWNrZXI6ICdBQVBMJywgY291bnQ6IDQ1LCB2b2x1bWU6IDI1MDAwMDAgfSxcclxuICAgICAgICB7IHRpY2tlcjogJ01TRlQnLCBjb3VudDogMzgsIHZvbHVtZTogMjEwMDAwMCB9LFxyXG4gICAgICAgIHsgdGlja2VyOiAnR09PR0wnLCBjb3VudDogMzIsIHZvbHVtZTogMTgwMDAwMCB9LFxyXG4gICAgICAgIHsgdGlja2VyOiAnVFNMQScsIGNvdW50OiAyOCwgdm9sdW1lOiAxNTAwMDAwIH0sXHJcbiAgICAgICAgeyB0aWNrZXI6ICdNRVRBJywgY291bnQ6IDI1LCB2b2x1bWU6IDEyMDAwMDAgfVxyXG4gICAgICBdLFxyXG4gICAgICBzZWN0b3JCcmVha2Rvd246IFtcclxuICAgICAgICB7IHNlY3RvcjogJ1RlY2hub2xvZ3knLCBjb3VudDogNDUsIHZvbHVtZTogMjUwMDAwMCB9LFxyXG4gICAgICAgIHsgc2VjdG9yOiAnSGVhbHRoY2FyZScsIGNvdW50OiAzOCwgdm9sdW1lOiAyMTAwMDAwIH0sXHJcbiAgICAgICAgeyBzZWN0b3I6ICdGaW5hbmNpYWwnLCBjb3VudDogMzIsIHZvbHVtZTogMTgwMDAwMCB9LFxyXG4gICAgICAgIHsgc2VjdG9yOiAnRW5lcmd5JywgY291bnQ6IDI4LCB2b2x1bWU6IDE1MDAwMDAgfSxcclxuICAgICAgICB7IHNlY3RvcjogJ0NvbnN1bWVyJywgY291bnQ6IDI1LCB2b2x1bWU6IDEyMDAwMDAgfVxyXG4gICAgICBdLFxyXG4gICAgICBwYXJ0eUJyZWFrZG93bjogW1xyXG4gICAgICAgIHsgcGFydHk6ICdEJywgY291bnQ6IDY1MCwgdm9sdW1lOiAyMzAwMDAwMCB9LFxyXG4gICAgICAgIHsgcGFydHk6ICdSJywgY291bnQ6IDU1MCwgdm9sdW1lOiAyMDAwMDAwMCB9LFxyXG4gICAgICAgIHsgcGFydHk6ICdJJywgY291bnQ6IDUwLCB2b2x1bWU6IDIwMDAwMDAgfVxyXG4gICAgICBdLFxyXG4gICAgICBtb250aGx5VHJlbmRzOiBbXHJcbiAgICAgICAgeyBtb250aDogJ0phbiAyMDI0JywgY291bnQ6IDEyMCwgdm9sdW1lOiA0NTAwMDAwIH0sXHJcbiAgICAgICAgeyBtb250aDogJ0RlYyAyMDIzJywgY291bnQ6IDk1LCB2b2x1bWU6IDM4MDAwMDAgfSxcclxuICAgICAgICB7IG1vbnRoOiAnTm92IDIwMjMnLCBjb3VudDogMTEwLCB2b2x1bWU6IDQyMDAwMDAgfSxcclxuICAgICAgICB7IG1vbnRoOiAnT2N0IDIwMjMnLCBjb3VudDogMTA1LCB2b2x1bWU6IDQwMDAwMDAgfVxyXG4gICAgICBdXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gR2V0IEFQSSBzdGF0dXNcclxuICBnZXRBcGlTdGF0dXMoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBxdWl2ZXI6IHtcclxuICAgICAgICBjb25maWd1cmVkOiB0cnVlLFxyXG4gICAgICAgIGFwaUtleTogQVBJX0NPTkZJRy5RVUlWRVIuQVBJX0tFWSA/ICdTZXQnIDogJ05vdCBTZXQnLFxyXG4gICAgICAgIGJhc2VVcmw6IEFQSV9DT05GSUcuUVVJVkVSLkJBU0VfVVJMLFxyXG4gICAgICAgIHN0YXR1czogdGhpcy51c2VNb2NrRGF0YSA/ICdVc2luZyBNb2NrIERhdGEnIDogJ0FjdGl2ZSAtIFJlYWwgQVBJIGNhbGxzIGVuYWJsZWQnXHJcbiAgICAgIH0sXHJcbiAgICAgIG1vY2tEYXRhOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdGhpcy51c2VNb2NrRGF0YSxcclxuICAgICAgICBhdmFpbGFibGU6IHRydWUsXHJcbiAgICAgICAgbm90ZTogJ0F2YWlsYWJsZSBhcyBmYWxsYmFjayBpZiBBUEkgY2FsbHMgZmFpbCdcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBxdWl2ZXJBcGlTZXJ2aWNlID0gbmV3IFF1aXZlckFwaVNlcnZpY2UoKTtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHF1aXZlckFwaVNlcnZpY2UsIENvbmdyZXNzUGVyc29uLCBDb25ncmVzc2lvbmFsVHJhZGUsIFRyYWRpbmdBbmFseXRpY3MgfSBmcm9tICcuLi9zZXJ2aWNlcy9xdWl2ZXJBcGknO1xyXG5cclxuaW50ZXJmYWNlIENvbmdyZXNzaW9uYWxUcmFkaW5nUHJvcHMge1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZztcclxufVxyXG5cclxuY29uc3QgQ29uZ3Jlc3Npb25hbFRyYWRpbmc6IFJlYWN0LkZDPENvbmdyZXNzaW9uYWxUcmFkaW5nUHJvcHM+ID0gKHsgY2xhc3NOYW1lID0gJycgfSkgPT4ge1xyXG4gIGNvbnN0IFtjb25ncmVzc1Blb3BsZSwgc2V0Q29uZ3Jlc3NQZW9wbGVdID0gdXNlU3RhdGU8Q29uZ3Jlc3NQZXJzb25bXT4oW10pO1xyXG4gIGNvbnN0IFtyZWNlbnRUcmFkZXMsIHNldFJlY2VudFRyYWRlc10gPSB1c2VTdGF0ZTxDb25ncmVzc2lvbmFsVHJhZGVbXT4oW10pO1xyXG4gIGNvbnN0IFthbmFseXRpY3MsIHNldEFuYWx5dGljc10gPSB1c2VTdGF0ZTxUcmFkaW5nQW5hbHl0aWNzIHwgbnVsbD4obnVsbCk7XHJcbiAgY29uc3QgW3NlbGVjdGVkUGVyc29uLCBzZXRTZWxlY3RlZFBlcnNvbl0gPSB1c2VTdGF0ZTxDb25ncmVzc1BlcnNvbiB8IG51bGw+KG51bGwpO1xyXG4gIGNvbnN0IFtwZXJzb25UcmFkZXMsIHNldFBlcnNvblRyYWRlc10gPSB1c2VTdGF0ZTxDb25ncmVzc2lvbmFsVHJhZGVbXT4oW10pO1xyXG4gIGNvbnN0IFtzZWFyY2hRdWVyeSwgc2V0U2VhcmNoUXVlcnldID0gdXNlU3RhdGUoJycpO1xyXG4gIGNvbnN0IFtmaWx0ZXJQYXJ0eSwgc2V0RmlsdGVyUGFydHldID0gdXNlU3RhdGU8J2FsbCcgfCAnRCcgfCAnUicgfCAnSSc+KCdhbGwnKTtcclxuICBjb25zdCBbZmlsdGVyQ2hhbWJlciwgc2V0RmlsdGVyQ2hhbWJlcl0gPSB1c2VTdGF0ZTwnYWxsJyB8ICdIb3VzZScgfCAnU2VuYXRlJz4oJ2FsbCcpO1xyXG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xyXG4gIGNvbnN0IFthY3RpdmVUYWIsIHNldEFjdGl2ZVRhYl0gPSB1c2VTdGF0ZTwnb3ZlcnZpZXcnIHwgJ3RyYWRlcycgfCAnYW5hbHl0aWNzJz4oJ292ZXJ2aWV3Jyk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBsb2FkSW5pdGlhbERhdGEoKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIGNvbnN0IGxvYWRJbml0aWFsRGF0YSA9IGFzeW5jICgpID0+IHtcclxuICAgIHNldExvYWRpbmcodHJ1ZSk7XHJcbiAgICBzZXRFcnJvcihudWxsKTtcclxuICAgIFxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgW3Blb3BsZSwgdHJhZGVzLCB0cmFkaW5nQW5hbHl0aWNzXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcclxuICAgICAgICBxdWl2ZXJBcGlTZXJ2aWNlLmdldENvbmdyZXNzUGVvcGxlKCksXHJcbiAgICAgICAgcXVpdmVyQXBpU2VydmljZS5nZXRSZWNlbnRUcmFkZXMoMjApLFxyXG4gICAgICAgIHF1aXZlckFwaVNlcnZpY2UuZ2V0VHJhZGluZ0FuYWx5dGljcygpXHJcbiAgICAgIF0pO1xyXG4gICAgICBcclxuICAgICAgc2V0Q29uZ3Jlc3NQZW9wbGUocGVvcGxlKTtcclxuICAgICAgc2V0UmVjZW50VHJhZGVzKHRyYWRlcyk7XHJcbiAgICAgIHNldEFuYWx5dGljcyh0cmFkaW5nQW5hbHl0aWNzKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBzZXRFcnJvcignRmFpbGVkIHRvIGxvYWQgY29uZ3Jlc3Npb25hbCB0cmFkaW5nIGRhdGEnKTtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBkYXRhOicsIGVycik7XHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBoYW5kbGVQZXJzb25TZWxlY3QgPSBhc3luYyAocGVyc29uOiBDb25ncmVzc1BlcnNvbikgPT4ge1xyXG4gICAgc2V0U2VsZWN0ZWRQZXJzb24ocGVyc29uKTtcclxuICAgIHNldEFjdGl2ZVRhYigndHJhZGVzJyk7XHJcbiAgICBcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHRyYWRlcyA9IGF3YWl0IHF1aXZlckFwaVNlcnZpY2UuZ2V0Q29uZ3Jlc3NQZXJzb25UcmFkZXMocGVyc29uLmlkLCA1MCk7XHJcbiAgICAgIHNldFBlcnNvblRyYWRlcyh0cmFkZXMpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgcGVyc29uIHRyYWRlczonLCBlcnIpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IGhhbmRsZVNlYXJjaCA9IGFzeW5jICgpID0+IHtcclxuICAgIGlmICghc2VhcmNoUXVlcnkudHJpbSgpKSB7XHJcbiAgICAgIHNldENvbmdyZXNzUGVvcGxlKGF3YWl0IHF1aXZlckFwaVNlcnZpY2UuZ2V0Q29uZ3Jlc3NQZW9wbGUoKSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IHF1aXZlckFwaVNlcnZpY2Uuc2VhcmNoQ29uZ3Jlc3NQZW9wbGUoc2VhcmNoUXVlcnkpO1xyXG4gICAgICBzZXRDb25ncmVzc1Blb3BsZShyZXN1bHRzKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzZWFyY2hpbmc6JywgZXJyKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBnZXRGaWx0ZXJlZENvbmdyZXNzUGVvcGxlID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIGNvbmdyZXNzUGVvcGxlLmZpbHRlcihwZXJzb24gPT4ge1xyXG4gICAgICBjb25zdCBwYXJ0eU1hdGNoID0gZmlsdGVyUGFydHkgPT09ICdhbGwnIHx8IHBlcnNvbi5wYXJ0eSA9PT0gZmlsdGVyUGFydHk7XHJcbiAgICAgIGNvbnN0IGNoYW1iZXJNYXRjaCA9IGZpbHRlckNoYW1iZXIgPT09ICdhbGwnIHx8IHBlcnNvbi5jaGFtYmVyID09PSBmaWx0ZXJDaGFtYmVyO1xyXG4gICAgICByZXR1cm4gcGFydHlNYXRjaCAmJiBjaGFtYmVyTWF0Y2g7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBjb25zdCBnZXRQYXJ0eUNvbG9yID0gKHBhcnR5OiBzdHJpbmcpID0+IHtcclxuICAgIHN3aXRjaCAocGFydHkpIHtcclxuICAgICAgY2FzZSAnRCc6IHJldHVybiAnYmctYmx1ZS01MDAnO1xyXG4gICAgICBjYXNlICdSJzogcmV0dXJuICdiZy1yZWQtNTAwJztcclxuICAgICAgY2FzZSAnSSc6IHJldHVybiAnYmctcHVycGxlLTUwMCc7XHJcbiAgICAgIGRlZmF1bHQ6IHJldHVybiAnYmctZ3JheS01MDAnO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IGdldFRyYWRlVHlwZUNvbG9yID0gKHR5cGU6IHN0cmluZykgPT4ge1xyXG4gICAgcmV0dXJuIHR5cGUgPT09ICdidXknID8gJ3RleHQtZ3JlZW4tNjAwJyA6ICd0ZXh0LXJlZC02MDAnO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGZvcm1hdEFtb3VudCA9IChhbW91bnQ6IG51bWJlcikgPT4ge1xyXG4gICAgaWYgKGFtb3VudCA+PSAxMDAwMDAwKSB7XHJcbiAgICAgIHJldHVybiBgJCR7KGFtb3VudCAvIDEwMDAwMDApLnRvRml4ZWQoMSl9TWA7XHJcbiAgICB9IGVsc2UgaWYgKGFtb3VudCA+PSAxMDAwKSB7XHJcbiAgICAgIHJldHVybiBgJCR7KGFtb3VudCAvIDEwMDApLnRvRml4ZWQoMSl9S2A7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYCQke2Ftb3VudC50b0ZpeGVkKDApfWA7XHJcbiAgfTtcclxuXHJcbiAgaWYgKGxvYWRpbmcpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgcC04ICR7Y2xhc3NOYW1lfWB9PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYW5pbWF0ZS1zcGluIHJvdW5kZWQtZnVsbCBoLTEyIHctMTIgYm9yZGVyLWItMiBib3JkZXItYmx1ZS02MDAgbXgtYXV0byBtYi00XCI+PC9kaXY+XHJcbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LWdyYXktNjAwXCI+TG9hZGluZyBjb25ncmVzc2lvbmFsIHRyYWRpbmcgZGF0YS4uLjwvcD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgaWYgKGVycm9yKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YHAtNiBiZy1yZWQtNTAgYm9yZGVyIGJvcmRlci1yZWQtMjAwIHJvdW5kZWQtbGcgJHtjbGFzc05hbWV9YH0+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlclwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LXNocmluay0wXCI+XHJcbiAgICAgICAgICAgIDxzdmcgY2xhc3NOYW1lPVwiaC01IHctNSB0ZXh0LXJlZC00MDBcIiB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgZmlsbD1cImN1cnJlbnRDb2xvclwiPlxyXG4gICAgICAgICAgICAgIDxwYXRoIGZpbGxSdWxlPVwiZXZlbm9kZFwiIGQ9XCJNMTAgMThhOCA4IDAgMTAwLTE2IDggOCAwIDAwMCAxNnpNOC43MDcgNy4yOTNhMSAxIDAgMDAtMS40MTQgMS40MTRMOC41ODYgMTBsLTEuMjkzIDEuMjkzYTEgMSAwIDEwMS40MTQgMS40MTRMMTAgMTEuNDE0bDEuMjkzIDEuMjkzYTEgMSAwIDAwMS40MTQtMS40MTRMMTEuNDE0IDEwbDEuMjkzLTEuMjkzYTEgMSAwIDAwLTEuNDE0LTEuNDE0TDEwIDguNTg2IDguNzA3IDcuMjkzelwiIGNsaXBSdWxlPVwiZXZlbm9kZFwiIC8+XHJcbiAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1sLTNcIj5cclxuICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQtc20gZm9udC1tZWRpdW0gdGV4dC1yZWQtODAwXCI+RXJyb3IgTG9hZGluZyBEYXRhPC9oMz5cclxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LXJlZC03MDAgbXQtMVwiPntlcnJvcn08L3A+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICBvbkNsaWNrPXtsb2FkSW5pdGlhbERhdGF9XHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJtdC00IGJnLXJlZC0xMDAgdGV4dC1yZWQtODAwIHB4LTQgcHktMiByb3VuZGVkLW1kIHRleHQtc20gZm9udC1tZWRpdW0gaG92ZXI6YmctcmVkLTIwMFwiXHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgUmV0cnlcclxuICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPXtgYmctd2hpdGUgcm91bmRlZC1sZyBzaGFkb3ctbGcgJHtjbGFzc05hbWV9YH0+XHJcbiAgICAgIHsvKiBIZWFkZXIgKi99XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHgtNiBweS00IGJvcmRlci1iIGJvcmRlci1ncmF5LTIwMFwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuXCI+XHJcbiAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwidGV4dC0yeGwgZm9udC1ib2xkIHRleHQtZ3JheS05MDBcIj5Db25ncmVzc2lvbmFsIFRyYWRpbmcgRGFzaGJvYXJkPC9oMj5cclxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1ncmF5LTYwMCBtdC0xXCI+VHJhY2sgaW52ZXN0bWVudHMgbWFkZSBieSBtZW1iZXJzIG9mIENvbmdyZXNzPC9wPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIHNwYWNlLXgtMlwiPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIgcHgtMi41IHB5LTAuNSByb3VuZGVkLWZ1bGwgdGV4dC14cyBmb250LW1lZGl1bSBiZy1ncmVlbi0xMDAgdGV4dC1ncmVlbi04MDBcIj5cclxuICAgICAgICAgICAgICBMaXZlIERhdGFcclxuICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgey8qIFNlYXJjaCBhbmQgRmlsdGVycyAqL31cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJweC02IHB5LTQgYm9yZGVyLWIgYm9yZGVyLWdyYXktMjAwIGJnLWdyYXktNTBcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC13cmFwIGdhcC00IGl0ZW1zLWNlbnRlclwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LTEgbWluLXctNjRcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWxhdGl2ZVwiPlxyXG4gICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJTZWFyY2ggY29uZ3Jlc3NwZW9wbGUgYnkgbmFtZSwgc3RhdGUsIG9yIHBhcnR5Li4uXCJcclxuICAgICAgICAgICAgICAgIHZhbHVlPXtzZWFyY2hRdWVyeX1cclxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0U2VhcmNoUXVlcnkoZS50YXJnZXQudmFsdWUpfVxyXG4gICAgICAgICAgICAgICAgb25LZXlQcmVzcz17KGUpID0+IGUua2V5ID09PSAnRW50ZXInICYmIGhhbmRsZVNlYXJjaCgpfVxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsIHBsLTEwIHByLTQgcHktMiBib3JkZXIgYm9yZGVyLWdyYXktMzAwIHJvdW5kZWQtbWQgZm9jdXM6cmluZy0yIGZvY3VzOnJpbmctYmx1ZS01MDAgZm9jdXM6Ym9yZGVyLWJsdWUtNTAwXCJcclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgaW5zZXQteS0wIGxlZnQtMCBwbC0zIGZsZXggaXRlbXMtY2VudGVyIHBvaW50ZXItZXZlbnRzLW5vbmVcIj5cclxuICAgICAgICAgICAgICAgIDxzdmcgY2xhc3NOYW1lPVwiaC01IHctNSB0ZXh0LWdyYXktNDAwXCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxwYXRoIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIiBzdHJva2VXaWR0aD17Mn0gZD1cIk0yMSAyMWwtNi02bTItNWE3IDcgMCAxMS0xNCAwIDcgNyAwIDAxMTQgMHpcIiAvPlxyXG4gICAgICAgICAgICAgICAgPC9zdmc+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIDxzZWxlY3RcclxuICAgICAgICAgICAgdmFsdWU9e2ZpbHRlclBhcnR5fVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldEZpbHRlclBhcnR5KGUudGFyZ2V0LnZhbHVlIGFzIGFueSl9XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInB4LTMgcHktMiBib3JkZXIgYm9yZGVyLWdyYXktMzAwIHJvdW5kZWQtbWQgZm9jdXM6cmluZy0yIGZvY3VzOnJpbmctYmx1ZS01MDAgZm9jdXM6Ym9yZGVyLWJsdWUtNTAwXCJcclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImFsbFwiPkFsbCBQYXJ0aWVzPC9vcHRpb24+XHJcbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJEXCI+RGVtb2NyYXQ8L29wdGlvbj5cclxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlJcIj5SZXB1YmxpY2FuPC9vcHRpb24+XHJcbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJJXCI+SW5kZXBlbmRlbnQ8L29wdGlvbj5cclxuICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICA8c2VsZWN0XHJcbiAgICAgICAgICAgIHZhbHVlPXtmaWx0ZXJDaGFtYmVyfVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldEZpbHRlckNoYW1iZXIoZS50YXJnZXQudmFsdWUgYXMgYW55KX1cclxuICAgICAgICAgICAgY2xhc3NOYW1lPVwicHgtMyBweS0yIGJvcmRlciBib3JkZXItZ3JheS0zMDAgcm91bmRlZC1tZCBmb2N1czpyaW5nLTIgZm9jdXM6cmluZy1ibHVlLTUwMCBmb2N1czpib3JkZXItYmx1ZS01MDBcIlxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiYWxsXCI+QWxsIENoYW1iZXJzPC9vcHRpb24+XHJcbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJIb3VzZVwiPkhvdXNlPC9vcHRpb24+XHJcbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJTZW5hdGVcIj5TZW5hdGU8L29wdGlvbj5cclxuICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZVNlYXJjaH1cclxuICAgICAgICAgICAgY2xhc3NOYW1lPVwicHgtNCBweS0yIGJnLWJsdWUtNjAwIHRleHQtd2hpdGUgcm91bmRlZC1tZCBob3ZlcjpiZy1ibHVlLTcwMCBmb2N1czpyaW5nLTIgZm9jdXM6cmluZy1ibHVlLTUwMCBmb2N1czpyaW5nLW9mZnNldC0yXCJcclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgU2VhcmNoXHJcbiAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcblxyXG4gICAgICB7LyogVGFicyAqL31cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJib3JkZXItYiBib3JkZXItZ3JheS0yMDBcIj5cclxuICAgICAgICA8bmF2IGNsYXNzTmFtZT1cIi1tYi1weCBmbGV4IHNwYWNlLXgtOCBweC02XCI+XHJcbiAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldEFjdGl2ZVRhYignb3ZlcnZpZXcnKX1cclxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgcHktNCBweC0xIGJvcmRlci1iLTIgZm9udC1tZWRpdW0gdGV4dC1zbSAke1xyXG4gICAgICAgICAgICAgIGFjdGl2ZVRhYiA9PT0gJ292ZXJ2aWV3J1xyXG4gICAgICAgICAgICAgICAgPyAnYm9yZGVyLWJsdWUtNTAwIHRleHQtYmx1ZS02MDAnXHJcbiAgICAgICAgICAgICAgICA6ICdib3JkZXItdHJhbnNwYXJlbnQgdGV4dC1ncmF5LTUwMCBob3Zlcjp0ZXh0LWdyYXktNzAwIGhvdmVyOmJvcmRlci1ncmF5LTMwMCdcclxuICAgICAgICAgICAgfWB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIE92ZXJ2aWV3XHJcbiAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0QWN0aXZlVGFiKCd0cmFkZXMnKX1cclxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgcHktNCBweC0xIGJvcmRlci1iLTIgZm9udC1tZWRpdW0gdGV4dC1zbSAke1xyXG4gICAgICAgICAgICAgIGFjdGl2ZVRhYiA9PT0gJ3RyYWRlcydcclxuICAgICAgICAgICAgICAgID8gJ2JvcmRlci1ibHVlLTUwMCB0ZXh0LWJsdWUtNjAwJ1xyXG4gICAgICAgICAgICAgICAgOiAnYm9yZGVyLXRyYW5zcGFyZW50IHRleHQtZ3JheS01MDAgaG92ZXI6dGV4dC1ncmF5LTcwMCBob3Zlcjpib3JkZXItZ3JheS0zMDAnXHJcbiAgICAgICAgICAgIH1gfVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICBSZWNlbnQgVHJhZGVzXHJcbiAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0QWN0aXZlVGFiKCdhbmFseXRpY3MnKX1cclxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgcHktNCBweC0xIGJvcmRlci1iLTIgZm9udC1tZWRpdW0gdGV4dC1zbSAke1xyXG4gICAgICAgICAgICAgIGFjdGl2ZVRhYiA9PT0gJ2FuYWx5dGljcydcclxuICAgICAgICAgICAgICAgID8gJ2JvcmRlci1ibHVlLTUwMCB0ZXh0LWJsdWUtNjAwJ1xyXG4gICAgICAgICAgICAgICAgOiAnYm9yZGVyLXRyYW5zcGFyZW50IHRleHQtZ3JheS01MDAgaG92ZXI6dGV4dC1ncmF5LTcwMCBob3Zlcjpib3JkZXItZ3JheS0zMDAnXHJcbiAgICAgICAgICAgIH1gfVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICBBbmFseXRpY3NcclxuICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgIDwvbmF2PlxyXG4gICAgICA8L2Rpdj5cclxuXHJcbiAgICAgIHsvKiBDb250ZW50ICovfVxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInAtNlwiPlxyXG4gICAgICAgIHthY3RpdmVUYWIgPT09ICdvdmVydmlldycgJiYgKFxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTZcIj5cclxuICAgICAgICAgICAgey8qIFN0YXRzIENhcmRzICovfVxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTEgbWQ6Z3JpZC1jb2xzLTQgZ2FwLTZcIj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLWJsdWUtNTAgcC02IHJvdW5kZWQtbGdcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LXNocmluay0wXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHN2ZyBjbGFzc05hbWU9XCJoLTggdy04IHRleHQtYmx1ZS02MDBcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIiBzdHJva2VXaWR0aD17Mn0gZD1cIk0xNyAyMGg1di0yYTMgMyAwIDAwLTUuMzU2LTEuODU3TTE3IDIwSDdtMTAgMHYtMmMwLS42NTYtLjEyNi0xLjI4My0uMzU2LTEuODU3TTcgMjBIMnYtMmEzIDMgMCAwMTUuMzU2LTEuODU3TTcgMjB2LTJjMC0uNjU2LjEyNi0xLjI4My4zNTYtMS44NTdtMCAwYTUuMDAyIDUuMDAyIDAgMDE5LjI4OCAwTTE1IDdhMyAzIDAgMTEtNiAwIDMgMyAwIDAxNiAwem02IDNhMiAyIDAgMTEtNCAwIDIgMiAwIDAxNCAwek03IDEwYTIgMiAwIDExLTQgMCAyIDIgMCAwMTQgMHpcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtbC00XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSBmb250LW1lZGl1bSB0ZXh0LWJsdWUtNjAwXCI+VG90YWwgQ29uZ3Jlc3NwZW9wbGU8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC0yeGwgZm9udC1zZW1pYm9sZCB0ZXh0LWJsdWUtOTAwXCI+e2NvbmdyZXNzUGVvcGxlLmxlbmd0aH08L3A+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiZy1ncmVlbi01MCBwLTYgcm91bmRlZC1sZ1wiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtc2hyaW5rLTBcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3ZnIGNsYXNzTmFtZT1cImgtOCB3LTggdGV4dC1ncmVlbi02MDBcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIiBzdHJva2VXaWR0aD17Mn0gZD1cIk05IDE5di02YTIgMiAwIDAwLTItMkg1YTIgMiAwIDAwLTIgMnY2YTIgMiAwIDAwMiAyaDJhMiAyIDAgMDAyLTJ6bTAgMFY5YTIgMiAwIDAxMi0yaDJhMiAyIDAgMDEyIDJ2MTBtLTYgMGEyIDIgMCAwMDIgMmgyYTIgMiAwIDAwMi0ybTAgMFY1YTIgMiAwIDAxMi0yaDJhMiAyIDAgMDEyIDJ2MTRhMiAyIDAgMDEtMiAyaC0yYTIgMiAwIDAxLTItMnpcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtbC00XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSBmb250LW1lZGl1bSB0ZXh0LWdyZWVuLTYwMFwiPlRvdGFsIFRyYWRlczwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LTJ4bCBmb250LXNlbWlib2xkIHRleHQtZ3JlZW4tOTAwXCI+e2FuYWx5dGljcz8udG90YWxUcmFkZXMgfHwgMH08L3A+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiZy1wdXJwbGUtNTAgcC02IHJvdW5kZWQtbGdcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LXNocmluay0wXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHN2ZyBjbGFzc05hbWU9XCJoLTggdy04IHRleHQtcHVycGxlLTYwMFwiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPHBhdGggc3Ryb2tlTGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZVdpZHRoPXsyfSBkPVwiTTEyIDhjLTEuNjU3IDAtMyAuODk1LTMgMnMxLjM0MyAyIDMgMiAzIC44OTUgMyAyLTEuMzQzIDItMyAybTAtOGMxLjExIDAgMi4wOC40MDIgMi41OTkgMU0xMiA4VjdtMCAxdjhtMCAwdjFtMC0xYy0xLjExIDAtMi4wOC0uNDAyLTIuNTk5LTFcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtbC00XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSBmb250LW1lZGl1bSB0ZXh0LXB1cnBsZS02MDBcIj5Ub3RhbCBWb2x1bWU8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC0yeGwgZm9udC1zZW1pYm9sZCB0ZXh0LXB1cnBsZS05MDBcIj57YW5hbHl0aWNzID8gZm9ybWF0QW1vdW50KGFuYWx5dGljcy50b3RhbFZvbHVtZSkgOiAnJDAnfTwvcD5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLW9yYW5nZS01MCBwLTYgcm91bmRlZC1sZ1wiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtc2hyaW5rLTBcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3ZnIGNsYXNzTmFtZT1cImgtOCB3LTggdGV4dC1vcmFuZ2UtNjAwXCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBzdHJva2VMaW5lY2FwPVwicm91bmRcIiBzdHJva2VMaW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlV2lkdGg9ezJ9IGQ9XCJNMTMgN2g4bTAgMHY4bTAtOGwtOCA4LTQtNC02IDZcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtbC00XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSBmb250LW1lZGl1bSB0ZXh0LW9yYW5nZS02MDBcIj5SZWNlbnQgQWN0aXZpdHk8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC0yeGwgZm9udC1zZW1pYm9sZCB0ZXh0LW9yYW5nZS05MDBcIj57cmVjZW50VHJhZGVzLmxlbmd0aH08L3A+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgey8qIENvbmdyZXNzcGVvcGxlIEdyaWQgKi99XHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQtbGcgZm9udC1tZWRpdW0gdGV4dC1ncmF5LTkwMCBtYi00XCI+Q29uZ3Jlc3NwZW9wbGU8L2gzPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMSBtZDpncmlkLWNvbHMtMiBsZzpncmlkLWNvbHMtMyBnYXAtNFwiPlxyXG4gICAgICAgICAgICAgICAge2dldEZpbHRlcmVkQ29uZ3Jlc3NQZW9wbGUoKS5tYXAoKHBlcnNvbikgPT4gKFxyXG4gICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAga2V5PXtwZXJzb24uaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlUGVyc29uU2VsZWN0KHBlcnNvbil9XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYm9yZGVyIGJvcmRlci1ncmF5LTIwMCByb3VuZGVkLWxnIHAtNCBjdXJzb3ItcG9pbnRlciBob3ZlcjpiZy1ncmF5LTUwIGhvdmVyOmJvcmRlci1ibHVlLTMwMCB0cmFuc2l0aW9uLWNvbG9yc1wiXHJcbiAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtc3RhcnQganVzdGlmeS1iZXR3ZWVuXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtMVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3NOYW1lPVwidGV4dC1zbSBmb250LW1lZGl1bSB0ZXh0LWdyYXktOTAwXCI+e3BlcnNvbi5uYW1lfTwvaDQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQteHMgdGV4dC1ncmF5LTUwMFwiPntwZXJzb24uc3RhdGV9IOKAoiB7cGVyc29uLmNoYW1iZXJ9PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIG10LTJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2BpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIgcHgtMiBweS0xIHJvdW5kZWQtZnVsbCB0ZXh0LXhzIGZvbnQtbWVkaXVtIHRleHQtd2hpdGUgJHtnZXRQYXJ0eUNvbG9yKHBlcnNvbi5wYXJ0eSl9YH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cGVyc29uLnBhcnR5ID09PSAnRCcgPyAnRGVtb2NyYXQnIDogcGVyc29uLnBhcnR5ID09PSAnUicgPyAnUmVwdWJsaWNhbicgOiAnSW5kZXBlbmRlbnQnfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtwZXJzb24uY29tbWl0dGVlLmxlbmd0aCA+IDAgJiYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQteHMgdGV4dC1ncmF5LTUwMCBtdC0yXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb21taXR0ZWVzOiB7cGVyc29uLmNvbW1pdHRlZS5zbGljZSgwLCAyKS5qb2luKCcsICcpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3BlcnNvbi5jb21taXR0ZWUubGVuZ3RoID4gMiAmJiAnLi4uJ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXhzIHRleHQtZ3JheS01MDBcIj5UcmFkZXM8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtc20gZm9udC1tZWRpdW0gdGV4dC1ncmF5LTkwMFwiPntwZXJzb24udG90YWxUcmFkZXMgfHwgMH08L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtwZXJzb24ubGFzdFRyYWRlRGF0ZSAmJiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC14cyB0ZXh0LWdyYXktNDAwIG10LTFcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExhc3Q6IHtuZXcgRGF0ZShwZXJzb24ubGFzdFRyYWRlRGF0ZSkudG9Mb2NhbGVEYXRlU3RyaW5nKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKX1cclxuXHJcbiAgICAgICAge2FjdGl2ZVRhYiA9PT0gJ3RyYWRlcycgJiYgKFxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTZcIj5cclxuICAgICAgICAgICAge3NlbGVjdGVkUGVyc29uICYmIChcclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLWJsdWUtNTAgcC00IHJvdW5kZWQtbGdcIj5cclxuICAgICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJ0ZXh0LWxnIGZvbnQtbWVkaXVtIHRleHQtYmx1ZS05MDAgbWItMlwiPlxyXG4gICAgICAgICAgICAgICAgICBUcmFkZXMgYnkge3NlbGVjdGVkUGVyc29uLm5hbWV9XHJcbiAgICAgICAgICAgICAgICA8L2gzPlxyXG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LWJsdWUtNzAwXCI+XHJcbiAgICAgICAgICAgICAgICAgIHtzZWxlY3RlZFBlcnNvbi5zdGF0ZX0g4oCiIHtzZWxlY3RlZFBlcnNvbi5jaGFtYmVyfSDigKIge3NlbGVjdGVkUGVyc29uLnBhcnR5ID09PSAnRCcgPyAnRGVtb2NyYXQnIDogc2VsZWN0ZWRQZXJzb24ucGFydHkgPT09ICdSJyA/ICdSZXB1YmxpY2FuJyA6ICdJbmRlcGVuZGVudCd9XHJcbiAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm92ZXJmbG93LXgtYXV0b1wiPlxyXG4gICAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJtaW4tdy1mdWxsIGRpdmlkZS15IGRpdmlkZS1ncmF5LTIwMFwiPlxyXG4gICAgICAgICAgICAgICAgPHRoZWFkIGNsYXNzTmFtZT1cImJnLWdyYXktNTBcIj5cclxuICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9XCJweC02IHB5LTMgdGV4dC1sZWZ0IHRleHQteHMgZm9udC1tZWRpdW0gdGV4dC1ncmF5LTUwMCB1cHBlcmNhc2UgdHJhY2tpbmctd2lkZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIENvbmdyZXNzcGVyc29uXHJcbiAgICAgICAgICAgICAgICAgICAgPC90aD5cclxuICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3NOYW1lPVwicHgtNiBweS0zIHRleHQtbGVmdCB0ZXh0LXhzIGZvbnQtbWVkaXVtIHRleHQtZ3JheS01MDAgdXBwZXJjYXNlIHRyYWNraW5nLXdpZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICBDb21wYW55XHJcbiAgICAgICAgICAgICAgICAgICAgPC90aD5cclxuICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3NOYW1lPVwicHgtNiBweS0zIHRleHQtbGVmdCB0ZXh0LXhzIGZvbnQtbWVkaXVtIHRleHQtZ3JheS01MDAgdXBwZXJjYXNlIHRyYWNraW5nLXdpZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICBUcmFkZVxyXG4gICAgICAgICAgICAgICAgICAgIDwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT1cInB4LTYgcHktMyB0ZXh0LWxlZnQgdGV4dC14cyBmb250LW1lZGl1bSB0ZXh0LWdyYXktNTAwIHVwcGVyY2FzZSB0cmFja2luZy13aWRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgQW1vdW50XHJcbiAgICAgICAgICAgICAgICAgICAgPC90aD5cclxuICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3NOYW1lPVwicHgtNiBweS0zIHRleHQtbGVmdCB0ZXh0LXhzIGZvbnQtbWVkaXVtIHRleHQtZ3JheS01MDAgdXBwZXJjYXNlIHRyYWNraW5nLXdpZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICBEYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgPC90aD5cclxuICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3NOYW1lPVwicHgtNiBweS0zIHRleHQtbGVmdCB0ZXh0LXhzIGZvbnQtbWVkaXVtIHRleHQtZ3JheS01MDAgdXBwZXJjYXNlIHRyYWNraW5nLXdpZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICBPd25lclxyXG4gICAgICAgICAgICAgICAgICAgIDwvdGg+XHJcbiAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICA8L3RoZWFkPlxyXG4gICAgICAgICAgICAgICAgPHRib2R5IGNsYXNzTmFtZT1cImJnLXdoaXRlIGRpdmlkZS15IGRpdmlkZS1ncmF5LTIwMFwiPlxyXG4gICAgICAgICAgICAgICAgICB7KHNlbGVjdGVkUGVyc29uID8gcGVyc29uVHJhZGVzIDogcmVjZW50VHJhZGVzKS5tYXAoKHRyYWRlKSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGtleT17dHJhZGUuaWR9IGNsYXNzTmFtZT1cImhvdmVyOmJnLWdyYXktNTBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJweC02IHB5LTQgd2hpdGVzcGFjZS1ub3dyYXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleC1zaHJpbmstMCBoLTggdy04XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImgtOCB3LTggcm91bmRlZC1mdWxsIGJnLWdyYXktMzAwIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtc20gZm9udC1tZWRpdW0gdGV4dC1ncmF5LTcwMFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFkZS5jb25ncmVzc1BlcnNvbk5hbWUuY2hhckF0KDApfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1sLTRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1zbSBmb250LW1lZGl1bSB0ZXh0LWdyYXktOTAwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFkZS5jb25ncmVzc1BlcnNvbk5hbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInB4LTYgcHktNCB3aGl0ZXNwYWNlLW5vd3JhcFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtc20gdGV4dC1ncmF5LTkwMFwiPnt0cmFkZS50aWNrZXJ9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LWdyYXktNTAwXCI+e3RyYWRlLmNvbXBhbnlOYW1lfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJweC02IHB5LTQgd2hpdGVzcGFjZS1ub3dyYXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtgaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIHB4LTIuNSBweS0wLjUgcm91bmRlZC1mdWxsIHRleHQteHMgZm9udC1tZWRpdW0gJHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFkZS50cmFkZVR5cGUgPT09ICdidXknIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnYmctZ3JlZW4tMTAwIHRleHQtZ3JlZW4tODAwJyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ2JnLXJlZC0xMDAgdGV4dC1yZWQtODAwJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9YH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAge3RyYWRlLnRyYWRlVHlwZS50b1VwcGVyQ2FzZSgpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInB4LTYgcHktNCB3aGl0ZXNwYWNlLW5vd3JhcCB0ZXh0LXNtIHRleHQtZ3JheS05MDBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAge2Zvcm1hdEFtb3VudCh0cmFkZS5hbW91bnQpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJweC02IHB5LTQgd2hpdGVzcGFjZS1ub3dyYXAgdGV4dC1zbSB0ZXh0LWdyYXktNTAwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtuZXcgRGF0ZSh0cmFkZS50cmFkZURhdGUpLnRvTG9jYWxlRGF0ZVN0cmluZygpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJweC02IHB5LTQgd2hpdGVzcGFjZS1ub3dyYXAgdGV4dC1zbSB0ZXh0LWdyYXktNTAwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFkZS5vd25lcn1cclxuICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgICAgICAgIDwvdGFibGU+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKX1cclxuXHJcbiAgICAgICAge2FjdGl2ZVRhYiA9PT0gJ2FuYWx5dGljcycgJiYgYW5hbHl0aWNzICYmIChcclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS02XCI+XHJcbiAgICAgICAgICAgIHsvKiBNb3N0IFRyYWRlZCBTdG9ja3MgKi99XHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQtbGcgZm9udC1tZWRpdW0gdGV4dC1ncmF5LTkwMCBtYi00XCI+TW9zdCBUcmFkZWQgU3RvY2tzPC9oMz5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLWdyYXktNTAgcm91bmRlZC1sZyBwLTRcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS0zXCI+XHJcbiAgICAgICAgICAgICAgICAgIHthbmFseXRpY3MubW9zdFRyYWRlZFN0b2Nrcy5tYXAoKHN0b2NrLCBpbmRleCkgPT4gKFxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYga2V5PXtzdG9jay50aWNrZXJ9IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXNtIGZvbnQtbWVkaXVtIHRleHQtZ3JheS01MDAgdy02XCI+e2luZGV4ICsgMX0uPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXNtIGZvbnQtbWVkaXVtIHRleHQtZ3JheS05MDBcIj57c3RvY2sudGlja2VyfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LWdyYXktNTAwIG1sLTJcIj4oe3N0b2NrLmNvdW50fSB0cmFkZXMpPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXNtIGZvbnQtbWVkaXVtIHRleHQtZ3JheS05MDBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAge2Zvcm1hdEFtb3VudChzdG9jay52b2x1bWUpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICApKX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIHsvKiBQYXJ0eSBCcmVha2Rvd24gKi99XHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQtbGcgZm9udC1tZWRpdW0gdGV4dC1ncmF5LTkwMCBtYi00XCI+VHJhZGluZyBieSBQYXJ0eTwvaDM+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy0xIG1kOmdyaWQtY29scy0zIGdhcC00XCI+XHJcbiAgICAgICAgICAgICAgICB7YW5hbHl0aWNzLnBhcnR5QnJlYWtkb3duLm1hcCgocGFydHkpID0+IChcclxuICAgICAgICAgICAgICAgICAgPGRpdiBrZXk9e3BhcnR5LnBhcnR5fSBjbGFzc05hbWU9XCJiZy1ncmF5LTUwIHJvdW5kZWQtbGcgcC00XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWJldHdlZW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtc20gZm9udC1tZWRpdW0gdGV4dC1ncmF5LTkwMFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7cGFydHkucGFydHkgPT09ICdEJyA/ICdEZW1vY3JhdHMnIDogcGFydHkucGFydHkgPT09ICdSJyA/ICdSZXB1YmxpY2FucycgOiAnSW5kZXBlbmRlbnRzJ31cclxuICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17YGlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBweC0yLjUgcHktMC41IHJvdW5kZWQtZnVsbCB0ZXh0LXhzIGZvbnQtbWVkaXVtICR7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnR5LnBhcnR5ID09PSAnRCcgPyAnYmctYmx1ZS0xMDAgdGV4dC1ibHVlLTgwMCcgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0eS5wYXJ0eSA9PT0gJ1InID8gJ2JnLXJlZC0xMDAgdGV4dC1yZWQtODAwJyA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdiZy1wdXJwbGUtMTAwIHRleHQtcHVycGxlLTgwMCdcclxuICAgICAgICAgICAgICAgICAgICAgIH1gfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3BhcnR5LmNvdW50fSB0cmFkZXNcclxuICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTIgdGV4dC0yeGwgZm9udC1ib2xkIHRleHQtZ3JheS05MDBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIHtmb3JtYXRBbW91bnQocGFydHkudm9sdW1lKX1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICApKX1cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICB7LyogTW9udGhseSBUcmVuZHMgKi99XHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQtbGcgZm9udC1tZWRpdW0gdGV4dC1ncmF5LTkwMCBtYi00XCI+TW9udGhseSBUcmFkaW5nIFRyZW5kczwvaDM+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiZy1ncmF5LTUwIHJvdW5kZWQtbGcgcC00XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktM1wiPlxyXG4gICAgICAgICAgICAgICAgICB7YW5hbHl0aWNzLm1vbnRobHlUcmVuZHMubWFwKCh0cmVuZCkgPT4gKFxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYga2V5PXt0cmVuZC5tb250aH0gY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXNtIGZvbnQtbWVkaXVtIHRleHQtZ3JheS05MDBcIj57dHJlbmQubW9udGh9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBzcGFjZS14LTRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LWdyYXktNTAwXCI+e3RyZW5kLmNvdW50fSB0cmFkZXM8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtc20gZm9udC1tZWRpdW0gdGV4dC1ncmF5LTkwMFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtmb3JtYXRBbW91bnQodHJlbmQudm9sdW1lKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKX1cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29uZ3Jlc3Npb25hbFRyYWRpbmc7XHJcbiJdLCJuYW1lcyI6WyJfcmVnZW5lcmF0b3JSdW50aW1lIiwiZSIsInQiLCJyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwibiIsImhhc093blByb3BlcnR5IiwibyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJpIiwiU3ltYm9sIiwiYSIsIml0ZXJhdG9yIiwiYyIsImFzeW5jSXRlcmF0b3IiLCJ1IiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ3cmFwIiwiR2VuZXJhdG9yIiwiY3JlYXRlIiwiQ29udGV4dCIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsInR5cGUiLCJhcmciLCJjYWxsIiwiaCIsImwiLCJmIiwicyIsInkiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwicCIsImQiLCJnZXRQcm90b3R5cGVPZiIsInYiLCJ2YWx1ZXMiLCJnIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiaW52b2tlIiwiX3R5cGVvZiIsInJlc29sdmUiLCJfX2F3YWl0IiwidGhlbiIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiRXJyb3IiLCJkb25lIiwibWV0aG9kIiwiZGVsZWdhdGUiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJUeXBlRXJyb3IiLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsImlzTmFOIiwibGVuZ3RoIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJrZXlzIiwicmV2ZXJzZSIsInBvcCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJydmFsIiwiaGFuZGxlIiwiY29tcGxldGUiLCJmaW5pc2giLCJfY2F0Y2giLCJkZWxlZ2F0ZVlpZWxkIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJhcmd1bWVudHMiLCJhcHBseSIsIl9uZXh0IiwiX3Rocm93IiwiX2NsYXNzQ2FsbENoZWNrIiwiX2RlZmluZVByb3BlcnRpZXMiLCJfdG9Qcm9wZXJ0eUtleSIsImtleSIsIl9jcmVhdGVDbGFzcyIsIl9kZWZpbmVQcm9wZXJ0eSIsIl90b1ByaW1pdGl2ZSIsInRvUHJpbWl0aXZlIiwiU3RyaW5nIiwiTnVtYmVyIiwiYXhpb3MiLCJBUElfQ09ORklHIiwiUVVJVkVSIiwiQkFTRV9VUkwiLCJBUElfS0VZIiwiRlJFRV9USUVSX0xJTUlUIiwiUXVpdmVyQXBpU2VydmljZSIsInF1aXZlciIsImJhc2VVUkwiLCJ0aW1lb3V0IiwiaGVhZGVycyIsImNvbmNhdCIsImNvbnNvbGUiLCJsb2ciLCJzZXRVc2VNb2NrRGF0YSIsInVzZU1vY2siLCJ1c2VNb2NrRGF0YSIsIl9nZXRDb25ncmVzc1Blb3BsZSIsIl9jYWxsZWUiLCJyZXNwb25zZSIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJnZW5lcmF0ZU1vY2tDb25ncmVzc1Blb3BsZSIsImdldCIsImRhdGEiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJwZXJzb24iLCJpZCIsImNvbmdyZXNzcGVyc29uX2lkIiwiY29uZ3Jlc3NwZXJzb25fbmFtZSIsInBhcnR5Iiwic3RhdGUiLCJjaGFtYmVyIiwiY29tbWl0dGVlIiwiaW1hZ2VVcmwiLCJpbWFnZV91cmwiLCJsYXN0VHJhZGVEYXRlIiwibGFzdF90cmFkZV9kYXRlIiwidG90YWxUcmFkZXMiLCJ0b3RhbF90cmFkZXMiLCJ0MCIsImVycm9yIiwiZ2V0Q29uZ3Jlc3NQZW9wbGUiLCJfZ2V0Q29uZ3Jlc3NQZXJzb25UcmFkZXMiLCJfY2FsbGVlMiIsImNvbmdyZXNzUGVyc29uSWQiLCJsaW1pdCIsIl9hcmdzMiIsIl9jYWxsZWUyJCIsIl9jb250ZXh0MiIsInVuZGVmaW5lZCIsImdlbmVyYXRlTW9ja1RyYWRlcyIsInBhcmFtcyIsInRyYWRlIiwiX3RyYWRlJHRyYWRlX3R5cGUiLCJ0cmFkZV9pZCIsImNvbmdyZXNzUGVyc29uTmFtZSIsInRpY2tlciIsImNvbXBhbnlOYW1lIiwiY29tcGFueV9uYW1lIiwidHJhZGVUeXBlIiwidHJhZGVfdHlwZSIsInRvTG93ZXJDYXNlIiwiYW1vdW50IiwiYW1vdW50UmFuZ2UiLCJhbW91bnRfcmFuZ2UiLCJ0cmFkZURhdGUiLCJ0cmFkZV9kYXRlIiwiZGlzY2xvc3VyZURhdGUiLCJkaXNjbG9zdXJlX2RhdGUiLCJvd25lciIsInNlY3RvciIsImluZHVzdHJ5IiwiZ2V0Q29uZ3Jlc3NQZXJzb25UcmFkZXMiLCJfeCIsIl9nZXRSZWNlbnRUcmFkZXMiLCJfY2FsbGVlMyIsIl9hcmdzMyIsIl9jYWxsZWUzJCIsIl9jb250ZXh0MyIsImdlbmVyYXRlTW9ja1JlY2VudFRyYWRlcyIsIl90cmFkZSR0cmFkZV90eXBlMiIsImdldFJlY2VudFRyYWRlcyIsIl9nZXRUcmFkaW5nQW5hbHl0aWNzIiwiX2NhbGxlZTQiLCJfY2FsbGVlNCQiLCJfY29udGV4dDQiLCJnZW5lcmF0ZU1vY2tUcmFkaW5nQW5hbHl0aWNzIiwidG90YWxWb2x1bWUiLCJ0b3RhbF92b2x1bWUiLCJtb3N0VHJhZGVkU3RvY2tzIiwibW9zdF90cmFkZWRfc3RvY2tzIiwic2VjdG9yQnJlYWtkb3duIiwic2VjdG9yX2JyZWFrZG93biIsInBhcnR5QnJlYWtkb3duIiwicGFydHlfYnJlYWtkb3duIiwibW9udGhseVRyZW5kcyIsIm1vbnRobHlfdHJlbmRzIiwiZ2V0VHJhZGluZ0FuYWx5dGljcyIsIl9zZWFyY2hDb25ncmVzc1Blb3BsZSIsIl9jYWxsZWU1IiwicXVlcnkiLCJhbGxQZW9wbGUiLCJfY2FsbGVlNSQiLCJfY29udGV4dDUiLCJmaWx0ZXIiLCJpbmNsdWRlcyIsInNlYXJjaENvbmdyZXNzUGVvcGxlIiwiX3gyIiwiX2dldENvbmdyZXNzUGVvcGxlQnlTdGF0ZSIsIl9jYWxsZWU2IiwiX2NhbGxlZTYkIiwiX2NvbnRleHQ2IiwiZ2V0Q29uZ3Jlc3NQZW9wbGVCeVN0YXRlIiwiX3gzIiwiX2dldENvbmdyZXNzUGVvcGxlQnlQYXJ0eSIsIl9jYWxsZWU3IiwiX2NhbGxlZTckIiwiX2NvbnRleHQ3IiwiZ2V0Q29uZ3Jlc3NQZW9wbGVCeVBhcnR5IiwiX3g0IiwiX2dldENvbmdyZXNzUGVvcGxlQnlDaGFtYmVyIiwiX2NhbGxlZTgiLCJfY2FsbGVlOCQiLCJfY29udGV4dDgiLCJnZXRDb25ncmVzc1Blb3BsZUJ5Q2hhbWJlciIsIl94NSIsIm1vY2tQZW9wbGUiLCJtb2NrVHJhZGVzIiwiY29tcGFuaWVzIiwiY29tcGFueU5hbWVzIiwiY29tcGFueUluZGV4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiYW1vdW50UmFuZ2VzIiwiRGF0ZSIsIm5vdyIsInRvSVNPU3RyaW5nIiwic3BsaXQiLCJzb3J0IiwiYiIsImdldFRpbWUiLCJjb25ncmVzc1Blb3BsZSIsImNvbmdyZXNzUGVyc29uIiwidHJhZGVzIiwiX29iamVjdFNwcmVhZCIsImNvdW50Iiwidm9sdW1lIiwibW9udGgiLCJnZXRBcGlTdGF0dXMiLCJjb25maWd1cmVkIiwiYXBpS2V5IiwiYmFzZVVybCIsInN0YXR1cyIsIm1vY2tEYXRhIiwiZW5hYmxlZCIsImF2YWlsYWJsZSIsIm5vdGUiLCJxdWl2ZXJBcGlTZXJ2aWNlIiwiX3NsaWNlZFRvQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVSZXN0IiwiX2FycmF5TGlrZVRvQXJyYXkiLCJ0b1N0cmluZyIsImZyb20iLCJ0ZXN0IiwiUmVhY3QiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsImpzeCIsIl9qc3giLCJqc3hzIiwiX2pzeHMiLCJDb25ncmVzc2lvbmFsVHJhZGluZyIsIl9yZWYiLCJfcmVmJGNsYXNzTmFtZSIsImNsYXNzTmFtZSIsIl91c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJzZXRDb25ncmVzc1Blb3BsZSIsIl91c2VTdGF0ZTMiLCJfdXNlU3RhdGU0IiwicmVjZW50VHJhZGVzIiwic2V0UmVjZW50VHJhZGVzIiwiX3VzZVN0YXRlNSIsIl91c2VTdGF0ZTYiLCJhbmFseXRpY3MiLCJzZXRBbmFseXRpY3MiLCJfdXNlU3RhdGU3IiwiX3VzZVN0YXRlOCIsInNlbGVjdGVkUGVyc29uIiwic2V0U2VsZWN0ZWRQZXJzb24iLCJfdXNlU3RhdGU5IiwiX3VzZVN0YXRlMCIsInBlcnNvblRyYWRlcyIsInNldFBlcnNvblRyYWRlcyIsIl91c2VTdGF0ZTEiLCJfdXNlU3RhdGUxMCIsInNlYXJjaFF1ZXJ5Iiwic2V0U2VhcmNoUXVlcnkiLCJfdXNlU3RhdGUxMSIsIl91c2VTdGF0ZTEyIiwiZmlsdGVyUGFydHkiLCJzZXRGaWx0ZXJQYXJ0eSIsIl91c2VTdGF0ZTEzIiwiX3VzZVN0YXRlMTQiLCJmaWx0ZXJDaGFtYmVyIiwic2V0RmlsdGVyQ2hhbWJlciIsIl91c2VTdGF0ZTE1IiwiX3VzZVN0YXRlMTYiLCJsb2FkaW5nIiwic2V0TG9hZGluZyIsIl91c2VTdGF0ZTE3IiwiX3VzZVN0YXRlMTgiLCJzZXRFcnJvciIsIl91c2VTdGF0ZTE5IiwiX3VzZVN0YXRlMjAiLCJhY3RpdmVUYWIiLCJzZXRBY3RpdmVUYWIiLCJsb2FkSW5pdGlhbERhdGEiLCJfcmVmMiIsIl95aWVsZCRQcm9taXNlJGFsbCIsIl95aWVsZCRQcm9taXNlJGFsbDIiLCJwZW9wbGUiLCJ0cmFkaW5nQW5hbHl0aWNzIiwiYWxsIiwiaGFuZGxlUGVyc29uU2VsZWN0IiwiX3JlZjMiLCJoYW5kbGVTZWFyY2giLCJfcmVmNCIsInJlc3VsdHMiLCJ0cmltIiwidDEiLCJ0MiIsImdldEZpbHRlcmVkQ29uZ3Jlc3NQZW9wbGUiLCJwYXJ0eU1hdGNoIiwiY2hhbWJlck1hdGNoIiwiZ2V0UGFydHlDb2xvciIsImdldFRyYWRlVHlwZUNvbG9yIiwiZm9ybWF0QW1vdW50IiwidG9GaXhlZCIsImNoaWxkcmVuIiwidmlld0JveCIsImZpbGwiLCJmaWxsUnVsZSIsImNsaXBSdWxlIiwib25DbGljayIsInBsYWNlaG9sZGVyIiwib25DaGFuZ2UiLCJ0YXJnZXQiLCJvbktleVByZXNzIiwic3Ryb2tlIiwic3Ryb2tlTGluZWNhcCIsInN0cm9rZUxpbmVqb2luIiwic3Ryb2tlV2lkdGgiLCJqb2luIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwidG9VcHBlckNhc2UiLCJzdG9jayIsImluZGV4IiwidHJlbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///43667\n')}}]);