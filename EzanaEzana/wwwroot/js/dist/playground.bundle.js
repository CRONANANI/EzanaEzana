(()=>{"use strict";var __webpack_modules__={32354:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(96540);\n// EXTERNAL MODULE: ./node_modules/react-dom/client.js\nvar client = __webpack_require__(5338);\n// EXTERNAL MODULE: ./node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs\nvar proxy = __webpack_require__(94864);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/bar-chart-3.js\nvar bar_chart_3 = __webpack_require__(94945);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/trending-up.js\nvar trending_up = __webpack_require__(76316);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/eye.js\nvar eye = __webpack_require__(3160);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/zap.js\nvar zap = __webpack_require__(46858);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/settings.js\nvar settings = __webpack_require__(80964);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/pie-chart.js\nvar pie_chart = __webpack_require__(48234);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/credit-card.js\nvar credit_card = __webpack_require__(50211);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/activity.js\nvar activity = __webpack_require__(96844);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/users.js\nvar users = __webpack_require__(93893);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/dollar-sign.js\nvar dollar_sign = __webpack_require__(86589);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/code.js\nvar code = __webpack_require__(93164);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/shield.js\nvar shield = __webpack_require__(22492);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/chevron-right.js\nvar chevron_right = __webpack_require__(87677);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/chevron-down.js\nvar chevron_down = __webpack_require__(75107);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/play.js\nvar play = __webpack_require__(85731);\n// EXTERNAL MODULE: ./wwwroot/js/react/components/Dashboard.tsx\nvar Dashboard = __webpack_require__(82766);\n// EXTERNAL MODULE: ./wwwroot/js/react/store/useStore.ts\nvar useStore = __webpack_require__(26675);\n// EXTERNAL MODULE: ./wwwroot/js/react/services/api.ts\nvar api = __webpack_require__(96098);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/trending-down.js\nvar trending_down = __webpack_require__(71429);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/target.js\nvar target = __webpack_require__(47792);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/search.js\nvar search = __webpack_require__(98445);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/bell.js\nvar bell = __webpack_require__(49436);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/plus.js\nvar plus = __webpack_require__(80697);\n// EXTERNAL MODULE: ./node_modules/react-hot-toast/dist/index.mjs + 1 modules\nvar dist = __webpack_require__(90888);\n// EXTERNAL MODULE: ./wwwroot/js/react/components/InvestmentChart.tsx\nvar InvestmentChart = __webpack_require__(95047);\n// EXTERNAL MODULE: ./wwwroot/js/react/components/PortfolioSummary.tsx\nvar PortfolioSummary = __webpack_require__(50420);\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(74848);\n;// ./wwwroot/js/react/components/ModernDashboard.tsx\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\n\n\n\n\nvar MetricCard = function MetricCard(_ref) {\n  var title = _ref.title,\n    value = _ref.value,\n    change = _ref.change,\n    changePercent = _ref.changePercent,\n    icon = _ref.icon,\n    trend = _ref.trend,\n    color = _ref.color;\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n    className: "shadcn-card p-6 animate-scale-in",\n    style: {\n      borderLeft: "4px solid ".concat(color)\n    },\n    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "d-flex justify-content-between align-items-start mb-3",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "d-flex align-items-center gap-2 text-muted-foreground",\n        children: [icon, /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n          className: "text-sm font-medium",\n          children: title\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "dropdown",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n          className: "btn btn-link btn-sm p-0",\n          type: "button",\n          "data-bs-toggle": "dropdown",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(settings/* default */.A, {\n            size: 16\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("ul", {\n          className: "dropdown-menu",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n            children: /*#__PURE__*/(0,jsx_runtime.jsxs)("a", {\n              className: "dropdown-item",\n              href: "#",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(eye/* default */.A, {\n                size: 16,\n                className: "me-2"\n              }), "View Details"]\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n            children: /*#__PURE__*/(0,jsx_runtime.jsxs)("a", {\n              className: "dropdown-item",\n              href: "#",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(bar_chart_3/* default */.A, {\n                size: 16,\n                className: "me-2"\n              }), "Analytics"]\n            })\n          })]\n        })]\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "mb-2",\n      style: {\n        fontSize: \'2rem\',\n        fontWeight: \'700\'\n      },\n      children: value\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "d-flex align-items-center gap-2",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n        className: "".concat(trend === \'up\' ? \'text-green-600\' : trend === \'down\' ? \'text-red-600\' : \'text-muted-foreground\'),\n        children: [trend === \'up\' && /*#__PURE__*/(0,jsx_runtime.jsx)(trending_up/* default */.A, {\n          size: 16\n        }), trend === \'down\' && /*#__PURE__*/(0,jsx_runtime.jsx)(trending_down/* default */.A, {\n          size: 16\n        }), trend === \'neutral\' && /*#__PURE__*/(0,jsx_runtime.jsx)(activity/* default */.A, {\n          size: 16\n        }), change >= 0 ? \'+\' : \'\', change.toFixed(2), "%"]\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n        className: "text-xs text-muted-foreground",\n        children: "vs last month"\n      })]\n    })]\n  });\n};\nvar ModernDashboard = function ModernDashboard() {\n  var _useStore = (0,useStore/* useStore */.P)(),\n    user = _useStore.user,\n    investments = _useStore.investments,\n    portfolios = _useStore.portfolios,\n    loading = _useStore.loading,\n    error = _useStore.error,\n    setInvestments = _useStore.setInvestments,\n    setPortfolios = _useStore.setPortfolios,\n    setLoading = _useStore.setLoading,\n    setError = _useStore.setError,\n    getTotalPortfolioValue = _useStore.getTotalPortfolioValue,\n    getTotalPortfolioChange = _useStore.getTotalPortfolioChange;\n  var _useState = (0,react.useState)(\'\'),\n    _useState2 = _slicedToArray(_useState, 2),\n    searchQuery = _useState2[0],\n    setSearchQuery = _useState2[1];\n  var _useState3 = (0,react.useState)(\'1M\'),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedTimeframe = _useState4[0],\n    setSelectedTimeframe = _useState4[1];\n  var _useState5 = (0,react.useState)(\'overview\'),\n    _useState6 = _slicedToArray(_useState5, 2),\n    activeTab = _useState6[0],\n    setActiveTab = _useState6[1];\n  (0,react.useEffect)(function () {\n    loadDashboardData();\n  }, []);\n  var loadDashboardData = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var _yield$Promise$all, _yield$Promise$all2, investmentsResponse, portfoliosResponse;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            setLoading(true);\n            setError(null);\n            _context.next = 5;\n            return Promise.all([api/* apiService */.K.getInvestments({\n              pageSize: 50\n            }), api/* apiService */.K.getPortfolios()]);\n          case 5:\n            _yield$Promise$all = _context.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n            investmentsResponse = _yield$Promise$all2[0];\n            portfoliosResponse = _yield$Promise$all2[1];\n            if (investmentsResponse.success) {\n              setInvestments(investmentsResponse.data);\n            }\n            if (portfoliosResponse.success) {\n              setPortfolios(portfoliosResponse.data);\n            }\n            _context.next = 17;\n            break;\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context["catch"](0);\n            setError(\'Failed to load dashboard data\');\n            dist/* toast */.oR.error(\'Failed to load dashboard data\');\n          case 17:\n            _context.prev = 17;\n            setLoading(false);\n            return _context.finish(17);\n          case 20:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee, null, [[0, 13, 17, 20]]);\n    }));\n    return function loadDashboardData() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var totalValue = getTotalPortfolioValue();\n  var totalChange = getTotalPortfolioChange();\n  var totalChangePercent = totalValue > 0 ? totalChange / totalValue * 100 : 0;\n  var filteredInvestments = investments.filter(function (inv) {\n    return inv.name.toLowerCase().includes(searchQuery.toLowerCase()) || inv.symbol.toLowerCase().includes(searchQuery.toLowerCase());\n  });\n  var mockMetrics = [{\n    title: \'Total Portfolio Value\',\n    value: "$".concat(totalValue.toLocaleString()),\n    change: totalChangePercent,\n    changePercent: totalChangePercent,\n    icon: /*#__PURE__*/(0,jsx_runtime.jsx)(dollar_sign/* default */.A, {\n      size: 20\n    }),\n    trend: totalChangePercent >= 0 ? \'up\' : \'down\',\n    color: totalChangePercent >= 0 ? \'var(--chart-1)\' : \'var(--destructive)\'\n  }, {\n    title: \'Active Investments\',\n    value: investments.length.toString(),\n    change: 2.5,\n    changePercent: 2.5,\n    icon: /*#__PURE__*/(0,jsx_runtime.jsx)(pie_chart/* default */.A, {\n      size: 20\n    }),\n    trend: \'up\',\n    color: \'var(--primary)\'\n  }, {\n    title: \'Risk Score\',\n    value: \'7.2/10\',\n    change: -0.8,\n    changePercent: -0.8,\n    icon: /*#__PURE__*/(0,jsx_runtime.jsx)(shield/* default */.A, {\n      size: 20\n    }),\n    trend: \'down\',\n    color: \'var(--warning-500)\'\n  }, {\n    title: \'Performance\',\n    value: \'+12.4%\',\n    change: 12.4,\n    changePercent: 12.4,\n    icon: /*#__PURE__*/(0,jsx_runtime.jsx)(target/* default */.A, {\n      size: 20\n    }),\n    trend: \'up\',\n    color: \'var(--success-500)\'\n  }];\n  if (loading) {\n    return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "d-flex align-items-center justify-content-center",\n      style: {\n        minHeight: \'60vh\'\n      },\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "text-center",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "spinner-border text-primary mb-3",\n          role: "status",\n          style: {\n            width: \'3rem\',\n            height: \'3rem\'\n          },\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n            className: "visually-hidden",\n            children: "Loading..."\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n          className: "text-muted-foreground",\n          children: "Loading your investment dashboard..."\n        })]\n      })\n    });\n  }\n  if (error) {\n    return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "d-flex align-items-center justify-content-center",\n      style: {\n        minHeight: \'60vh\'\n      },\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "text-center",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "mb-4",\n          style: {\n            fontSize: \'4rem\'\n          },\n          children: "\\u26A0\\uFE0F"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("h2", {\n          className: "text-2xl font-semibold mb-3",\n          children: "Something went wrong"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n          className: "text-muted-foreground mb-4",\n          children: error\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("button", {\n          onClick: loadDashboardData,\n          className: "shadcn-btn shadcn-btn-primary",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(zap/* default */.A, {\n            size: 16,\n            className: "me-2"\n          }), "Try Again"]\n        })]\n      })\n    });\n  }\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n    className: "ezana-animate-fade-in",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "row mb-4",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "col-md-8",\n        children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "d-flex align-items-center gap-3",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "position-relative",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)(search/* default */.A, {\n              size: 20,\n              className: "position-absolute",\n              style: {\n                left: \'12px\',\n                top: \'50%\',\n                transform: \'translateY(-50%)\',\n                color: \'var(--muted-foreground)\'\n              }\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n              type: "text",\n              className: "shadcn-input",\n              placeholder: "Search investments...",\n              value: searchQuery,\n              onChange: function onChange(e) {\n                return setSearchQuery(e.target.value);\n              },\n              style: {\n                paddingLeft: \'2.5rem\'\n              }\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "btn-group",\n            role: "group",\n            children: [\'1D\', \'1W\', \'1M\', \'3M\', \'1Y\'].map(function (timeframe) {\n              return /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n                type: "button",\n                className: "shadcn-btn ".concat(selectedTimeframe === timeframe ? \'shadcn-btn-primary\' : \'shadcn-btn-outline\'),\n                onClick: function onClick() {\n                  return setSelectedTimeframe(timeframe);\n                },\n                children: timeframe\n              }, timeframe);\n            })\n          })]\n        })\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "col-md-4 text-md-end",\n        children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "d-flex gap-2 justify-content-md-end",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("button", {\n            className: "shadcn-btn shadcn-btn-secondary",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)(bell/* default */.A, {\n              size: 16,\n              className: "me-2"\n            }), "Notifications"]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("button", {\n            className: "shadcn-btn shadcn-btn-primary",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)(plus/* default */.A, {\n              size: 16,\n              className: "me-2"\n            }), "Add Investment"]\n          })]\n        })\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "row mb-4",\n      children: mockMetrics.map(function (metric, index) {\n        return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "col-lg-3 col-md-6 mb-3",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(MetricCard, _objectSpread({}, metric))\n        }, metric.title);\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "row mb-4",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "col-12",\n        children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "shadcn-card",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "p-4 border-b border-border",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("ul", {\n              className: "nav nav-tabs border-0",\n              role: "tablist",\n              children: [{\n                id: \'overview\',\n                label: \'Portfolio Overview\',\n                icon: /*#__PURE__*/(0,jsx_runtime.jsx)(pie_chart/* default */.A, {\n                  size: 18\n                })\n              }, {\n                id: \'performance\',\n                label: \'Performance\',\n                icon: /*#__PURE__*/(0,jsx_runtime.jsx)(bar_chart_3/* default */.A, {\n                  size: 18\n                })\n              }, {\n                id: \'social\',\n                label: \'Social Insights\',\n                icon: /*#__PURE__*/(0,jsx_runtime.jsx)(users/* default */.A, {\n                  size: 18\n                })\n              }].map(function (tab) {\n                return /*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n                  className: "nav-item",\n                  role: "presentation",\n                  children: /*#__PURE__*/(0,jsx_runtime.jsxs)("button", {\n                    className: "nav-link d-flex align-items-center gap-2 ".concat(activeTab === tab.id ? \'active\' : \'\'),\n                    onClick: function onClick() {\n                      return setActiveTab(tab.id);\n                    },\n                    style: {\n                      border: \'none\',\n                      borderRadius: \'0.5rem\',\n                      marginRight: \'0.5rem\'\n                    },\n                    children: [tab.icon, tab.label]\n                  })\n                }, tab.id);\n              })\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "p-6",\n            children: [activeTab === \'overview\' && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "row",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "col-lg-8 mb-4",\n                children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "p-4",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h5", {\n                    className: "text-lg font-semibold mb-3",\n                    children: "Portfolio Performance"\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)(InvestmentChart/* default */.A, {})]\n                })\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "col-lg-4 mb-4",\n                children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "p-4",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h5", {\n                    className: "text-lg font-semibold mb-3",\n                    children: "Portfolio Summary"\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)(PortfolioSummary/* default */.A, {})]\n                })\n              })]\n            }), activeTab === \'performance\' && /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "row",\n              children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "col-12",\n                children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "p-4",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h5", {\n                    className: "text-lg font-semibold mb-3",\n                    children: "Investment Performance Analysis"\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                    className: "text-muted-foreground",\n                    children: "Detailed performance metrics and analysis for your investment portfolio."\n                  })]\n                })\n              })\n            }), activeTab === \'social\' && /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "row",\n              children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "col-12",\n                children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "p-4",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h5", {\n                    className: "text-lg font-semibold mb-3",\n                    children: "Social Investment Insights"\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                    className: "text-muted-foreground",\n                    children: "See what other investors are doing and get social insights."\n                  })]\n                })\n              })\n            })]\n          })]\n        })\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "row",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "col-12",\n        children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "shadcn-card",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "p-4 border-b border-border d-flex justify-content-between align-items-center",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h5", {\n              className: "text-lg font-semibold mb-0",\n              children: "Recent Investments"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n              className: "shadcn-btn shadcn-btn-secondary text-sm",\n              children: "View All"\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "p-6",\n            children: filteredInvestments.length > 0 ? /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "table-responsive",\n              children: /*#__PURE__*/(0,jsx_runtime.jsxs)("table", {\n                className: "table table-hover",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("thead", {\n                  children: /*#__PURE__*/(0,jsx_runtime.jsxs)("tr", {\n                    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("th", {\n                      children: "Investment"\n                    }), /*#__PURE__*/(0,jsx_runtime.jsx)("th", {\n                      children: "Type"\n                    }), /*#__PURE__*/(0,jsx_runtime.jsx)("th", {\n                      children: "Value"\n                    }), /*#__PURE__*/(0,jsx_runtime.jsx)("th", {\n                      children: "Change"\n                    }), /*#__PURE__*/(0,jsx_runtime.jsx)("th", {\n                      children: "Actions"\n                    })]\n                  })\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("tbody", {\n                  children: filteredInvestments.slice(0, 5).map(function (investment) {\n                    var _investment$currentVa;\n                    return /*#__PURE__*/(0,jsx_runtime.jsxs)("tr", {\n                      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("td", {\n                        children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                          className: "d-flex align-items-center gap-2",\n                          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                            className: "rounded-circle d-flex align-items-center justify-content-center",\n                            style: {\n                              width: \'32px\',\n                              height: \'32px\',\n                              backgroundColor: \'var(--primary)\',\n                              color: \'white\'\n                            },\n                            children: investment.symbol.charAt(0)\n                          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                              className: "fw-semibold",\n                              children: investment.name\n                            }), /*#__PURE__*/(0,jsx_runtime.jsx)("small", {\n                              className: "text-muted",\n                              children: investment.symbol\n                            })]\n                          })]\n                        })\n                      }), /*#__PURE__*/(0,jsx_runtime.jsx)("td", {\n                        children: /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                          className: "px-2 py-1 bg-accent text-accent-foreground rounded text-sm",\n                          children: investment.type || \'Stock\'\n                        })\n                      }), /*#__PURE__*/(0,jsx_runtime.jsxs)("td", {\n                        className: "fw-semibold",\n                        children: ["$", ((_investment$currentVa = investment.currentValue) === null || _investment$currentVa === void 0 ? void 0 : _investment$currentVa.toLocaleString()) || \'0\']\n                      }), /*#__PURE__*/(0,jsx_runtime.jsx)("td", {\n                        children: /*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n                          className: "".concat((investment.currentValue || 0) >= (investment.purchasePrice || 0) ? \'text-green-600\' : \'text-red-600\'),\n                          children: [(investment.currentValue || 0) >= (investment.purchasePrice || 0) ? /*#__PURE__*/(0,jsx_runtime.jsx)(trending_up/* default */.A, {\n                            size: 14\n                          }) : /*#__PURE__*/(0,jsx_runtime.jsx)(trending_down/* default */.A, {\n                            size: 14\n                          }), ((investment.currentValue || 0) - (investment.purchasePrice || 0)).toFixed(2), "%"]\n                        })\n                      }), /*#__PURE__*/(0,jsx_runtime.jsx)("td", {\n                        children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                          className: "btn-group btn-group-sm",\n                          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n                            className: "btn btn-outline-primary btn-sm",\n                            children: /*#__PURE__*/(0,jsx_runtime.jsx)(eye/* default */.A, {\n                              size: 14\n                            })\n                          }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n                            className: "btn btn-outline-secondary btn-sm",\n                            children: /*#__PURE__*/(0,jsx_runtime.jsx)(bar_chart_3/* default */.A, {\n                              size: 14\n                            })\n                          })]\n                        })\n                      })]\n                    }, investment.id);\n                  })\n                })]\n              })\n            }) : /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "text-center py-4",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(pie_chart/* default */.A, {\n                size: 48,\n                className: "mb-3 text-muted-foreground"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                className: "text-muted-foreground",\n                children: "No investments found. Start building your portfolio!"\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("button", {\n                className: "shadcn-btn shadcn-btn-primary",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)(plus/* default */.A, {\n                  size: 16,\n                  className: "me-2"\n                }), "Add Your First Investment"]\n              })]\n            })\n          })]\n        })\n      })\n    })]\n  });\n};\n/* harmony default export */ const components_ModernDashboard = (ModernDashboard);\n;// ./wwwroot/js/react/components/LandingPage.jsx\nfunction LandingPage_typeof(o) { "@babel/helpers - typeof"; return LandingPage_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, LandingPage_typeof(o); }\nfunction LandingPage_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction LandingPage_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? LandingPage_ownKeys(Object(t), !0).forEach(function (r) { LandingPage_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : LandingPage_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction LandingPage_defineProperty(e, r, t) { return (r = LandingPage_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction LandingPage_toPropertyKey(t) { var i = LandingPage_toPrimitive(t, "string"); return "symbol" == LandingPage_typeof(i) ? i : i + ""; }\nfunction LandingPage_toPrimitive(t, r) { if ("object" != LandingPage_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != LandingPage_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction LandingPage_slicedToArray(r, e) { return LandingPage_arrayWithHoles(r) || LandingPage_iterableToArrayLimit(r, e) || LandingPage_unsupportedIterableToArray(r, e) || LandingPage_nonIterableRest(); }\nfunction LandingPage_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction LandingPage_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return LandingPage_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? LandingPage_arrayLikeToArray(r, a) : void 0; } }\nfunction LandingPage_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction LandingPage_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction LandingPage_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\nvar LandingPage = function LandingPage(_ref) {\n  var onLogin = _ref.onLogin,\n    onRegister = _ref.onRegister,\n    onDemo = _ref.onDemo;\n  var _useState = (0,react.useState)(false),\n    _useState2 = LandingPage_slicedToArray(_useState, 2),\n    showLoginModal = _useState2[0],\n    setShowLoginModal = _useState2[1];\n  var _useState3 = (0,react.useState)(false),\n    _useState4 = LandingPage_slicedToArray(_useState3, 2),\n    showRegisterModal = _useState4[0],\n    setShowRegisterModal = _useState4[1];\n  var _useState5 = (0,react.useState)({\n      email: \'\',\n      password: \'\'\n    }),\n    _useState6 = LandingPage_slicedToArray(_useState5, 2),\n    loginForm = _useState6[0],\n    setLoginForm = _useState6[1];\n  var _useState7 = (0,react.useState)({\n      firstName: \'\',\n      lastName: \'\',\n      email: \'\',\n      password: \'\',\n      confirmPassword: \'\'\n    }),\n    _useState8 = LandingPage_slicedToArray(_useState7, 2),\n    registerForm = _useState8[0],\n    setRegisterForm = _useState8[1];\n  var handleLoginSubmit = function handleLoginSubmit(e) {\n    e.preventDefault();\n    if (loginForm.email && loginForm.password) {\n      onLogin({\n        email: loginForm.email,\n        name: loginForm.email.split(\'@\')[0]\n      });\n      setShowLoginModal(false);\n      setLoginForm({\n        email: \'\',\n        password: \'\'\n      });\n    }\n  };\n  var handleRegisterSubmit = function handleRegisterSubmit(e) {\n    e.preventDefault();\n    if (registerForm.password === registerForm.confirmPassword) {\n      onRegister({\n        email: registerForm.email,\n        name: "".concat(registerForm.firstName, " ").concat(registerForm.lastName)\n      });\n      setShowRegisterModal(false);\n      setRegisterForm({\n        firstName: \'\',\n        lastName: \'\',\n        email: \'\',\n        password: \'\',\n        confirmPassword: \'\'\n      });\n    }\n  };\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n    className: "landing-page",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("header", {\n      className: "landing-header",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "header-content",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "logo",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n            className: "logo-text",\n            children: "@ezana"\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("nav", {\n          className: "header-nav",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n            href: "#features",\n            className: "nav-link",\n            children: "Features"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n            className: "btn btn-primary btn-sm",\n            onClick: function onClick() {\n              return setShowRegisterModal(true);\n            },\n            children: "Join the waitlist"\n          })]\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)("section", {\n      className: "hero-section",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "hero-content",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h1", {\n          className: "hero-title",\n          children: "Unleash the power of intuitive finance"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n          className: "hero-subtitle",\n          children: "Say goodbye to the outdated financial tools. Every small business owner, regardless of background, can now manage their business like a pro. Simple. Intuitive. And never boring."\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "hero-buttons",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n            className: "btn btn-primary btn-lg",\n            onClick: function onClick() {\n              return setShowRegisterModal(true);\n            },\n            children: "Join the waitlist"\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("button", {\n            className: "btn btn-text btn-lg",\n            children: ["Learn more ", /*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n              className: "bi bi-arrow-down"\n            })]\n          })]\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "hero-visual",\n        children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "dashboard-preview",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "dashboard-header",\n            children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "dashboard-nav",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "nav-item active",\n                children: "Insights"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "nav-item",\n                children: "Company"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "nav-item",\n                children: "Transactions"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "nav-item",\n                children: "Cards"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "nav-item",\n                children: "Accounting"\n              })]\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "dashboard-content",\n            children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "metrics-grid",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "metric-card",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "metric-value",\n                  children: "$9,540.17"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "metric-label",\n                  children: "Cash Flow"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "metric-period",\n                  children: "28 days"\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "metric-card",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "metric-value",\n                  children: "$12,007.45"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "metric-label",\n                  children: "Revenue"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "metric-period",\n                  children: "28 days"\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "metric-card",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "metric-value",\n                  children: "$8,391.87"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "metric-label",\n                  children: "Expenses"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "metric-period",\n                  children: "28 days"\n                })]\n              })]\n            })\n          })]\n        })\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("section", {\n      className: "features-section",\n      id: "features",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "container",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h2", {\n          className: "section-title",\n          children: "Everything you need. Nothing you don\'t"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n          className: "section-subtitle",\n          children: "Financial management and visibility in one place. Experience a flexible toolkit that makes every task feel like a breeze."\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "features-grid",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "feature-card",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "feature-visual",\n              children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "mockup-dashboard",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "mockup-header",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                    className: "mockup-title",\n                    children: "Today"\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                    className: "mockup-actions",\n                    children: /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                      className: "action-btn",\n                      children: "Configure"\n                    })\n                  })]\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "mockup-chart",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                    className: "chart-line income"\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                    className: "chart-line expenses"\n                  })]\n                })]\n              })\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n              className: "feature-title",\n              children: "Insights at your fingertips"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n              className: "feature-description",\n              children: "All your data and finances in one place to provide quick answers and make decisions instantly."\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "feature-card",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "feature-visual",\n              children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "mockup-mobile",\n                children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "mobile-screen",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                    className: "mobile-header",\n                    children: "Cards"\n                  }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                    className: "mobile-content",\n                    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                      className: "mobile-item",\n                      children: "Overview"\n                    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                      className: "mobile-item",\n                      children: "Other suppliers"\n                    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                      className: "mobile-item",\n                      children: "Settings"\n                    })]\n                  })]\n                })\n              })\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n              className: "feature-title",\n              children: "Manage in real time"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n              className: "feature-description",\n              children: "Have full control of your business finances on the go using our iOS/Android mobile apps. Because, you know, it\'s 2024."\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "feature-card",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "feature-visual",\n              children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "mockup-alerts",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "alert-item",\n                  children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                    className: "alert-content",\n                    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                      className: "alert-title",\n                      children: "Outstanding Invoice"\n                    }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                      className: "alert-actions",\n                      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n                        className: "alert-btn approve",\n                        children: "Approve"\n                      }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n                        className: "alert-btn decline",\n                        children: "Decline"\n                      }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n                        className: "alert-btn edit",\n                        children: "Edit"\n                      })]\n                    })]\n                  })\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "alert-item success",\n                  children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                    className: "alert-content",\n                    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                      className: "alert-title",\n                      children: "Revenue Increase Alert!"\n                    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                      className: "alert-message",\n                      children: "27% increase in the last 7 days"\n                    })]\n                  })\n                })]\n              })\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n              className: "feature-title",\n              children: "Important business alerts"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n              className: "feature-description",\n              children: "Choose the alerts you need and receive them via email, mobile or Slack. Review and take action in one click."\n            })]\n          })]\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("section", {\n      className: "integration-section",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "container",\n        children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "integration-grid",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "integration-card",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "integration-visual",\n              children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "app-grid",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "app-icon amazon",\n                  children: "A"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "app-icon quickbooks",\n                  children: "QB"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "app-icon stripe",\n                  children: "S"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "app-icon bank",\n                  children: "\\uD83C\\uDFE6"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "app-icon sage",\n                  children: "Sage"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "app-icon capital",\n                  children: "C"\n                })]\n              })\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n              className: "integration-title",\n              children: "Connect all your apps"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n              className: "integration-description",\n              children: "Bring your data with our built-in integrations for accounting, revenue tools and banking."\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "integration-card",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "integration-visual",\n              children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "command-palette",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "palette-header",\n                  children: "What would you like to do?"\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "palette-items",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                    className: "palette-item",\n                    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                      children: "View active cards"\n                    }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                      className: "shortcut",\n                      children: "K"\n                    })]\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                    className: "palette-item",\n                    children: /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                      children: "View all summary reports"\n                    })\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                    className: "palette-item",\n                    children: /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                      children: "Manage expenses"\n                    })\n                  }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                    className: "palette-item",\n                    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                      children: "Manage settings"\n                    }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                      className: "shortcut",\n                      children: "\\u2318K"\n                    })]\n                  })]\n                })]\n              })\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n              className: "integration-title",\n              children: "You\'re in control"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n              className: "integration-description",\n              children: "Lightning fast. Shortcuts for everything. Command+K on Mac, Ctrl+K on Windows. Dark mode."\n            })]\n          })]\n        })\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("section", {\n      className: "cta-section",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "container",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h2", {\n          className: "cta-title",\n          children: "See where financial automation can take your business"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n          className: "cta-subtitle",\n          children: "The first financial tool you\'ll love. And the last one you\'ll ever need."\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "cta-buttons",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n            className: "btn btn-primary btn-lg",\n            onClick: function onClick() {\n              return setShowRegisterModal(true);\n            },\n            children: "Join the waitlist"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n            className: "btn btn-outline btn-lg",\n            onClick: onDemo,\n            children: "Try Demo"\n          })]\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("footer", {\n      className: "landing-footer",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "container",\n        children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "footer-content",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "footer-left",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n              className: "copyright",\n              children: "\\xA9 2024 Ezana Investment Analytics Inc."\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "footer-links",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n                href: "#",\n                className: "footer-link",\n                children: "Privacy Policy"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "separator",\n                children: "\\u2022"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n                href: "#",\n                className: "footer-link",\n                children: "Terms of Use"\n              })]\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "footer-right",\n            children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "social-icons",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n                href: "#",\n                className: "social-icon",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n                  className: "bi bi-twitter-x"\n                })\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n                href: "#",\n                className: "social-icon",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n                  className: "bi bi-linkedin"\n                })\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n                href: "#",\n                className: "social-icon",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n                  className: "bi bi-instagram"\n                })\n              })]\n            })\n          })]\n        })\n      })\n    }), showLoginModal && /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "modal-overlay",\n      onClick: function onClick() {\n        return setShowLoginModal(false);\n      },\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "modal-content",\n        onClick: function onClick(e) {\n          return e.stopPropagation();\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "modal-header",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n            children: "Welcome Back"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n            className: "modal-close",\n            onClick: function onClick() {\n              return setShowLoginModal(false);\n            },\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n              className: "bi bi-x"\n            })\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("form", {\n          onSubmit: handleLoginSubmit,\n          className: "modal-form",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "form-group",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n              htmlFor: "login-email",\n              children: "Email"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n              type: "email",\n              id: "login-email",\n              value: loginForm.email,\n              onChange: function onChange(e) {\n                return setLoginForm(LandingPage_objectSpread(LandingPage_objectSpread({}, loginForm), {}, {\n                  email: e.target.value\n                }));\n              },\n              placeholder: "Enter your email",\n              required: true\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "form-group",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n              htmlFor: "login-password",\n              children: "Password"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n              type: "password",\n              id: "login-password",\n              value: loginForm.password,\n              onChange: function onChange(e) {\n                return setLoginForm(LandingPage_objectSpread(LandingPage_objectSpread({}, loginForm), {}, {\n                  password: e.target.value\n                }));\n              },\n              placeholder: "Enter your password",\n              required: true\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n            type: "submit",\n            className: "btn btn-primary btn-full",\n            children: "Sign In"\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "modal-footer",\n          children: /*#__PURE__*/(0,jsx_runtime.jsxs)("p", {\n            children: ["Don\'t have an account? ", /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n              className: "btn btn-text",\n              onClick: function onClick() {\n                setShowLoginModal(false);\n                setShowRegisterModal(true);\n              },\n              children: "Sign up"\n            })]\n          })\n        })]\n      })\n    }), showRegisterModal && /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "modal-overlay",\n      onClick: function onClick() {\n        return setShowRegisterModal(false);\n      },\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "modal-content",\n        onClick: function onClick(e) {\n          return e.stopPropagation();\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "modal-header",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n            children: "Create Your Account"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n            className: "modal-close",\n            onClick: function onClick() {\n              return setShowRegisterModal(false);\n            },\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n              className: "bi bi-x"\n            })\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("form", {\n          onSubmit: handleRegisterSubmit,\n          className: "modal-form",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "form-row",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "form-group",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n                htmlFor: "register-firstName",\n                children: "First Name"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n                type: "text",\n                id: "register-firstName",\n                value: registerForm.firstName,\n                onChange: function onChange(e) {\n                  return setRegisterForm(LandingPage_objectSpread(LandingPage_objectSpread({}, registerForm), {}, {\n                    firstName: e.target.value\n                  }));\n                },\n                placeholder: "First name",\n                required: true\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "form-group",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n                htmlFor: "register-lastName",\n                children: "Last Name"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n                type: "text",\n                id: "register-lastName",\n                value: registerForm.lastName,\n                onChange: function onChange(e) {\n                  return setRegisterForm(LandingPage_objectSpread(LandingPage_objectSpread({}, registerForm), {}, {\n                    lastName: e.target.value\n                  }));\n                },\n                placeholder: "Last name",\n                required: true\n              })]\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "form-group",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n              htmlFor: "register-email",\n              children: "Email"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n              type: "email",\n              id: "register-email",\n              value: registerForm.email,\n              onChange: function onChange(e) {\n                return setRegisterForm(LandingPage_objectSpread(LandingPage_objectSpread({}, registerForm), {}, {\n                  email: e.target.value\n                }));\n              },\n              placeholder: "Enter your email",\n              required: true\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "form-group",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n              htmlFor: "register-password",\n              children: "Password"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n              type: "password",\n              id: "register-password",\n              value: registerForm.password,\n              onChange: function onChange(e) {\n                return setRegisterForm(LandingPage_objectSpread(LandingPage_objectSpread({}, registerForm), {}, {\n                  password: e.target.value\n                }));\n              },\n              placeholder: "Create a password",\n              required: true\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "form-group",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n              htmlFor: "register-confirmPassword",\n              children: "Confirm Password"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n              type: "password",\n              id: "register-confirmPassword",\n              value: registerForm.confirmPassword,\n              onChange: function onChange(e) {\n                return setRegisterForm(LandingPage_objectSpread(LandingPage_objectSpread({}, registerForm), {}, {\n                  confirmPassword: e.target.value\n                }));\n              },\n              placeholder: "Confirm your password",\n              required: true\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n            type: "submit",\n            className: "btn btn-primary btn-full",\n            children: "Create Account"\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "modal-footer",\n          children: /*#__PURE__*/(0,jsx_runtime.jsxs)("p", {\n            children: ["Already have an account? ", /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n              className: "btn btn-text",\n              onClick: function onClick() {\n                setShowRegisterModal(false);\n                setShowLoginModal(true);\n              },\n              children: "Sign in"\n            })]\n          })\n        })]\n      })\n    })]\n  });\n};\n/* harmony default export */ const components_LandingPage = (LandingPage);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/arrow-right.js\nvar arrow_right = __webpack_require__(48635);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/circle-check-big.js\nvar circle_check_big = __webpack_require__(44471);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/star.js\nvar star = __webpack_require__(41181);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/download.js\nvar download = __webpack_require__(48309);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/globe.js\nvar globe = __webpack_require__(30684);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/smartphone.js\nvar smartphone = __webpack_require__(39574);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/lock.js\nvar lock = __webpack_require__(67078);\n;// ./wwwroot/js/react/components/ModernLandingPage.tsx\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || ModernLandingPage_unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return ModernLandingPage_arrayLikeToArray(r); }\nfunction ModernLandingPage_slicedToArray(r, e) { return ModernLandingPage_arrayWithHoles(r) || ModernLandingPage_iterableToArrayLimit(r, e) || ModernLandingPage_unsupportedIterableToArray(r, e) || ModernLandingPage_nonIterableRest(); }\nfunction ModernLandingPage_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction ModernLandingPage_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return ModernLandingPage_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? ModernLandingPage_arrayLikeToArray(r, a) : void 0; } }\nfunction ModernLandingPage_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction ModernLandingPage_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction ModernLandingPage_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\nvar ModernLandingPage = function ModernLandingPage() {\n  var _useState = (0,react.useState)(0),\n    _useState2 = ModernLandingPage_slicedToArray(_useState, 2),\n    activeFeature = _useState2[0],\n    setActiveFeature = _useState2[1];\n  var features = [{\n    icon: /*#__PURE__*/(0,jsx_runtime.jsx)(trending_up/* default */.A, {\n      size: 32\n    }),\n    title: \'Smart Analytics\',\n    description: \'AI-powered investment insights and portfolio optimization recommendations.\',\n    color: \'var(--ezana-primary)\'\n  }, {\n    icon: /*#__PURE__*/(0,jsx_runtime.jsx)(shield/* default */.A, {\n      size: 32\n    }),\n    title: \'Risk Management\',\n    description: \'Advanced risk assessment and portfolio diversification strategies.\',\n    color: \'var(--ezana-success)\'\n  }, {\n    icon: /*#__PURE__*/(0,jsx_runtime.jsx)(users/* default */.A, {\n      size: 32\n    }),\n    title: \'Social Investing\',\n    description: \'Connect with other investors and share insights and strategies.\',\n    color: \'var(--ezana-warning)\'\n  }, {\n    icon: /*#__PURE__*/(0,jsx_runtime.jsx)(bar_chart_3/* default */.A, {\n      size: 32\n    }),\n    title: \'Real-time Data\',\n    description: \'Live market data and portfolio performance tracking.\',\n    color: \'var(--ezana-info)\'\n  }];\n  var testimonials = [{\n    name: \'Sarah Johnson\',\n    role: \'Portfolio Manager\',\n    company: \'Tech Investments Inc.\',\n    content: \'Ezana has transformed how we manage our investment portfolios. The analytics are incredibly insightful.\',\n    rating: 5,\n    avatar: \'SJ\'\n  }, {\n    name: \'Michael Chen\',\n    role: \'Individual Investor\',\n    company: \'Self-employed\',\n    content: \'The social features help me learn from other investors. Great platform for both beginners and experts.\',\n    rating: 5,\n    avatar: \'MC\'\n  }, {\n    name: \'Emily Rodriguez\',\n    role: \'Financial Advisor\',\n    company: \'Wealth Management Group\',\n    content: \'My clients love the intuitive interface and comprehensive reporting features.\',\n    rating: 5,\n    avatar: \'ER\'\n  }];\n  var stats = [{\n    value: \'50K+\',\n    label: \'Active Users\'\n  }, {\n    value: \'$2.5B+\',\n    label: \'Portfolio Value\'\n  }, {\n    value: \'98%\',\n    label: \'Satisfaction Rate\'\n  }, {\n    value: \'24/7\',\n    label: \'Support Available\'\n  }];\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n    className: "ezana-animate-fade-in",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("section", {\n      className: "py-5",\n      style: {\n        background: \'linear-gradient(135deg, var(--ezana-gray-50) 0%, var(--ezana-gray-100) 100%)\'\n      },\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "container",\n        children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "row align-items-center",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "col-lg-6 mb-5 mb-lg-0",\n            children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "ezana-animate-slide-in-left",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h1", {\n                className: "ezana-text-display mb-4",\n                style: {\n                  background: \'linear-gradient(135deg, var(--ezana-primary) 0%, var(--ezana-primary-dark) 100%)\',\n                  WebkitBackgroundClip: \'text\',\n                  WebkitTextFillColor: \'transparent\',\n                  backgroundClip: \'text\'\n                },\n                children: "Smart Investment Analytics for Modern Investors"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                className: "ezana-text-body-large mb-4",\n                style: {\n                  color: \'var(--ezana-gray-600)\',\n                  lineHeight: \'1.7\'\n                },\n                children: "Transform your investment strategy with AI-powered insights, real-time analytics, and social investing features. Make informed decisions backed by data and community wisdom."\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "d-flex flex-wrap gap-3 mb-4",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("button", {\n                  className: "ezana-btn ezana-btn-primary ezana-btn-lg",\n                  children: ["Get Started Free", /*#__PURE__*/(0,jsx_runtime.jsx)(arrow_right/* default */.A, {\n                    size: 20,\n                    className: "ms-2"\n                  })]\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("button", {\n                  className: "ezana-btn ezana-btn-secondary ezana-btn-lg",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)(play/* default */.A, {\n                    size: 20,\n                    className: "me-2"\n                  }), "Watch Demo"]\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "d-flex align-items-center gap-4",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "d-flex align-items-center gap-2",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)(circle_check_big/* default */.A, {\n                    size: 20,\n                    style: {\n                      color: \'var(--ezana-success)\'\n                    }\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                    className: "ezana-text-small",\n                    children: "No credit card required"\n                  })]\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "d-flex align-items-center gap-2",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)(circle_check_big/* default */.A, {\n                    size: 20,\n                    style: {\n                      color: \'var(--ezana-success)\'\n                    }\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                    className: "ezana-text-small",\n                    children: "14-day free trial"\n                  })]\n                })]\n              })]\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "col-lg-6",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "ezana-animate-slide-in-right",\n              children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "ezana-card",\n                style: {\n                  padding: \'2rem\',\n                  textAlign: \'center\'\n                },\n                children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "position-relative",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                    className: "rounded-circle d-flex align-items-center justify-content-center mx-auto mb-4",\n                    style: {\n                      width: \'120px\',\n                      height: \'120px\',\n                      background: \'linear-gradient(135deg, var(--ezana-primary) 0%, var(--ezana-primary-light) 100%)\'\n                    },\n                    children: /*#__PURE__*/(0,jsx_runtime.jsx)(trending_up/* default */.A, {\n                      size: 48,\n                      style: {\n                        color: \'white\'\n                      }\n                    })\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                    className: "position-absolute",\n                    style: {\n                      top: \'20px\',\n                      right: \'20px\'\n                    },\n                    children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                      className: "ezana-status ezana-status-success",\n                      children: "Live"\n                    })\n                  })]\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n                  className: "ezana-text-heading-3 mb-3",\n                  children: "Portfolio Dashboard"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                  className: "ezana-text-body mb-4",\n                  style: {\n                    color: \'var(--ezana-gray-600)\'\n                  },\n                  children: "Real-time portfolio tracking with advanced analytics and insights"\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "d-flex justify-content-center gap-3",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                    className: "text-center",\n                    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                      className: "ezana-metric-value",\n                      style: {\n                        fontSize: \'1.5rem\',\n                        marginBottom: \'0.25rem\'\n                      },\n                      children: "$125,430"\n                    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                      className: "ezana-text-caption",\n                      children: "Total Value"\n                    })]\n                  }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                    className: "text-center",\n                    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                      className: "ezana-metric-value",\n                      style: {\n                        fontSize: \'1.5rem\',\n                        marginBottom: \'0.25rem\',\n                        color: \'var(--ezana-profit)\'\n                      },\n                      children: "+12.4%"\n                    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                      className: "ezana-text-caption",\n                      children: "This Month"\n                    })]\n                  })]\n                })]\n              })\n            })\n          })]\n        })\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("section", {\n      className: "py-5",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "container",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "row",\n          children: stats.map(function (stat, index) {\n            return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "col-lg-3 col-md-6 mb-4",\n              children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "text-center ezana-animate-scale-in",\n                style: {\n                  animationDelay: "".concat(index * 0.1, "s")\n                },\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "ezana-metric-value mb-2",\n                  style: {\n                    fontSize: \'2.5rem\',\n                    background: \'linear-gradient(135deg, var(--ezana-primary) 0%, var(--ezana-primary-dark) 100%)\',\n                    WebkitBackgroundClip: \'text\',\n                    WebkitTextFillColor: \'transparent\',\n                    backgroundClip: \'text\'\n                  },\n                  children: stat.value\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "ezana-text-caption",\n                  children: stat.label\n                })]\n              })\n            }, stat.label);\n          })\n        })\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("section", {\n      className: "py-5",\n      style: {\n        background: \'linear-gradient(135deg, var(--ezana-gray-100) 0%, var(--ezana-gray-50) 100%)\'\n      },\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "container",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "row mb-5",\n          children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "col-lg-8 mx-auto text-center",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h2", {\n              className: "ezana-text-heading-1 mb-3",\n              children: "Why Choose Ezana?"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n              className: "ezana-text-body-large",\n              style: {\n                color: \'var(--ezana-gray-600)\'\n              },\n              children: "Built for investors who demand more than just basic portfolio tracking"\n            })]\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "row",\n          children: features.map(function (feature, index) {\n            return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "col-lg-6 mb-4",\n              children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "ezana-card ezana-card-interactive h-100",\n                onMouseEnter: function onMouseEnter() {\n                  return setActiveFeature(index);\n                },\n                style: {\n                  borderLeft: "4px solid ".concat(feature.color)\n                },\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "ezana-card-body",\n                  children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                    className: "d-flex align-items-start gap-3",\n                    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                      className: "rounded-circle d-flex align-items-center justify-content-center",\n                      style: {\n                        width: \'64px\',\n                        height: \'64px\',\n                        backgroundColor: "".concat(feature.color, "20"),\n                        color: feature.color,\n                        flexShrink: 0\n                      },\n                      children: feature.icon\n                    }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n                        className: "ezana-text-heading-3 mb-2",\n                        children: feature.title\n                      }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                        className: "ezana-text-body",\n                        style: {\n                          color: \'var(--ezana-gray-600)\'\n                        },\n                        children: feature.description\n                      })]\n                    })]\n                  })\n                })\n              })\n            }, feature.title);\n          })\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("section", {\n      className: "py-5",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "container",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "row mb-5",\n          children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "col-lg-8 mx-auto text-center",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h2", {\n              className: "ezana-text-heading-1 mb-3",\n              children: "Trusted by Investors Worldwide"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n              className: "ezana-text-body-large",\n              style: {\n                color: \'var(--ezana-gray-600)\'\n              },\n              children: "See what our users have to say about their experience with Ezana"\n            })]\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "row",\n          children: testimonials.map(function (testimonial, index) {\n            return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "col-lg-4 mb-4",\n              children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "ezana-card h-100 ezana-animate-scale-in",\n                style: {\n                  animationDelay: "".concat(index * 0.1, "s")\n                },\n                children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "ezana-card-body",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                    className: "d-flex align-items-center gap-2 mb-3",\n                    children: _toConsumableArray(Array(testimonial.rating)).map(function (_, i) {\n                      return /*#__PURE__*/(0,jsx_runtime.jsx)(star/* default */.A, {\n                        size: 16,\n                        style: {\n                          color: \'#fbbf24\',\n                          fill: \'#fbbf24\'\n                        }\n                      }, i);\n                    })\n                  }), /*#__PURE__*/(0,jsx_runtime.jsxs)("p", {\n                    className: "ezana-text-body mb-4",\n                    style: {\n                      color: \'var(--ezana-gray-700)\',\n                      fontStyle: \'italic\'\n                    },\n                    children: ["\\"", testimonial.content, "\\""]\n                  }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                    className: "d-flex align-items-center gap-3",\n                    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                      className: "rounded-circle d-flex align-items-center justify-content-center",\n                      style: {\n                        width: \'48px\',\n                        height: \'48px\',\n                        backgroundColor: \'var(--ezana-primary)\',\n                        color: \'white\',\n                        fontWeight: \'600\'\n                      },\n                      children: testimonial.avatar\n                    }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                        className: "fw-semibold",\n                        children: testimonial.name\n                      }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                        className: "ezana-text-small",\n                        style: {\n                          color: \'var(--ezana-gray-600)\'\n                        },\n                        children: [testimonial.role, " at ", testimonial.company]\n                      })]\n                    })]\n                  })]\n                })\n              })\n            }, testimonial.name);\n          })\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("section", {\n      className: "py-5",\n      style: {\n        background: \'linear-gradient(135deg, var(--ezana-primary) 0%, var(--ezana-primary-dark) 100%)\'\n      },\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "container",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "row",\n          children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "col-lg-8 mx-auto text-center text-white",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h2", {\n              className: "ezana-text-heading-1 mb-3",\n              children: "Ready to Transform Your Investment Strategy?"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n              className: "ezana-text-body-large mb-4",\n              style: {\n                opacity: 0.9\n              },\n              children: "Join thousands of investors who are already using Ezana to make smarter investment decisions"\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "d-flex flex-wrap gap-3 justify-content-center",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("button", {\n                className: "ezana-btn ezana-btn-lg",\n                style: {\n                  backgroundColor: \'white\',\n                  color: \'var(--ezana-primary)\',\n                  borderColor: \'white\'\n                },\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)(zap/* default */.A, {\n                  size: 20,\n                  className: "me-2"\n                }), "Start Free Trial"]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("button", {\n                className: "ezana-btn ezana-btn-lg",\n                style: {\n                  backgroundColor: \'transparent\',\n                  color: \'white\',\n                  borderColor: \'white\'\n                },\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)(download/* default */.A, {\n                  size: 20,\n                  className: "me-2"\n                }), "Download App"]\n              })]\n            })]\n          })\n        })\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("footer", {\n      className: "py-5",\n      style: {\n        background: \'var(--ezana-gray-900)\',\n        color: \'white\'\n      },\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "container",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "row",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "col-lg-4 mb-4",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "d-flex align-items-center gap-2 mb-3",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "rounded-circle d-flex align-items-center justify-content-center",\n                style: {\n                  width: \'40px\',\n                  height: \'40px\',\n                  backgroundColor: \'var(--ezana-primary)\',\n                  color: \'white\'\n                },\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)(trending_up/* default */.A, {\n                  size: 20\n                })\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "ezana-text-heading-3",\n                style: {\n                  color: \'white\'\n                },\n                children: "Ezana"\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n              className: "ezana-text-body",\n              style: {\n                color: \'var(--ezana-gray-400)\'\n              },\n              children: "Empowering investors with intelligent analytics and social insights for better financial decisions."\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "col-lg-2 col-md-6 mb-4",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h5", {\n              className: "ezana-text-heading-3 mb-3",\n              style: {\n                color: \'white\'\n              },\n              children: "Product"\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("ul", {\n              className: "list-unstyled",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n                className: "mb-2",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n                  href: "#",\n                  className: "text-decoration-none",\n                  style: {\n                    color: \'var(--ezana-gray-400)\'\n                  },\n                  children: "Features"\n                })\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n                className: "mb-2",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n                  href: "#",\n                  className: "text-decoration-none",\n                  style: {\n                    color: \'var(--ezana-gray-400)\'\n                  },\n                  children: "Pricing"\n                })\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n                className: "mb-2",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n                  href: "#",\n                  className: "text-decoration-none",\n                  style: {\n                    color: \'var(--ezana-gray-400)\'\n                  },\n                  children: "API"\n                })\n              })]\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "col-lg-2 col-md-6 mb-4",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h5", {\n              className: "ezana-text-heading-3 mb-3",\n              style: {\n                color: \'white\'\n              },\n              children: "Company"\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("ul", {\n              className: "list-unstyled",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n                className: "mb-2",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n                  href: "#",\n                  className: "text-decoration-none",\n                  style: {\n                    color: \'var(--ezana-gray-400)\'\n                  },\n                  children: "About"\n                })\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n                className: "mb-2",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n                  href: "#",\n                  className: "text-decoration-none",\n                  style: {\n                    color: \'var(--ezana-gray-400)\'\n                  },\n                  children: "Blog"\n                })\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n                className: "mb-2",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n                  href: "#",\n                  className: "text-decoration-none",\n                  style: {\n                    color: \'var(--ezana-gray-400)\'\n                  },\n                  children: "Careers"\n                })\n              })]\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "col-lg-2 col-md-6 mb-4",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h5", {\n              className: "ezana-text-heading-3 mb-3",\n              style: {\n                color: \'white\'\n              },\n              children: "Support"\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("ul", {\n              className: "list-unstyled",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n                className: "mb-2",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n                  href: "#",\n                  className: "text-decoration-none",\n                  style: {\n                    color: \'var(--ezana-gray-400)\'\n                  },\n                  children: "Help Center"\n                })\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n                className: "mb-2",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n                  href: "#",\n                  className: "text-decoration-none",\n                  style: {\n                    color: \'var(--ezana-gray-400)\'\n                  },\n                  children: "Contact"\n                })\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n                className: "mb-2",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n                  href: "#",\n                  className: "text-decoration-none",\n                  style: {\n                    color: \'var(--ezana-gray-400)\'\n                  },\n                  children: "Status"\n                })\n              })]\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "col-lg-2 col-md-6 mb-4",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h5", {\n              className: "ezana-text-heading-3 mb-3",\n              style: {\n                color: \'white\'\n              },\n              children: "Legal"\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("ul", {\n              className: "list-unstyled",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n                className: "mb-2",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n                  href: "#",\n                  className: "text-decoration-none",\n                  style: {\n                    color: \'var(--ezana-gray-400)\'\n                  },\n                  children: "Privacy"\n                })\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n                className: "mb-2",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n                  href: "#",\n                  className: "text-decoration-none",\n                  style: {\n                    color: \'var(--ezana-gray-400)\'\n                  },\n                  children: "Terms"\n                })\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n                className: "mb-2",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n                  href: "#",\n                  className: "text-decoration-none",\n                  style: {\n                    color: \'var(--ezana-gray-400)\'\n                  },\n                  children: "Security"\n                })\n              })]\n            })]\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("hr", {\n          style: {\n            borderColor: \'var(--ezana-gray-700)\'\n          }\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "row align-items-center",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "col-md-6",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n              className: "mb-0",\n              style: {\n                color: \'var(--ezana-gray-400)\'\n              },\n              children: "\\xA9 2024 Ezana Investment Analytics. All rights reserved."\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "col-md-6 text-md-end",\n            children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "d-flex gap-3 justify-content-md-end",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n                href: "#",\n                style: {\n                  color: \'var(--ezana-gray-400)\'\n                },\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)(globe/* default */.A, {\n                  size: 20\n                })\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n                href: "#",\n                style: {\n                  color: \'var(--ezana-gray-400)\'\n                },\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)(smartphone/* default */.A, {\n                  size: 20\n                })\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n                href: "#",\n                style: {\n                  color: \'var(--ezana-gray-400)\'\n                },\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)(lock/* default */.A, {\n                  size: 20\n                })\n              })]\n            })\n          })]\n        })]\n      })\n    })]\n  });\n};\n/* harmony default export */ const components_ModernLandingPage = (ModernLandingPage);\n;// ./wwwroot/js/react/context/AppContext.jsx\nfunction AppContext_typeof(o) { "@babel/helpers - typeof"; return AppContext_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, AppContext_typeof(o); }\nfunction AppContext_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ AppContext_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == AppContext_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(AppContext_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction AppContext_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction AppContext_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { AppContext_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { AppContext_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction AppContext_slicedToArray(r, e) { return AppContext_arrayWithHoles(r) || AppContext_iterableToArrayLimit(r, e) || AppContext_unsupportedIterableToArray(r, e) || AppContext_nonIterableRest(); }\nfunction AppContext_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction AppContext_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return AppContext_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? AppContext_arrayLikeToArray(r, a) : void 0; } }\nfunction AppContext_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction AppContext_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction AppContext_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n// Create context\n\nvar AppContext = /*#__PURE__*/(0,react.createContext)();\n\n/**\r\n * Custom hook to use the app context\r\n */\nvar useAppContext = function useAppContext() {\n  return (0,react.useContext)(AppContext);\n};\n\n/**\r\n * App Context Provider\r\n * \r\n * This component provides global state and methods to all child components\r\n */\nfunction AppProvider(_ref) {\n  var children = _ref.children;\n  // User state\n  var _useState = useState(null),\n    _useState2 = AppContext_slicedToArray(_useState, 2),\n    user = _useState2[0],\n    setUser = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = AppContext_slicedToArray(_useState3, 2),\n    isLoading = _useState4[0],\n    setIsLoading = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = AppContext_slicedToArray(_useState5, 2),\n    error = _useState6[0],\n    setError = _useState6[1];\n\n  // Portfolio state\n  var _useState7 = useState(null),\n    _useState8 = AppContext_slicedToArray(_useState7, 2),\n    portfolioSummary = _useState8[0],\n    setPortfolioSummary = _useState8[1];\n  var _useState9 = useState(null),\n    _useState0 = AppContext_slicedToArray(_useState9, 2),\n    portfolioPerformance = _useState0[0],\n    setPortfolioPerformance = _useState0[1];\n  var _useState1 = useState(null),\n    _useState10 = AppContext_slicedToArray(_useState1, 2),\n    assetAllocation = _useState10[0],\n    setAssetAllocation = _useState10[1];\n  var _useState11 = useState(null),\n    _useState12 = AppContext_slicedToArray(_useState11, 2),\n    sectorBreakdown = _useState12[0],\n    setSectorBreakdown = _useState12[1];\n\n  // Stocks state\n  var _useState13 = useState([]),\n    _useState14 = AppContext_slicedToArray(_useState13, 2),\n    stockHoldings = _useState14[0],\n    setStockHoldings = _useState14[1];\n  var _useState15 = useState([]),\n    _useState16 = AppContext_slicedToArray(_useState15, 2),\n    watchlist = _useState16[0],\n    setWatchlist = _useState16[1];\n\n  // Preferences state\n  var _useState17 = useState(null),\n    _useState18 = AppContext_slicedToArray(_useState17, 2),\n    preferences = _useState18[0],\n    setPreferences = _useState18[1];\n\n  // Initialize app data\n  useEffect(function () {\n    var initializeApp = /*#__PURE__*/function () {\n      var _ref2 = AppContext_asyncToGenerator(/*#__PURE__*/AppContext_regeneratorRuntime().mark(function _callee() {\n        return AppContext_regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              setIsLoading(true);\n\n              // In a real app, we would fetch the current user and initial data\n              // For demo purposes, we\'ll just set a mock user after a delay\n              _context.next = 4;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 1000);\n              });\n            case 4:\n              setUser({\n                id: 1,\n                name: \'John Doe\',\n                email: \'john.doe@example.com\',\n                avatar: \'https://via.placeholder.com/150\'\n              });\n\n              // Mock portfolio data\n              setPortfolioSummary({\n                totalValue: \'$124,500.00\',\n                totalChange: \'+$3,240.50\',\n                percentChange: \'+2.7%\',\n                timeframe: \'Last 30 days\'\n              });\n              setIsLoading(false);\n              _context.next = 14;\n              break;\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context["catch"](0);\n              console.error(\'Failed to initialize app:\', _context.t0);\n              setError(\'Failed to load application data. Please try again later.\');\n              setIsLoading(false);\n            case 14:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 9]]);\n      }));\n      return function initializeApp() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    initializeApp();\n  }, []);\n\n  // Methods for portfolio data\n  var fetchPortfolioData = /*#__PURE__*/function () {\n    var _ref3 = AppContext_asyncToGenerator(/*#__PURE__*/AppContext_regeneratorRuntime().mark(function _callee2() {\n      var timeframe,\n        _args2 = arguments;\n      return AppContext_regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            timeframe = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : \'1M\';\n            _context2.prev = 1;\n            setIsLoading(true);\n\n            // In a real app, we would fetch data from the API\n            // For demo purposes, we\'ll just set mock data after a delay\n            _context2.next = 5;\n            return new Promise(function (resolve) {\n              return setTimeout(resolve, 500);\n            });\n          case 5:\n            // Mock data\n            setPortfolioPerformance({\n              timeframe: timeframe,\n              data: Array.from({\n                length: 30\n              }, function (_, i) {\n                return {\n                  date: new Date(Date.now() - (29 - i) * 24 * 60 * 60 * 1000).toISOString().split(\'T\')[0],\n                  value: 100000 + Math.random() * 30000\n                };\n              })\n            });\n            setAssetAllocation({\n              stocks: 60,\n              bonds: 25,\n              cash: 10,\n              other: 5\n            });\n            setSectorBreakdown({\n              technology: 35,\n              healthcare: 20,\n              finance: 15,\n              consumer: 10,\n              industrial: 10,\n              energy: 5,\n              other: 5\n            });\n            setIsLoading(false);\n            _context2.next = 16;\n            break;\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2["catch"](1);\n            console.error(\'Failed to fetch portfolio data:\', _context2.t0);\n            setError(\'Failed to load portfolio data. Please try again later.\');\n            setIsLoading(false);\n          case 16:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[1, 11]]);\n    }));\n    return function fetchPortfolioData() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  // Methods for stock data\n  var fetchStockHoldings = /*#__PURE__*/function () {\n    var _ref4 = AppContext_asyncToGenerator(/*#__PURE__*/AppContext_regeneratorRuntime().mark(function _callee3() {\n      return AppContext_regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            setIsLoading(true);\n\n            // In a real app, we would fetch data from the API\n            // For demo purposes, we\'ll just set mock data after a delay\n            _context3.next = 4;\n            return new Promise(function (resolve) {\n              return setTimeout(resolve, 500);\n            });\n          case 4:\n            // Mock data\n            setStockHoldings([{\n              symbol: \'AAPL\',\n              name: \'Apple Inc.\',\n              shares: 25,\n              price: 178.72,\n              change: 1.33,\n              value: 4468.00\n            }, {\n              symbol: \'MSFT\',\n              name: \'Microsoft Corporation\',\n              shares: 15,\n              price: 337.22,\n              change: 0.87,\n              value: 5058.30\n            }, {\n              symbol: \'GOOGL\',\n              name: \'Alphabet Inc.\',\n              shares: 10,\n              price: 131.86,\n              change: -0.45,\n              value: 1318.60\n            }]);\n            setIsLoading(false);\n            _context3.next = 13;\n            break;\n          case 8:\n            _context3.prev = 8;\n            _context3.t0 = _context3["catch"](0);\n            console.error(\'Failed to fetch stock holdings:\', _context3.t0);\n            setError(\'Failed to load stock holdings. Please try again later.\');\n            setIsLoading(false);\n          case 13:\n          case "end":\n            return _context3.stop();\n        }\n      }, _callee3, null, [[0, 8]]);\n    }));\n    return function fetchStockHoldings() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var fetchWatchlist = /*#__PURE__*/function () {\n    var _ref5 = AppContext_asyncToGenerator(/*#__PURE__*/AppContext_regeneratorRuntime().mark(function _callee4() {\n      return AppContext_regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            setIsLoading(true);\n\n            // In a real app, we would fetch data from the API\n            // For demo purposes, we\'ll just set mock data after a delay\n            _context4.next = 4;\n            return new Promise(function (resolve) {\n              return setTimeout(resolve, 500);\n            });\n          case 4:\n            // Mock data\n            setWatchlist([{\n              symbol: \'AMZN\',\n              name: \'Amazon.com Inc.\',\n              price: 129.12,\n              change: 0.78\n            }, {\n              symbol: \'TSLA\',\n              name: \'Tesla, Inc.\',\n              price: 237.49,\n              change: -1.23\n            }, {\n              symbol: \'NVDA\',\n              name: \'NVIDIA Corporation\',\n              price: 437.53,\n              change: 2.15\n            }]);\n            setIsLoading(false);\n            _context4.next = 13;\n            break;\n          case 8:\n            _context4.prev = 8;\n            _context4.t0 = _context4["catch"](0);\n            console.error(\'Failed to fetch watchlist:\', _context4.t0);\n            setError(\'Failed to load watchlist. Please try again later.\');\n            setIsLoading(false);\n          case 13:\n          case "end":\n            return _context4.stop();\n        }\n      }, _callee4, null, [[0, 8]]);\n    }));\n    return function fetchWatchlist() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  // Methods for preferences\n  var fetchPreferences = /*#__PURE__*/function () {\n    var _ref6 = AppContext_asyncToGenerator(/*#__PURE__*/AppContext_regeneratorRuntime().mark(function _callee5() {\n      return AppContext_regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            setIsLoading(true);\n\n            // In a real app, we would fetch data from the API\n            // For demo purposes, we\'ll just set mock data after a delay\n            _context5.next = 4;\n            return new Promise(function (resolve) {\n              return setTimeout(resolve, 500);\n            });\n          case 4:\n            // Mock data\n            setPreferences({\n              riskTolerance: \'moderate\',\n              investmentGoals: [\'retirement\', \'growth\'],\n              investmentHorizon: \'5-10\',\n              monthlyContribution: 500,\n              autoRebalance: true,\n              preferredSectors: [\'technology\', \'healthcare\', \'finance\']\n            });\n            setIsLoading(false);\n            _context5.next = 13;\n            break;\n          case 8:\n            _context5.prev = 8;\n            _context5.t0 = _context5["catch"](0);\n            console.error(\'Failed to fetch preferences:\', _context5.t0);\n            setError(\'Failed to load preferences. Please try again later.\');\n            setIsLoading(false);\n          case 13:\n          case "end":\n            return _context5.stop();\n        }\n      }, _callee5, null, [[0, 8]]);\n    }));\n    return function fetchPreferences() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  var savePreferences = /*#__PURE__*/function () {\n    var _ref7 = AppContext_asyncToGenerator(/*#__PURE__*/AppContext_regeneratorRuntime().mark(function _callee6(newPreferences) {\n      return AppContext_regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            setIsLoading(true);\n\n            // In a real app, we would save data to the API\n            // For demo purposes, we\'ll just update state after a delay\n            _context6.next = 4;\n            return new Promise(function (resolve) {\n              return setTimeout(resolve, 500);\n            });\n          case 4:\n            setPreferences(newPreferences);\n            setIsLoading(false);\n            return _context6.abrupt("return", {\n              success: true\n            });\n          case 9:\n            _context6.prev = 9;\n            _context6.t0 = _context6["catch"](0);\n            console.error(\'Failed to save preferences:\', _context6.t0);\n            setError(\'Failed to save preferences. Please try again later.\');\n            setIsLoading(false);\n            return _context6.abrupt("return", {\n              success: false,\n              error: _context6.t0.message\n            });\n          case 15:\n          case "end":\n            return _context6.stop();\n        }\n      }, _callee6, null, [[0, 9]]);\n    }));\n    return function savePreferences(_x) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  // Authentication methods\n  var login = /*#__PURE__*/function () {\n    var _ref8 = AppContext_asyncToGenerator(/*#__PURE__*/AppContext_regeneratorRuntime().mark(function _callee7(credentials) {\n      return AppContext_regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            setIsLoading(true);\n\n            // In a real app, we would call the API\n            // For demo purposes, we\'ll just set a mock user after a delay\n            _context7.next = 4;\n            return new Promise(function (resolve) {\n              return setTimeout(resolve, 1000);\n            });\n          case 4:\n            setUser({\n              id: 1,\n              name: \'John Doe\',\n              email: credentials.email,\n              avatar: \'https://via.placeholder.com/150\'\n            });\n            setIsLoading(false);\n            return _context7.abrupt("return", {\n              success: true\n            });\n          case 9:\n            _context7.prev = 9;\n            _context7.t0 = _context7["catch"](0);\n            console.error(\'Login failed:\', _context7.t0);\n            setError(\'Login failed. Please check your credentials and try again.\');\n            setIsLoading(false);\n            return _context7.abrupt("return", {\n              success: false,\n              error: _context7.t0.message\n            });\n          case 15:\n          case "end":\n            return _context7.stop();\n        }\n      }, _callee7, null, [[0, 9]]);\n    }));\n    return function login(_x2) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n  var logout = /*#__PURE__*/function () {\n    var _ref9 = AppContext_asyncToGenerator(/*#__PURE__*/AppContext_regeneratorRuntime().mark(function _callee8() {\n      return AppContext_regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.prev = 0;\n            setIsLoading(true);\n\n            // In a real app, we would call the API\n            // For demo purposes, we\'ll just clear the user after a delay\n            _context8.next = 4;\n            return new Promise(function (resolve) {\n              return setTimeout(resolve, 500);\n            });\n          case 4:\n            setUser(null);\n            setIsLoading(false);\n            return _context8.abrupt("return", {\n              success: true\n            });\n          case 9:\n            _context8.prev = 9;\n            _context8.t0 = _context8["catch"](0);\n            console.error(\'Logout failed:\', _context8.t0);\n            setError(\'Logout failed. Please try again later.\');\n            setIsLoading(false);\n            return _context8.abrupt("return", {\n              success: false,\n              error: _context8.t0.message\n            });\n          case 15:\n          case "end":\n            return _context8.stop();\n        }\n      }, _callee8, null, [[0, 9]]);\n    }));\n    return function logout() {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n\n  // Context value\n  var contextValue = {\n    // State\n    user: user,\n    isLoading: isLoading,\n    error: error,\n    portfolioSummary: portfolioSummary,\n    portfolioPerformance: portfolioPerformance,\n    assetAllocation: assetAllocation,\n    sectorBreakdown: sectorBreakdown,\n    stockHoldings: stockHoldings,\n    watchlist: watchlist,\n    preferences: preferences,\n    // Methods\n    fetchPortfolioData: fetchPortfolioData,\n    fetchStockHoldings: fetchStockHoldings,\n    fetchWatchlist: fetchWatchlist,\n    fetchPreferences: fetchPreferences,\n    savePreferences: savePreferences,\n    login: login,\n    logout: logout,\n    // Utility\n    clearError: function clearError() {\n      return setError(null);\n    }\n  };\n  return /*#__PURE__*/_jsx(AppContext.Provider, {\n    value: contextValue,\n    children: children\n  });\n}\n/* harmony default export */ const context_AppContext = ((/* unused pure expression or super */ null && (AppContext)));\n;// ./wwwroot/js/react/components/common/Loading.jsx\n\n\n/**\r\n * Loading Component\r\n * \r\n * A reusable loading spinner component with customizable size and message\r\n * \r\n * @param {Object} props\r\n * @param {string} props.size - Size of the spinner (sm, md, lg)\r\n * @param {string} props.message - Optional message to display\r\n * @param {boolean} props.fullPage - Whether to display as a full page overlay\r\n */\n\nfunction Loading(_ref) {\n  var _ref$size = _ref.size,\n    size = _ref$size === void 0 ? \'md\' : _ref$size,\n    _ref$message = _ref.message,\n    message = _ref$message === void 0 ? \'Loading...\' : _ref$message,\n    _ref$fullPage = _ref.fullPage,\n    fullPage = _ref$fullPage === void 0 ? false : _ref$fullPage;\n  var spinnerSize = {\n    sm: \'\',\n    md: \'spinner-border-sm\',\n    lg: \'\'\n  }[size];\n  var spinnerClasses = "spinner-border ".concat(spinnerSize, " text-primary");\n  if (fullPage) {\n    return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "position-fixed top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center bg-white bg-opacity-75",\n      style: {\n        zIndex: 1050\n      },\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "text-center",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: spinnerClasses,\n          role: "status",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n            className: "visually-hidden",\n            children: "Loading..."\n          })\n        }), message && /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n          className: "mt-3",\n          children: message\n        })]\n      })\n    });\n  }\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n    className: "d-flex justify-content-center align-items-center py-4",\n    children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "text-center",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: spinnerClasses,\n        role: "status",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n          className: "visually-hidden",\n          children: "Loading..."\n        })\n      }), message && /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n        className: "mt-2 text-muted",\n        children: message\n      })]\n    })\n  });\n}\n/* harmony default export */ const common_Loading = (Loading);\n;// ./wwwroot/js/react/components/common/ErrorMessage.jsx\n\n\n\n/**\r\n * Error Message Component\r\n * \r\n * A reusable error message component with optional retry functionality\r\n * \r\n * @param {Object} props\r\n * @param {string} props.message - Error message to display\r\n * @param {Function} props.onRetry - Optional retry function\r\n * @param {string} props.type - Error type (danger, warning, info)\r\n */\n\nfunction ErrorMessage(_ref) {\n  var message = _ref.message,\n    onRetry = _ref.onRetry,\n    _ref$type = _ref.type,\n    type = _ref$type === void 0 ? \'danger\' : _ref$type;\n  var _useAppContext = useAppContext(),\n    clearError = _useAppContext.clearError;\n  var handleRetry = function handleRetry() {\n    clearError();\n    if (onRetry) {\n      onRetry();\n    }\n  };\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n    className: "alert alert-".concat(type, " d-flex align-items-center"),\n    role: "alert",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "me-3",\n      children: [type === \'danger\' && /*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n        className: "bi bi-exclamation-triangle-fill fs-4"\n      }), type === \'warning\' && /*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n        className: "bi bi-exclamation-circle-fill fs-4"\n      }), type === \'info\' && /*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n        className: "bi bi-info-circle-fill fs-4"\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "flex-grow-1",\n      children: message\n    }), onRetry && /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n      className: "btn btn-sm btn-outline-secondary ms-3",\n      onClick: handleRetry,\n      children: "Retry"\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n      className: "btn-close ms-2",\n      onClick: clearError,\n      "aria-label": "Close"\n    })]\n  });\n}\n/* harmony default export */ const common_ErrorMessage = (ErrorMessage);\n;// ./wwwroot/js/react/components/InvestmentPreferences.jsx\nfunction InvestmentPreferences_typeof(o) { "@babel/helpers - typeof"; return InvestmentPreferences_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, InvestmentPreferences_typeof(o); }\nfunction InvestmentPreferences_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ InvestmentPreferences_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == InvestmentPreferences_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(InvestmentPreferences_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction InvestmentPreferences_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction InvestmentPreferences_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { InvestmentPreferences_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { InvestmentPreferences_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction InvestmentPreferences_toConsumableArray(r) { return InvestmentPreferences_arrayWithoutHoles(r) || InvestmentPreferences_iterableToArray(r) || InvestmentPreferences_unsupportedIterableToArray(r) || InvestmentPreferences_nonIterableSpread(); }\nfunction InvestmentPreferences_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction InvestmentPreferences_iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction InvestmentPreferences_arrayWithoutHoles(r) { if (Array.isArray(r)) return InvestmentPreferences_arrayLikeToArray(r); }\nfunction InvestmentPreferences_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction InvestmentPreferences_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? InvestmentPreferences_ownKeys(Object(t), !0).forEach(function (r) { InvestmentPreferences_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : InvestmentPreferences_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction InvestmentPreferences_defineProperty(e, r, t) { return (r = InvestmentPreferences_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction InvestmentPreferences_toPropertyKey(t) { var i = InvestmentPreferences_toPrimitive(t, "string"); return "symbol" == InvestmentPreferences_typeof(i) ? i : i + ""; }\nfunction InvestmentPreferences_toPrimitive(t, r) { if ("object" != InvestmentPreferences_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != InvestmentPreferences_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction InvestmentPreferences_slicedToArray(r, e) { return InvestmentPreferences_arrayWithHoles(r) || InvestmentPreferences_iterableToArrayLimit(r, e) || InvestmentPreferences_unsupportedIterableToArray(r, e) || InvestmentPreferences_nonIterableRest(); }\nfunction InvestmentPreferences_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction InvestmentPreferences_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return InvestmentPreferences_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? InvestmentPreferences_arrayLikeToArray(r, a) : void 0; } }\nfunction InvestmentPreferences_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction InvestmentPreferences_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction InvestmentPreferences_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\n\n/**\r\n * Investment Preferences Component\r\n * \r\n * Allows users to set their investment preferences and risk tolerance\r\n */\n\nfunction InvestmentPreferences() {\n  var _useAppContext = useAppContext(),\n    preferences = _useAppContext.preferences,\n    savePreferences = _useAppContext.savePreferences,\n    fetchPreferences = _useAppContext.fetchPreferences,\n    isLoading = _useAppContext.isLoading,\n    error = _useAppContext.error;\n  var _useState = (0,react.useState)({\n      riskTolerance: \'moderate\',\n      investmentGoals: [\'retirement\', \'growth\'],\n      investmentHorizon: \'5-10\',\n      monthlyContribution: 500,\n      autoRebalance: true,\n      preferredSectors: [\'technology\', \'healthcare\', \'finance\']\n    }),\n    _useState2 = InvestmentPreferences_slicedToArray(_useState, 2),\n    formValues = _useState2[0],\n    setFormValues = _useState2[1];\n  var _useState3 = (0,react.useState)(false),\n    _useState4 = InvestmentPreferences_slicedToArray(_useState3, 2),\n    formSubmitted = _useState4[0],\n    setFormSubmitted = _useState4[1];\n\n  // Available options for form selects\n  var riskOptions = [\'conservative\', \'moderate\', \'aggressive\'];\n  var goalOptions = [\'retirement\', \'growth\', \'income\', \'preservation\', \'education\'];\n  var horizonOptions = [\'0-2\', \'2-5\', \'5-10\', \'10+\'];\n  var sectorOptions = [\'technology\', \'healthcare\', \'finance\', \'consumer\', \'industrial\', \'energy\', \'utilities\', \'materials\', \'real-estate\', \'communication\'];\n\n  // Load preferences from context when component mounts\n  (0,react.useEffect)(function () {\n    fetchPreferences();\n  }, []);\n\n  // Update form values when preferences are loaded\n  (0,react.useEffect)(function () {\n    if (preferences) {\n      setFormValues(preferences);\n    }\n  }, [preferences]);\n\n  // Handle form input changes\n  var handleInputChange = function handleInputChange(e) {\n    var _e$target = e.target,\n      name = _e$target.name,\n      value = _e$target.value,\n      type = _e$target.type,\n      checked = _e$target.checked;\n    if (type === \'checkbox\') {\n      setFormValues(InvestmentPreferences_objectSpread(InvestmentPreferences_objectSpread({}, formValues), {}, InvestmentPreferences_defineProperty({}, name, checked)));\n    } else {\n      setFormValues(InvestmentPreferences_objectSpread(InvestmentPreferences_objectSpread({}, formValues), {}, InvestmentPreferences_defineProperty({}, name, value)));\n    }\n  };\n\n  // Handle multi-select changes (for checkboxes)\n  var handleMultiSelectChange = function handleMultiSelectChange(e) {\n    var _e$target2 = e.target,\n      value = _e$target2.value,\n      checked = _e$target2.checked;\n    var investmentGoals = formValues.investmentGoals;\n    if (checked) {\n      setFormValues(InvestmentPreferences_objectSpread(InvestmentPreferences_objectSpread({}, formValues), {}, {\n        investmentGoals: [].concat(InvestmentPreferences_toConsumableArray(investmentGoals), [value])\n      }));\n    } else {\n      setFormValues(InvestmentPreferences_objectSpread(InvestmentPreferences_objectSpread({}, formValues), {}, {\n        investmentGoals: investmentGoals.filter(function (goal) {\n          return goal !== value;\n        })\n      }));\n    }\n  };\n\n  // Handle sector preference changes\n  var handleSectorChange = function handleSectorChange(e) {\n    var _e$target3 = e.target,\n      value = _e$target3.value,\n      checked = _e$target3.checked;\n    var preferredSectors = formValues.preferredSectors;\n    if (checked) {\n      setFormValues(InvestmentPreferences_objectSpread(InvestmentPreferences_objectSpread({}, formValues), {}, {\n        preferredSectors: [].concat(InvestmentPreferences_toConsumableArray(preferredSectors), [value])\n      }));\n    } else {\n      setFormValues(InvestmentPreferences_objectSpread(InvestmentPreferences_objectSpread({}, formValues), {}, {\n        preferredSectors: preferredSectors.filter(function (sector) {\n          return sector !== value;\n        })\n      }));\n    }\n  };\n\n  // Handle form submission\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = InvestmentPreferences_asyncToGenerator(/*#__PURE__*/InvestmentPreferences_regeneratorRuntime().mark(function _callee(e) {\n      var result;\n      return InvestmentPreferences_regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n\n            // Save preferences using context method\n            _context.next = 3;\n            return savePreferences(formValues);\n          case 3:\n            result = _context.sent;\n            if (result.success) {\n              setFormSubmitted(true);\n\n              // Reset form submitted state after 3 seconds\n              setTimeout(function () {\n                setFormSubmitted(false);\n              }, 3000);\n            }\n          case 5:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  // Reset to default values\n  var handleReset = function handleReset() {\n    setFormValues({\n      riskTolerance: \'moderate\',\n      investmentGoals: [\'retirement\', \'growth\'],\n      investmentHorizon: \'5-10\',\n      monthlyContribution: 500,\n      autoRebalance: true,\n      preferredSectors: [\'technology\', \'healthcare\', \'finance\']\n    });\n  };\n  if (isLoading && !preferences) {\n    return /*#__PURE__*/(0,jsx_runtime.jsx)(common_Loading, {\n      message: "Loading investment preferences..."\n    });\n  }\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n    className: "card shadow-sm",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "card-header bg-white",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("h5", {\n        className: "card-title mb-0",\n        children: "Investment Preferences"\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "card-body",\n      children: [error && /*#__PURE__*/(0,jsx_runtime.jsx)(common_ErrorMessage, {\n        message: error,\n        onRetry: fetchPreferences\n      }), formSubmitted && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "alert alert-success mb-4",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n          className: "bi bi-check-circle me-2"\n        }), "Your investment preferences have been saved successfully!"]\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)("form", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "mb-4",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n            className: "form-label fw-bold",\n            children: "Risk Tolerance"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "d-flex flex-column gap-2",\n            children: riskOptions.map(function (option) {\n              return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "form-check",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n                  className: "form-check-input",\n                  type: "radio",\n                  name: "riskTolerance",\n                  id: "risk-".concat(option),\n                  value: option,\n                  checked: formValues.riskTolerance === option,\n                  onChange: handleInputChange\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("label", {\n                  className: "form-check-label text-capitalize",\n                  htmlFor: "risk-".concat(option),\n                  children: [option, option === \'conservative\' && \' - Lower risk, lower potential returns\', option === \'moderate\' && \' - Balanced risk and potential returns\', option === \'aggressive\' && \' - Higher risk, higher potential returns\']\n                })]\n              }, option);\n            })\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "mb-4",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n            className: "form-label fw-bold",\n            children: "Investment Goals"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "row",\n            children: goalOptions.map(function (goal) {\n              return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "col-md-6",\n                children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "form-check",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n                    className: "form-check-input",\n                    type: "checkbox",\n                    id: "goal-".concat(goal),\n                    value: goal,\n                    checked: formValues.investmentGoals.includes(goal),\n                    onChange: handleMultiSelectChange\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n                    className: "form-check-label text-capitalize",\n                    htmlFor: "goal-".concat(goal),\n                    children: goal\n                  })]\n                })\n              }, goal);\n            })\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "mb-4",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n            htmlFor: "investmentHorizon",\n            className: "form-label fw-bold",\n            children: "Investment Horizon"\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("select", {\n            className: "form-select",\n            id: "investmentHorizon",\n            name: "investmentHorizon",\n            value: formValues.investmentHorizon,\n            onChange: handleInputChange,\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("option", {\n              value: "0-2",\n              children: "Less than 2 years"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("option", {\n              value: "2-5",\n              children: "2-5 years"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("option", {\n              value: "5-10",\n              children: "5-10 years"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("option", {\n              value: "10+",\n              children: "More than 10 years"\n            })]\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "mb-4",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n            htmlFor: "monthlyContribution",\n            className: "form-label fw-bold",\n            children: "Monthly Contribution ($)"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n            type: "number",\n            className: "form-control",\n            id: "monthlyContribution",\n            name: "monthlyContribution",\n            value: formValues.monthlyContribution,\n            onChange: handleInputChange,\n            min: "0",\n            step: "50"\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "mb-4",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "form-check form-switch",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n              className: "form-check-input",\n              type: "checkbox",\n              id: "autoRebalance",\n              name: "autoRebalance",\n              checked: formValues.autoRebalance,\n              onChange: handleInputChange\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n              className: "form-check-label fw-bold",\n              htmlFor: "autoRebalance",\n              children: "Auto-rebalance portfolio quarterly"\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "form-text",\n            children: "Automatically adjust your portfolio to maintain your target asset allocation."\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "mb-4",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n            className: "form-label fw-bold",\n            children: "Preferred Sectors"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "row",\n            children: sectorOptions.map(function (sector) {\n              return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "col-md-4",\n                children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "form-check",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n                    className: "form-check-input",\n                    type: "checkbox",\n                    id: "sector-".concat(sector),\n                    value: sector,\n                    checked: formValues.preferredSectors.includes(sector),\n                    onChange: handleSectorChange\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n                    className: "form-check-label text-capitalize",\n                    htmlFor: "sector-".concat(sector),\n                    children: sector\n                  })]\n                })\n              }, sector);\n            })\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "d-grid gap-2 d-md-flex justify-content-md-end",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n            type: "button",\n            className: "btn btn-outline-secondary",\n            onClick: handleReset,\n            children: "Reset to Defaults"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n            type: "submit",\n            className: "btn btn-primary",\n            disabled: isLoading,\n            children: isLoading ? /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "spinner-border spinner-border-sm me-2",\n                role: "status",\n                "aria-hidden": "true"\n              }), "Saving..."]\n            }) : \'Save Preferences\'\n          })]\n        })]\n      })]\n    })]\n  });\n}\n/* harmony default export */ const components_InvestmentPreferences = (InvestmentPreferences);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/clock.js\nvar clock = __webpack_require__(27235);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/refresh-cw.js\nvar refresh_cw = __webpack_require__(15977);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/save.js\nvar save = __webpack_require__(48852);\n// EXTERNAL MODULE: ./node_modules/lucide-react/dist/esm/icons/info.js\nvar info = __webpack_require__(97213);\n;// ./wwwroot/js/react/components/ModernInvestmentPreferences.tsx\nfunction ModernInvestmentPreferences_typeof(o) { "@babel/helpers - typeof"; return ModernInvestmentPreferences_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, ModernInvestmentPreferences_typeof(o); }\nfunction ModernInvestmentPreferences_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ ModernInvestmentPreferences_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == ModernInvestmentPreferences_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(ModernInvestmentPreferences_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction ModernInvestmentPreferences_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction ModernInvestmentPreferences_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { ModernInvestmentPreferences_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { ModernInvestmentPreferences_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction ModernInvestmentPreferences_toConsumableArray(r) { return ModernInvestmentPreferences_arrayWithoutHoles(r) || ModernInvestmentPreferences_iterableToArray(r) || ModernInvestmentPreferences_unsupportedIterableToArray(r) || ModernInvestmentPreferences_nonIterableSpread(); }\nfunction ModernInvestmentPreferences_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction ModernInvestmentPreferences_iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction ModernInvestmentPreferences_arrayWithoutHoles(r) { if (Array.isArray(r)) return ModernInvestmentPreferences_arrayLikeToArray(r); }\nfunction ModernInvestmentPreferences_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction ModernInvestmentPreferences_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ModernInvestmentPreferences_ownKeys(Object(t), !0).forEach(function (r) { ModernInvestmentPreferences_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ModernInvestmentPreferences_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction ModernInvestmentPreferences_defineProperty(e, r, t) { return (r = ModernInvestmentPreferences_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction ModernInvestmentPreferences_toPropertyKey(t) { var i = ModernInvestmentPreferences_toPrimitive(t, "string"); return "symbol" == ModernInvestmentPreferences_typeof(i) ? i : i + ""; }\nfunction ModernInvestmentPreferences_toPrimitive(t, r) { if ("object" != ModernInvestmentPreferences_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != ModernInvestmentPreferences_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction ModernInvestmentPreferences_slicedToArray(r, e) { return ModernInvestmentPreferences_arrayWithHoles(r) || ModernInvestmentPreferences_iterableToArrayLimit(r, e) || ModernInvestmentPreferences_unsupportedIterableToArray(r, e) || ModernInvestmentPreferences_nonIterableRest(); }\nfunction ModernInvestmentPreferences_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction ModernInvestmentPreferences_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return ModernInvestmentPreferences_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? ModernInvestmentPreferences_arrayLikeToArray(r, a) : void 0; } }\nfunction ModernInvestmentPreferences_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction ModernInvestmentPreferences_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction ModernInvestmentPreferences_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\nvar ModernInvestmentPreferences = function ModernInvestmentPreferences() {\n  var _useState = (0,react.useState)({\n      riskTolerance: 5,\n      investmentHorizon: \'5-10\',\n      investmentAmount: 10000,\n      preferredSectors: [],\n      ethicalInvesting: false,\n      dividendPreference: false,\n      growthPreference: true,\n      internationalExposure: 20,\n      bondAllocation: 30,\n      stockAllocation: 60,\n      alternativeAllocation: 10\n    }),\n    _useState2 = ModernInvestmentPreferences_slicedToArray(_useState, 2),\n    formData = _useState2[0],\n    setFormData = _useState2[1];\n  var _useState3 = (0,react.useState)(false),\n    _useState4 = ModernInvestmentPreferences_slicedToArray(_useState3, 2),\n    isSubmitting = _useState4[0],\n    setIsSubmitting = _useState4[1];\n  var _useState5 = (0,react.useState)(false),\n    _useState6 = ModernInvestmentPreferences_slicedToArray(_useState5, 2),\n    isLoading = _useState6[0],\n    setIsLoading = _useState6[1];\n  var sectors = [\'Technology\', \'Healthcare\', \'Financial Services\', \'Consumer Goods\', \'Energy\', \'Real Estate\', \'Industrials\', \'Materials\', \'Utilities\', \'Communication Services\', \'Consumer Discretionary\', \'Consumer Staples\'];\n  var investmentHorizons = [{\n    value: \'1-3\',\n    label: \'1-3 years\',\n    description: \'Short-term goals\'\n  }, {\n    value: \'3-5\',\n    label: \'3-5 years\',\n    description: \'Medium-term goals\'\n  }, {\n    value: \'5-10\',\n    label: \'5-10 years\',\n    description: \'Long-term goals\'\n  }, {\n    value: \'10+\',\n    label: \'10+ years\',\n    description: \'Retirement planning\'\n  }];\n  var handleInputChange = function handleInputChange(field, value) {\n    setFormData(function (prev) {\n      return ModernInvestmentPreferences_objectSpread(ModernInvestmentPreferences_objectSpread({}, prev), {}, ModernInvestmentPreferences_defineProperty({}, field, value));\n    });\n  };\n  var handleSectorToggle = function handleSectorToggle(sector) {\n    setFormData(function (prev) {\n      return ModernInvestmentPreferences_objectSpread(ModernInvestmentPreferences_objectSpread({}, prev), {}, {\n        preferredSectors: prev.preferredSectors.includes(sector) ? prev.preferredSectors.filter(function (s) {\n          return s !== sector;\n        }) : [].concat(ModernInvestmentPreferences_toConsumableArray(prev.preferredSectors), [sector])\n      });\n    });\n  };\n  var validateAllocation = function validateAllocation() {\n    var total = formData.bondAllocation + formData.stockAllocation + formData.alternativeAllocation;\n    return Math.abs(total - 100) < 1; // Allow for small rounding differences\n  };\n  var getRiskProfile = function getRiskProfile() {\n    if (formData.riskTolerance <= 3) return {\n      level: \'Conservative\',\n      color: \'var(--ezana-success)\',\n      icon: /*#__PURE__*/(0,jsx_runtime.jsx)(shield/* default */.A, {\n        size: 20\n      })\n    };\n    if (formData.riskTolerance <= 6) return {\n      level: \'Moderate\',\n      color: \'var(--ezana-warning)\',\n      icon: /*#__PURE__*/(0,jsx_runtime.jsx)(target/* default */.A, {\n        size: 20\n      })\n    };\n    return {\n      level: \'Aggressive\',\n      color: \'var(--ezana-danger)\',\n      icon: /*#__PURE__*/(0,jsx_runtime.jsx)(trending_up/* default */.A, {\n        size: 20\n      })\n    };\n  };\n  var getRecommendations = function getRecommendations() {\n    var riskProfile = getRiskProfile();\n    var recommendations = [];\n    if (formData.riskTolerance <= 3) {\n      recommendations.push(\'Focus on high-quality bonds and dividend-paying stocks\', \'Consider index funds for broad market exposure\', \'Maintain higher cash reserves for stability\');\n    } else if (formData.riskTolerance <= 6) {\n      recommendations.push(\'Balanced portfolio with growth and value stocks\', \'Moderate bond allocation for income generation\', \'Consider sector-specific ETFs for diversification\');\n    } else {\n      recommendations.push(\'Higher allocation to growth stocks and emerging markets\', \'Consider alternative investments for diversification\', \'Regular rebalancing to manage volatility\');\n    }\n    return recommendations;\n  };\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = ModernInvestmentPreferences_asyncToGenerator(/*#__PURE__*/ModernInvestmentPreferences_regeneratorRuntime().mark(function _callee(e) {\n      return ModernInvestmentPreferences_regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n            if (validateAllocation()) {\n              _context.next = 4;\n              break;\n            }\n            dist/* toast */.oR.error(\'Asset allocation must equal 100%\');\n            return _context.abrupt("return");\n          case 4:\n            setIsSubmitting(true);\n            _context.prev = 5;\n            _context.next = 8;\n            return new Promise(function (resolve) {\n              return setTimeout(resolve, 1500);\n            });\n          case 8:\n            dist/* toast */.oR.success(\'Investment preferences saved successfully!\');\n\n            // Here you would typically save to your backend\n            console.log(\'Saving preferences:\', formData);\n            _context.next = 15;\n            break;\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context["catch"](5);\n            dist/* toast */.oR.error(\'Failed to save preferences. Please try again.\');\n          case 15:\n            _context.prev = 15;\n            setIsSubmitting(false);\n            return _context.finish(15);\n          case 18:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee, null, [[5, 12, 15, 18]]);\n    }));\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var handleReset = function handleReset() {\n    setFormData({\n      riskTolerance: 5,\n      investmentHorizon: \'5-10\',\n      investmentAmount: 10000,\n      preferredSectors: [],\n      ethicalInvesting: false,\n      dividendPreference: false,\n      growthPreference: true,\n      internationalExposure: 20,\n      bondAllocation: 30,\n      stockAllocation: 60,\n      alternativeAllocation: 10\n    });\n    dist/* toast */.oR.success(\'Preferences reset to defaults\');\n  };\n  var riskProfile = getRiskProfile();\n  var recommendations = getRecommendations();\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n    className: "ezana-animate-fade-in",\n    children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "row",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "col-lg-8",\n        children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "ezana-card mb-4",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "ezana-card-header",\n            children: /*#__PURE__*/(0,jsx_runtime.jsxs)("h3", {\n              className: "ezana-text-heading-2 mb-0",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(target/* default */.A, {\n                size: 24,\n                className: "me-2"\n              }), "Investment Preferences"]\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "ezana-card-body",\n            children: /*#__PURE__*/(0,jsx_runtime.jsxs)("form", {\n              onSubmit: handleSubmit,\n              children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "ezana-form-group",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("label", {\n                  className: "ezana-form-label",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)(shield/* default */.A, {\n                    size: 18,\n                    className: "me-2"\n                  }), "Risk Tolerance Level"]\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "d-flex align-items-center gap-3 mb-2",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                    className: "ezana-text-small",\n                    style: {\n                      color: \'var(--ezana-gray-600)\'\n                    },\n                    children: "Conservative"\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n                    type: "range",\n                    className: "form-range flex-grow-1",\n                    min: "1",\n                    max: "10",\n                    value: formData.riskTolerance,\n                    onChange: function onChange(e) {\n                      return handleInputChange(\'riskTolerance\', parseInt(e.target.value));\n                    },\n                    style: {\n                      accentColor: \'var(--ezana-primary)\'\n                    }\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                    className: "ezana-text-small",\n                    style: {\n                      color: \'var(--ezana-gray-600)\'\n                    },\n                    children: "Aggressive"\n                  })]\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "d-flex justify-content-between",\n                  children: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function (num) {\n                    return /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                      className: "ezana-text-small",\n                      style: {\n                        color: \'var(--ezana-gray-500)\'\n                      },\n                      children: num\n                    }, num);\n                  })\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "ezana-form-group",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("label", {\n                  className: "ezana-form-label",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)(clock/* default */.A, {\n                    size: 18,\n                    className: "me-2"\n                  }), "Investment Horizon"]\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "row",\n                  children: investmentHorizons.map(function (horizon) {\n                    return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                      className: "col-md-6 mb-3",\n                      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                        className: "form-check",\n                        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n                          className: "form-check-input",\n                          type: "radio",\n                          name: "investmentHorizon",\n                          id: horizon.value,\n                          value: horizon.value,\n                          checked: formData.investmentHorizon === horizon.value,\n                          onChange: function onChange(e) {\n                            return handleInputChange(\'investmentHorizon\', e.target.value);\n                          }\n                        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("label", {\n                          className: "form-check-label",\n                          htmlFor: horizon.value,\n                          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                            className: "fw-semibold",\n                            children: horizon.label\n                          }), /*#__PURE__*/(0,jsx_runtime.jsx)("small", {\n                            className: "text-muted",\n                            children: horizon.description\n                          })]\n                        })]\n                      })\n                    }, horizon.value);\n                  })\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "ezana-form-group",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("label", {\n                  className: "ezana-form-label",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)(dollar_sign/* default */.A, {\n                    size: 18,\n                    className: "me-2"\n                  }), "Initial Investment Amount"]\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "input-group",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                    className: "input-group-text",\n                    children: "$"\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n                    type: "number",\n                    className: "ezana-form-input",\n                    value: formData.investmentAmount,\n                    onChange: function onChange(e) {\n                      return handleInputChange(\'investmentAmount\', parseInt(e.target.value));\n                    },\n                    min: "1000",\n                    step: "1000"\n                  })]\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "ezana-form-group",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("label", {\n                  className: "ezana-form-label",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)(pie_chart/* default */.A, {\n                    size: 18,\n                    className: "me-2"\n                  }), "Preferred Investment Sectors"]\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "row",\n                  children: sectors.map(function (sector) {\n                    return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                      className: "col-md-4 mb-2",\n                      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                        className: "form-check",\n                        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n                          className: "form-check-input",\n                          type: "checkbox",\n                          id: sector,\n                          checked: formData.preferredSectors.includes(sector),\n                          onChange: function onChange() {\n                            return handleSectorToggle(sector);\n                          }\n                        }), /*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n                          className: "form-check-label",\n                          htmlFor: sector,\n                          children: sector\n                        })]\n                      })\n                    }, sector);\n                  })\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "ezana-form-group",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("label", {\n                  className: "ezana-form-label",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)(bar_chart_3/* default */.A, {\n                    size: 18,\n                    className: "me-2"\n                  }), "Investment Preferences"]\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "row",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                    className: "col-md-4 mb-3",\n                    children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                      className: "form-check",\n                      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n                        className: "form-check-input",\n                        type: "checkbox",\n                        id: "ethicalInvesting",\n                        checked: formData.ethicalInvesting,\n                        onChange: function onChange(e) {\n                          return handleInputChange(\'ethicalInvesting\', e.target.checked);\n                        }\n                      }), /*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n                        className: "form-check-label",\n                        htmlFor: "ethicalInvesting",\n                        children: "Ethical/ESG Investing"\n                      })]\n                    })\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                    className: "col-md-4 mb-3",\n                    children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                      className: "form-check",\n                      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n                        className: "form-check-input",\n                        type: "checkbox",\n                        id: "dividendPreference",\n                        checked: formData.dividendPreference,\n                        onChange: function onChange(e) {\n                          return handleInputChange(\'dividendPreference\', e.target.checked);\n                        }\n                      }), /*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n                        className: "form-check-label",\n                        htmlFor: "dividendPreference",\n                        children: "Dividend Preference"\n                      })]\n                    })\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                    className: "col-md-4 mb-3",\n                    children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                      className: "form-check",\n                      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n                        className: "form-check-input",\n                        type: "checkbox",\n                        id: "growthPreference",\n                        checked: formData.growthPreference,\n                        onChange: function onChange(e) {\n                          return handleInputChange(\'growthPreference\', e.target.checked);\n                        }\n                      }), /*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n                        className: "form-check-label",\n                        htmlFor: "growthPreference",\n                        children: "Growth Preference"\n                      })]\n                    })\n                  })]\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "ezana-form-group",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("label", {\n                  className: "ezana-form-label",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)(pie_chart/* default */.A, {\n                    size: 18,\n                    className: "me-2"\n                  }), "Asset Allocation (must equal 100%)"]\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "row",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                    className: "col-md-4 mb-3",\n                    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n                      className: "ezana-form-label",\n                      children: "Bonds (%)"\n                    }), /*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n                      type: "number",\n                      className: "ezana-form-input",\n                      value: formData.bondAllocation,\n                      onChange: function onChange(e) {\n                        return handleInputChange(\'bondAllocation\', parseInt(e.target.value));\n                      },\n                      min: "0",\n                      max: "100"\n                    })]\n                  }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                    className: "col-md-4 mb-3",\n                    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n                      className: "ezana-form-label",\n                      children: "Stocks (%)"\n                    }), /*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n                      type: "number",\n                      className: "ezana-form-input",\n                      value: formData.stockAllocation,\n                      onChange: function onChange(e) {\n                        return handleInputChange(\'stockAllocation\', parseInt(e.target.value));\n                      },\n                      min: "0",\n                      max: "100"\n                    })]\n                  }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                    className: "col-md-4 mb-3",\n                    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n                      className: "ezana-form-label",\n                      children: "Alternatives (%)"\n                    }), /*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n                      type: "number",\n                      className: "ezana-form-input",\n                      value: formData.alternativeAllocation,\n                      onChange: function onChange(e) {\n                        return handleInputChange(\'alternativeAllocation\', parseInt(e.target.value));\n                      },\n                      min: "0",\n                      max: "100"\n                    })]\n                  })]\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "ezana-progress mb-2",\n                  children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                    className: "ezana-progress-bar",\n                    style: {\n                      width: "".concat(formData.bondAllocation, "%")\n                    }\n                  })\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "d-flex justify-content-between mb-3",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n                    className: "ezana-text-small",\n                    children: ["Bonds: ", formData.bondAllocation, "%"]\n                  }), /*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n                    className: "ezana-text-small",\n                    children: ["Stocks: ", formData.stockAllocation, "%"]\n                  }), /*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n                    className: "ezana-text-small",\n                    children: ["Alternatives: ", formData.alternativeAllocation, "%"]\n                  })]\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "d-flex justify-content-between",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n                    className: "ezana-text-small",\n                    children: ["Total: ", formData.bondAllocation + formData.stockAllocation + formData.alternativeAllocation, "%"]\n                  }), !validateAllocation() && /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                    className: "ezana-text-small",\n                    style: {\n                      color: \'var(--ezana-danger)\'\n                    },\n                    children: "\\u26A0\\uFE0F Allocation must equal 100%"\n                  })]\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "ezana-form-group",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("label", {\n                  className: "ezana-form-label",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)(globe/* default */.A, {\n                    size: 18,\n                    className: "me-2"\n                  }), "International Market Exposure"]\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "d-flex align-items-center gap-3 mb-2",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                    className: "ezana-text-small",\n                    style: {\n                      color: \'var(--ezana-gray-600)\'\n                    },\n                    children: "0%"\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n                    type: "range",\n                    className: "form-range flex-grow-1",\n                    min: "0",\n                    max: "50",\n                    value: formData.internationalExposure,\n                    onChange: function onChange(e) {\n                      return handleInputChange(\'internationalExposure\', parseInt(e.target.value));\n                    },\n                    style: {\n                      accentColor: \'var(--ezana-primary)\'\n                    }\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                    className: "ezana-text-small",\n                    style: {\n                      color: \'var(--ezana-gray-600)\'\n                    },\n                    children: "50%"\n                  })]\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "text-center",\n                  children: /*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n                    className: "ezana-text-heading-3",\n                    style: {\n                      color: \'var(--ezana-primary)\'\n                    },\n                    children: [formData.internationalExposure, "%"]\n                  })\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "d-flex gap-3 pt-3",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n                  type: "submit",\n                  className: "ezana-btn ezana-btn-primary",\n                  disabled: isSubmitting || !validateAllocation(),\n                  children: isSubmitting ? /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n                    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(refresh_cw/* default */.A, {\n                      size: 16,\n                      className: "me-2 animate-spin"\n                    }), "Saving..."]\n                  }) : /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n                    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(save/* default */.A, {\n                      size: 16,\n                      className: "me-2"\n                    }), "Save Preferences"]\n                  })\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("button", {\n                  type: "button",\n                  className: "ezana-btn ezana-btn-secondary",\n                  onClick: handleReset,\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)(refresh_cw/* default */.A, {\n                    size: 16,\n                    className: "me-2"\n                  }), "Reset to Defaults"]\n                })]\n              })]\n            })\n          })]\n        })\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "col-lg-4",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "ezana-card mb-4",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "ezana-card-header",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("h5", {\n              className: "ezana-text-heading-3 mb-0",\n              children: "Risk Profile"\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "ezana-card-body text-center",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "rounded-circle d-flex align-items-center justify-content-center mx-auto mb-3",\n              style: {\n                width: \'80px\',\n                height: \'80px\',\n                backgroundColor: "".concat(riskProfile.color, "20"),\n                color: riskProfile.color\n              },\n              children: riskProfile.icon\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n              className: "ezana-text-heading-3 mb-2",\n              children: riskProfile.level\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("p", {\n              className: "ezana-text-body",\n              style: {\n                color: \'var(--ezana-gray-600)\'\n              },\n              children: ["Risk Level: ", formData.riskTolerance, "/10"]\n            })]\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "ezana-card mb-4",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "ezana-card-header",\n            children: /*#__PURE__*/(0,jsx_runtime.jsxs)("h5", {\n              className: "ezana-text-heading-3 mb-0",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(info/* default */.A, {\n                size: 18,\n                className: "me-2"\n              }), "Recommendations"]\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "ezana-card-body",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("ul", {\n              className: "list-unstyled",\n              children: recommendations.map(function (recommendation, index) {\n                return /*#__PURE__*/(0,jsx_runtime.jsxs)("li", {\n                  className: "d-flex align-items-start gap-2 mb-3",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)(circle_check_big/* default */.A, {\n                    size: 16,\n                    className: "mt-1",\n                    style: {\n                      color: \'var(--ezana-success)\',\n                      flexShrink: 0\n                    }\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                    className: "ezana-text-small",\n                    children: recommendation\n                  })]\n                }, index);\n              })\n            })\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "ezana-card",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "ezana-card-header",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("h5", {\n              className: "ezana-text-heading-3 mb-0",\n              children: "Quick Stats"\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "ezana-card-body",\n            children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "row text-center",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "col-6 mb-3",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "ezana-metric-value",\n                  style: {\n                    fontSize: \'1.5rem\',\n                    marginBottom: \'0.25rem\'\n                  },\n                  children: ["$", formData.investmentAmount.toLocaleString()]\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "ezana-text-caption",\n                  children: "Investment"\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "col-6 mb-3",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "ezana-metric-value",\n                  style: {\n                    fontSize: \'1.5rem\',\n                    marginBottom: \'0.25rem\'\n                  },\n                  children: formData.preferredSectors.length\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "ezana-text-caption",\n                  children: "Sectors"\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "col-6",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "ezana-metric-value",\n                  style: {\n                    fontSize: \'1.5rem\',\n                    marginBottom: \'0.25rem\'\n                  },\n                  children: [formData.internationalExposure, "%"]\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "ezana-text-caption",\n                  children: "International"\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "col-6",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "ezana-metric-value",\n                  style: {\n                    fontSize: \'1.5rem\',\n                    marginBottom: \'0.25rem\'\n                  },\n                  children: [formData.bondAllocation, "%"]\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "ezana-text-caption",\n                  children: "Bonds"\n                })]\n              })]\n            })\n          })]\n        })]\n      })]\n    })\n  });\n};\n/* harmony default export */ const components_ModernInvestmentPreferences = (ModernInvestmentPreferences);\n// EXTERNAL MODULE: ./node_modules/axios/lib/axios.js + 9 modules\nvar axios = __webpack_require__(33319);\n;// ./wwwroot/js/react/services/plaidApi.ts\nfunction plaidApi_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ plaidApi_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == plaidApi_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(plaidApi_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction plaidApi_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction plaidApi_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { plaidApi_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { plaidApi_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction plaidApi_defineProperty(e, r, t) { return (r = plaidApi_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction plaidApi_typeof(o) { "@babel/helpers - typeof"; return plaidApi_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, plaidApi_typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, plaidApi_toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }\nfunction plaidApi_toPropertyKey(t) { var i = plaidApi_toPrimitive(t, "string"); return "symbol" == plaidApi_typeof(i) ? i : i + ""; }\nfunction plaidApi_toPrimitive(t, r) { if ("object" != plaidApi_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != plaidApi_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\n\n\n// Plaid API Service for Financial Data Integration\n// Using sandbox environment for testing\n\n// API Configuration\nvar PLAID_CONFIG = {\n  CLIENT_ID: \'689cbb13c94f320025624ac0\',\n  SANDBOX_SECRET: \'bd9b488d967507564c0aa646d9a852\',\n  BASE_URL: \'https://sandbox.plaid.com\',\n  ENVIRONMENT: \'sandbox\'\n};\n\n// Plaid API Types\n// Mock data for testing when Plaid API is not available\nvar PlaidMockDataGenerator = /*#__PURE__*/function () {\n  function PlaidMockDataGenerator() {\n    _classCallCheck(this, PlaidMockDataGenerator);\n  }\n  return _createClass(PlaidMockDataGenerator, [{\n    key: "generateAccount",\n    value: function generateAccount() {\n      var accountTypes = [\'depository\', \'credit\', \'loan\', \'investment\'];\n      var accountSubtypes = [\'checking\', \'savings\', \'credit card\', \'mortgage\', \'student loan\'];\n      return {\n        id: "mock_account_".concat(Math.random().toString(36).substr(2, 9)),\n        name: "Mock ".concat(accountSubtypes[Math.floor(Math.random() * accountSubtypes.length)], " Account"),\n        mask: Math.floor(Math.random() * 10000).toString().padStart(4, \'0\'),\n        type: accountTypes[Math.floor(Math.random() * accountTypes.length)],\n        subtype: accountSubtypes[Math.floor(Math.random() * accountSubtypes.length)],\n        balances: {\n          available: Math.random() * 10000,\n          current: Math.random() * 10000,\n          limit: Math.random() * 50000,\n          iso_currency_code: \'USD\',\n          unofficial_currency_code: null\n        }\n      };\n    }\n  }, {\n    key: "generateTransaction",\n    value: function generateTransaction() {\n      var categories = [[\'Food and Drink\', \'Restaurants\'], [\'Transportation\', \'Public Transit\'], [\'Shopping\', \'Online Shopping\'], [\'Bills and Utilities\', \'Electricity\'], [\'Entertainment\', \'Movies\']];\n      return {\n        id: "mock_transaction_".concat(Math.random().toString(36).substr(2, 9)),\n        account_id: "mock_account_".concat(Math.floor(Math.random() * 3)),\n        amount: (Math.random() * 200 - 100).toFixed(2),\n        date: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString().split(\'T\')[0],\n        name: "Mock Transaction ".concat(Math.floor(Math.random() * 1000)),\n        merchant_name: "Mock Merchant ".concat(Math.floor(Math.random() * 100)),\n        category: categories[Math.floor(Math.random() * categories.length)],\n        category_id: "mock_category_".concat(Math.floor(Math.random() * 1000)),\n        pending: Math.random() > 0.8,\n        account_owner: \'Mock User\',\n        iso_currency_code: \'USD\',\n        unofficial_currency_code: undefined,\n        payment_channel: Math.random() > 0.5 ? \'online\' : \'in store\',\n        transaction_type: Math.random() > 0.5 ? \'place\' : \'special\'\n      };\n    }\n  }, {\n    key: "generateBalance",\n    value: function generateBalance() {\n      var _this = this;\n      return {\n        accounts: Array.from({\n          length: 3\n        }, function () {\n          return _this.generateAccount();\n        }),\n        item: {\n          available_products: [\'balance\', \'transactions\'],\n          billed_products: [],\n          error: null,\n          institution_id: \'mock_institution\',\n          item_id: \'mock_item\',\n          webhook: \'\'\n        },\n        request_id: "mock_request_".concat(Math.random().toString(36).substr(2, 9))\n      };\n    }\n  }, {\n    key: "generateTransactions",\n    value: function generateTransactions() {\n      var _this2 = this;\n      return {\n        accounts: Array.from({\n          length: 2\n        }, function () {\n          return _this2.generateAccount();\n        }),\n        transactions: Array.from({\n          length: 10\n        }, function () {\n          return _this2.generateTransaction();\n        }),\n        total_transactions: 10,\n        request_id: "mock_request_".concat(Math.random().toString(36).substr(2, 9))\n      };\n    }\n  }]);\n}(); // Main Plaid API Service\nvar PlaidApiService = /*#__PURE__*/function () {\n  function PlaidApiService() {\n    _classCallCheck(this, PlaidApiService);\n    plaidApi_defineProperty(this, "axiosInstance", void 0);\n    plaidApi_defineProperty(this, "mockDataGenerator", void 0);\n    plaidApi_defineProperty(this, "useMockData", false);\n    plaidApi_defineProperty(this, "accessToken", null);\n    this.axiosInstance = axios/* default */.A.create({\n      baseURL: PLAID_CONFIG.BASE_URL,\n      headers: {\n        \'Content-Type\': \'application/json\',\n        \'PLAID-CLIENT-ID\': PLAID_CONFIG.CLIENT_ID,\n        \'PLAID-SECRET\': PLAID_CONFIG.SANDBOX_SECRET\n      }\n    });\n    this.mockDataGenerator = new PlaidMockDataGenerator();\n\n    // Check if we have valid Plaid credentials\n    if (!PLAID_CONFIG.CLIENT_ID || !PLAID_CONFIG.SANDBOX_SECRET) {\n      console.warn(\'Plaid credentials not configured, using mock data\');\n      this.useMockData = true;\n    }\n  }\n\n  // Create a link token for Plaid Link\n  return _createClass(PlaidApiService, [{\n    key: "createLinkToken",\n    value: function () {\n      var _createLinkToken = plaidApi_asyncToGenerator(/*#__PURE__*/plaidApi_regeneratorRuntime().mark(function _callee(userId) {\n        var response;\n        return plaidApi_regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.useMockData) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt("return", {\n                link_token: "mock_link_token_".concat(Math.random().toString(36).substr(2, 9)),\n                expiration: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n                request_id: "mock_request_".concat(Math.random().toString(36).substr(2, 9))\n              });\n            case 2:\n              _context.prev = 2;\n              _context.next = 5;\n              return this.axiosInstance.post(\'/link/token/create\', {\n                user: {\n                  client_user_id: userId\n                },\n                client_name: \'Ezana Financial App\',\n                products: [\'transactions\', \'auth\', \'balance\'],\n                country_codes: [\'US\'],\n                language: \'en\'\n              });\n            case 5:\n              response = _context.sent;\n              return _context.abrupt("return", response.data);\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context["catch"](2);\n              console.error(\'Error creating link token:\', _context.t0);\n              throw _context.t0;\n            case 13:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, this, [[2, 9]]);\n      }));\n      function createLinkToken(_x) {\n        return _createLinkToken.apply(this, arguments);\n      }\n      return createLinkToken;\n    }() // Exchange public token for access token\n  }, {\n    key: "exchangePublicToken",\n    value: function () {\n      var _exchangePublicToken = plaidApi_asyncToGenerator(/*#__PURE__*/plaidApi_regeneratorRuntime().mark(function _callee2(publicToken) {\n        var response;\n        return plaidApi_regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!this.useMockData) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt("return", {\n                access_token: "mock_access_token_".concat(Math.random().toString(36).substr(2, 9)),\n                item_id: "mock_item_".concat(Math.random().toString(36).substr(2, 9)),\n                request_id: "mock_request_".concat(Math.random().toString(36).substr(2, 9))\n              });\n            case 2:\n              _context2.prev = 2;\n              _context2.next = 5;\n              return this.axiosInstance.post(\'/item/public_token/exchange\', {\n                public_token: publicToken\n              });\n            case 5:\n              response = _context2.sent;\n              this.accessToken = response.data.access_token;\n              return _context2.abrupt("return", response.data);\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2["catch"](2);\n              console.error(\'Error exchanging public token:\', _context2.t0);\n              throw _context2.t0;\n            case 14:\n            case "end":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[2, 10]]);\n      }));\n      function exchangePublicToken(_x2) {\n        return _exchangePublicToken.apply(this, arguments);\n      }\n      return exchangePublicToken;\n    }() // Get account balances\n  }, {\n    key: "getBalance",\n    value: function () {\n      var _getBalance = plaidApi_asyncToGenerator(/*#__PURE__*/plaidApi_regeneratorRuntime().mark(function _callee3() {\n        var response;\n        return plaidApi_regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(this.useMockData || !this.accessToken)) {\n                _context3.next = 2;\n                break;\n              }\n              return _context3.abrupt("return", this.mockDataGenerator.generateBalance());\n            case 2:\n              _context3.prev = 2;\n              _context3.next = 5;\n              return this.axiosInstance.post(\'/accounts/balance/get\', {\n                access_token: this.accessToken\n              });\n            case 5:\n              response = _context3.sent;\n              return _context3.abrupt("return", response.data);\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3["catch"](2);\n              console.error(\'Error getting balance:\', _context3.t0);\n              // Fallback to mock data\n              return _context3.abrupt("return", this.mockDataGenerator.generateBalance());\n            case 13:\n            case "end":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[2, 9]]);\n      }));\n      function getBalance() {\n        return _getBalance.apply(this, arguments);\n      }\n      return getBalance;\n    }() // Get transactions\n  }, {\n    key: "getTransactions",\n    value: function () {\n      var _getTransactions = plaidApi_asyncToGenerator(/*#__PURE__*/plaidApi_regeneratorRuntime().mark(function _callee4(startDate, endDate, accountIds) {\n        var response;\n        return plaidApi_regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(this.useMockData || !this.accessToken)) {\n                _context4.next = 2;\n                break;\n              }\n              return _context4.abrupt("return", this.mockDataGenerator.generateTransactions());\n            case 2:\n              _context4.prev = 2;\n              _context4.next = 5;\n              return this.axiosInstance.post(\'/transactions/get\', {\n                access_token: this.accessToken,\n                start_date: startDate,\n                end_date: endDate,\n                options: {\n                  account_ids: accountIds\n                }\n              });\n            case 5:\n              response = _context4.sent;\n              return _context4.abrupt("return", response.data);\n            case 9:\n              _context4.prev = 9;\n              _context4.t0 = _context4["catch"](2);\n              console.error(\'Error getting transactions:\', _context4.t0);\n              // Fallback to mock data\n              return _context4.abrupt("return", this.mockDataGenerator.generateTransactions());\n            case 13:\n            case "end":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[2, 9]]);\n      }));\n      function getTransactions(_x3, _x4, _x5) {\n        return _getTransactions.apply(this, arguments);\n      }\n      return getTransactions;\n    }() // Get institution information\n  }, {\n    key: "getInstitution",\n    value: function () {\n      var _getInstitution = plaidApi_asyncToGenerator(/*#__PURE__*/plaidApi_regeneratorRuntime().mark(function _callee5(institutionId) {\n        var response;\n        return plaidApi_regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!this.useMockData) {\n                _context5.next = 2;\n                break;\n              }\n              return _context5.abrupt("return", {\n                institution_id: institutionId,\n                name: \'Mock Bank\',\n                products: [\'auth\', \'balance\', \'transactions\'],\n                country_codes: [\'US\'],\n                url: \'https://mockbank.com\',\n                primary_color: \'#0066cc\',\n                logo: \'https://mockbank.com/logo.png\',\n                routing_numbers: [\'123456789\'],\n                oauth: false\n              });\n            case 2:\n              _context5.prev = 2;\n              _context5.next = 5;\n              return this.axiosInstance.post(\'/institutions/get_by_id\', {\n                institution_id: institutionId,\n                country_codes: [\'US\'],\n                options: {\n                  include_optional_metadata: true\n                }\n              });\n            case 5:\n              response = _context5.sent;\n              return _context5.abrupt("return", response.data.institution);\n            case 9:\n              _context5.prev = 9;\n              _context5.t0 = _context5["catch"](2);\n              console.error(\'Error getting institution:\', _context5.t0);\n              throw _context5.t0;\n            case 13:\n            case "end":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[2, 9]]);\n      }));\n      function getInstitution(_x6) {\n        return _getInstitution.apply(this, arguments);\n      }\n      return getInstitution;\n    }() // Set access token manually (for testing)\n  }, {\n    key: "setAccessToken",\n    value: function setAccessToken(token) {\n      this.accessToken = token;\n    }\n\n    // Get current access token\n  }, {\n    key: "getAccessToken",\n    value: function getAccessToken() {\n      return this.accessToken;\n    }\n\n    // Toggle between mock and real data\n  }, {\n    key: "toggleMockData",\n    value: function toggleMockData() {\n      this.useMockData = !this.useMockData;\n      console.log("Plaid API using ".concat(this.useMockData ? \'mock\' : \'real\', " data"));\n    }\n\n    // Get API status\n  }, {\n    key: "getApiStatus",\n    value: function getApiStatus() {\n      return {\n        configured: !!(PLAID_CONFIG.CLIENT_ID && PLAID_CONFIG.SANDBOX_SECRET),\n        environment: PLAID_CONFIG.ENVIRONMENT,\n        baseUrl: PLAID_CONFIG.BASE_URL,\n        usingMockData: this.useMockData,\n        hasAccessToken: !!this.accessToken\n      };\n    }\n\n    // Test connection\n  }, {\n    key: "testConnection",\n    value: function () {\n      var _testConnection = plaidApi_asyncToGenerator(/*#__PURE__*/plaidApi_regeneratorRuntime().mark(function _callee6() {\n        return plaidApi_regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              if (!this.useMockData) {\n                _context6.next = 3;\n                break;\n              }\n              return _context6.abrupt("return", true);\n            case 3:\n              _context6.next = 5;\n              return this.createLinkToken(\'test_user\');\n            case 5:\n              return _context6.abrupt("return", true);\n            case 8:\n              _context6.prev = 8;\n              _context6.t0 = _context6["catch"](0);\n              console.error(\'Plaid API connection test failed:\', _context6.t0);\n              return _context6.abrupt("return", false);\n            case 12:\n            case "end":\n              return _context6.stop();\n          }\n        }, _callee6, this, [[0, 8]]);\n      }));\n      function testConnection() {\n        return _testConnection.apply(this, arguments);\n      }\n      return testConnection;\n    }()\n  }]);\n}();\n\n// Create and export service instance\nvar plaidApiService = new PlaidApiService();\n\n// Export for direct access\n/* harmony default export */ const plaidApi = ((/* unused pure expression or super */ null && (plaidApiService)));\n;// ./wwwroot/js/react/components/PlaidDemo.tsx\nfunction PlaidDemo_typeof(o) { "@babel/helpers - typeof"; return PlaidDemo_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, PlaidDemo_typeof(o); }\nfunction PlaidDemo_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ PlaidDemo_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == PlaidDemo_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(PlaidDemo_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction PlaidDemo_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction PlaidDemo_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { PlaidDemo_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { PlaidDemo_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction PlaidDemo_slicedToArray(r, e) { return PlaidDemo_arrayWithHoles(r) || PlaidDemo_iterableToArrayLimit(r, e) || PlaidDemo_unsupportedIterableToArray(r, e) || PlaidDemo_nonIterableRest(); }\nfunction PlaidDemo_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction PlaidDemo_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return PlaidDemo_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? PlaidDemo_arrayLikeToArray(r, a) : void 0; } }\nfunction PlaidDemo_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction PlaidDemo_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction PlaidDemo_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\nvar PlaidDemo = function PlaidDemo() {\n  var _useState = (0,react.useState)(null),\n    _useState2 = PlaidDemo_slicedToArray(_useState, 2),\n    apiStatus = _useState2[0],\n    setApiStatus = _useState2[1];\n  var _useState3 = (0,react.useState)(null),\n    _useState4 = PlaidDemo_slicedToArray(_useState3, 2),\n    demoData = _useState4[0],\n    setDemoData = _useState4[1];\n  var _useState5 = (0,react.useState)(false),\n    _useState6 = PlaidDemo_slicedToArray(_useState5, 2),\n    loading = _useState6[0],\n    setLoading = _useState6[1];\n  (0,react.useEffect)(function () {\n    // Get initial API status\n    setApiStatus(plaidApiService.getApiStatus());\n  }, []);\n  var runDemo = /*#__PURE__*/function () {\n    var _ref = PlaidDemo_asyncToGenerator(/*#__PURE__*/PlaidDemo_regeneratorRuntime().mark(function _callee() {\n      var linkToken, balance, endDate, startDate, transactions;\n      return PlaidDemo_regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            setDemoData(null);\n            _context.prev = 2;\n            _context.next = 5;\n            return plaidApiService.createLinkToken(\'demo_user_123\');\n          case 5:\n            linkToken = _context.sent;\n            _context.next = 8;\n            return plaidApiService.getBalance();\n          case 8:\n            balance = _context.sent;\n            // Demo 3: Get mock transaction data\n            endDate = new Date().toISOString().split(\'T\')[0];\n            startDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split(\'T\')[0];\n            _context.next = 13;\n            return plaidApiService.getTransactions(startDate, endDate);\n          case 13:\n            transactions = _context.sent;\n            setDemoData({\n              linkToken: linkToken,\n              balance: balance,\n              transactions: transactions\n            });\n            _context.next = 21;\n            break;\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context["catch"](2);\n            console.error(\'Demo error:\', _context.t0);\n            setDemoData({\n              error: _context.t0.message\n            });\n          case 21:\n            _context.prev = 21;\n            setLoading(false);\n            return _context.finish(21);\n          case 24:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee, null, [[2, 17, 21, 24]]);\n    }));\n    return function runDemo() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var toggleMockData = function toggleMockData() {\n    plaidApiService.toggleMockData();\n    setApiStatus(plaidApiService.getApiStatus());\n  };\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n    className: "plaid-demo",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "demo-header",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h2", {\n        children: "Plaid API Integration Demo"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n        children: "This demo shows how to integrate Plaid\'s financial data APIs into your React application."\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "demo-status",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n        children: "API Status"\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "status-grid",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "status-item",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n            className: "label",\n            children: "Configured:"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n            className: "value ".concat(apiStatus !== null && apiStatus !== void 0 && apiStatus.configured ? \'success\' : \'error\'),\n            children: apiStatus !== null && apiStatus !== void 0 && apiStatus.configured ? \'Yes\' : \'No\'\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "status-item",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n            className: "label",\n            children: "Environment:"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n            className: "value",\n            children: (apiStatus === null || apiStatus === void 0 ? void 0 : apiStatus.environment) || \'Unknown\'\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "status-item",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n            className: "label",\n            children: "Data Source:"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n            className: "value ".concat(apiStatus !== null && apiStatus !== void 0 && apiStatus.usingMockData ? \'warning\' : \'success\'),\n            children: apiStatus !== null && apiStatus !== void 0 && apiStatus.usingMockData ? \'Mock Data\' : \'Real API\'\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "status-item",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n            className: "label",\n            children: "Access Token:"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n            className: "value ".concat(apiStatus !== null && apiStatus !== void 0 && apiStatus.hasAccessToken ? \'success\' : \'info\'),\n            children: apiStatus !== null && apiStatus !== void 0 && apiStatus.hasAccessToken ? \'Present\' : \'None\'\n          })]\n        })]\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "demo-controls",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n        onClick: runDemo,\n        disabled: loading,\n        className: "demo-btn primary",\n        children: loading ? \'Running Demo...\' : \'Run Demo\'\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n        onClick: toggleMockData,\n        className: "demo-btn secondary",\n        children: "Toggle Mock Data"\n      })]\n    }), demoData && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "demo-results",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n        children: "Demo Results"\n      }), demoData.error ? /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "error-box",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n          children: "Error"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n          children: demoData.error\n        })]\n      }) : /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "result-section",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n            children: "Link Token Created"\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "token-box",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("code", {\n              children: demoData.linkToken.link_token\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("small", {\n              children: ["Expires: ", new Date(demoData.linkToken.expiration).toLocaleString()]\n            })]\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "result-section",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n            children: "Account Balances"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "accounts-preview",\n            children: demoData.balance.accounts.slice(0, 3).map(function (account) {\n              var _account$balances$cur;\n              return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "account-preview",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "account-name",\n                  children: account.name\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "account-balance",\n                  children: ["$", ((_account$balances$cur = account.balances.current) === null || _account$balances$cur === void 0 ? void 0 : _account$balances$cur.toFixed(2)) || \'N/A\']\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "account-type",\n                  children: account.type\n                })]\n              }, account.id);\n            })\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "result-section",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n            children: "Recent Transactions"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "transactions-preview",\n            children: demoData.transactions.transactions.slice(0, 5).map(function (transaction) {\n              return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "transaction-preview",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "transaction-name",\n                  children: transaction.name\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "transaction-amount ".concat(transaction.amount >= 0 ? \'positive\' : \'negative\'),\n                  children: ["$", Math.abs(transaction.amount).toFixed(2)]\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "transaction-date",\n                  children: transaction.date\n                })]\n              }, transaction.id);\n            })\n          })]\n        })]\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "demo-info",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n        children: "How It Works"\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "info-grid",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "info-item",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n            children: "1. Configuration"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n            children: "The Plaid API service is configured with your sandbox credentials and automatically falls back to mock data when needed."\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "info-item",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n            children: "2. Link Token"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n            children: "Creates a secure link token that allows users to connect their bank accounts through Plaid Link."\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "info-item",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n            children: "3. Data Retrieval"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n            children: "Fetches account balances, transactions, and other financial data using the Plaid API endpoints."\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "info-item",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n            children: "4. Mock Data"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n            children: "Provides realistic sample data for development and testing when the real API is not available."\n          })]\n        })]\n      })]\n    })]\n  });\n};\n/* harmony default export */ const components_PlaidDemo = (PlaidDemo);\n;// ./wwwroot/js/react/components/PlaidTester.tsx\nfunction PlaidTester_typeof(o) { "@babel/helpers - typeof"; return PlaidTester_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, PlaidTester_typeof(o); }\nfunction PlaidTester_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ PlaidTester_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == PlaidTester_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(PlaidTester_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction PlaidTester_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction PlaidTester_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { PlaidTester_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { PlaidTester_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction PlaidTester_toConsumableArray(r) { return PlaidTester_arrayWithoutHoles(r) || PlaidTester_iterableToArray(r) || PlaidTester_unsupportedIterableToArray(r) || PlaidTester_nonIterableSpread(); }\nfunction PlaidTester_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction PlaidTester_iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction PlaidTester_arrayWithoutHoles(r) { if (Array.isArray(r)) return PlaidTester_arrayLikeToArray(r); }\nfunction PlaidTester_slicedToArray(r, e) { return PlaidTester_arrayWithHoles(r) || PlaidTester_iterableToArrayLimit(r, e) || PlaidTester_unsupportedIterableToArray(r, e) || PlaidTester_nonIterableRest(); }\nfunction PlaidTester_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction PlaidTester_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return PlaidTester_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? PlaidTester_arrayLikeToArray(r, a) : void 0; } }\nfunction PlaidTester_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction PlaidTester_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction PlaidTester_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\nvar PlaidTester = function PlaidTester(_ref) {\n  var _ref$title = _ref.title,\n    title = _ref$title === void 0 ? \'Plaid API Tester\' : _ref$title;\n  var _useState = (0,react.useState)(null),\n    _useState2 = PlaidTester_slicedToArray(_useState, 2),\n    apiStatus = _useState2[0],\n    setApiStatus = _useState2[1];\n  var _useState3 = (0,react.useState)(null),\n    _useState4 = PlaidTester_slicedToArray(_useState3, 2),\n    balance = _useState4[0],\n    setBalance = _useState4[1];\n  var _useState5 = (0,react.useState)(null),\n    _useState6 = PlaidTester_slicedToArray(_useState5, 2),\n    transactions = _useState6[0],\n    setTransactions = _useState6[1];\n  var _useState7 = (0,react.useState)(null),\n    _useState8 = PlaidTester_slicedToArray(_useState7, 2),\n    linkToken = _useState8[0],\n    setLinkToken = _useState8[1];\n  var _useState9 = (0,react.useState)(null),\n    _useState0 = PlaidTester_slicedToArray(_useState9, 2),\n    accessToken = _useState0[0],\n    setAccessToken = _useState0[1];\n  var _useState1 = (0,react.useState)(false),\n    _useState10 = PlaidTester_slicedToArray(_useState1, 2),\n    loading = _useState10[0],\n    setLoading = _useState10[1];\n  var _useState11 = (0,react.useState)(null),\n    _useState12 = PlaidTester_slicedToArray(_useState11, 2),\n    error = _useState12[0],\n    setError = _useState12[1];\n  var _useState13 = (0,react.useState)([]),\n    _useState14 = PlaidTester_slicedToArray(_useState13, 2),\n    testResults = _useState14[0],\n    setTestResults = _useState14[1];\n  (0,react.useEffect)(function () {\n    // Initialize API status\n    setApiStatus(plaidApiService.getApiStatus());\n    setAccessToken(plaidApiService.getAccessToken());\n  }, []);\n  var addTestResult = function addTestResult(test, success, data, error) {\n    setTestResults(function (prev) {\n      return [].concat(PlaidTester_toConsumableArray(prev), [{\n        test: test,\n        success: success,\n        timestamp: new Date().toISOString(),\n        data: data,\n        error: (error === null || error === void 0 ? void 0 : error.message) || error\n      }]);\n    });\n  };\n  var testApiConnection = /*#__PURE__*/function () {\n    var _ref2 = PlaidTester_asyncToGenerator(/*#__PURE__*/PlaidTester_regeneratorRuntime().mark(function _callee() {\n      var result;\n      return PlaidTester_regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            setError(null);\n            _context.prev = 2;\n            _context.next = 5;\n            return plaidApiService.testConnection();\n          case 5:\n            result = _context.sent;\n            addTestResult(\'API Connection Test\', result);\n            setApiStatus(plaidApiService.getApiStatus());\n            _context.next = 14;\n            break;\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context["catch"](2);\n            addTestResult(\'API Connection Test\', false, null, _context.t0);\n            setError(_context.t0.message);\n          case 14:\n            _context.prev = 14;\n            setLoading(false);\n            return _context.finish(14);\n          case 17:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee, null, [[2, 10, 14, 17]]);\n    }));\n    return function testApiConnection() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var testCreateLinkToken = /*#__PURE__*/function () {\n    var _ref3 = PlaidTester_asyncToGenerator(/*#__PURE__*/PlaidTester_regeneratorRuntime().mark(function _callee2() {\n      var result;\n      return PlaidTester_regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            setLoading(true);\n            setError(null);\n            _context2.prev = 2;\n            _context2.next = 5;\n            return plaidApiService.createLinkToken(\'test_user_123\');\n          case 5:\n            result = _context2.sent;\n            setLinkToken(result.link_token);\n            addTestResult(\'Create Link Token\', true, result);\n            _context2.next = 14;\n            break;\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2["catch"](2);\n            addTestResult(\'Create Link Token\', false, null, _context2.t0);\n            setError(_context2.t0.message);\n          case 14:\n            _context2.prev = 14;\n            setLoading(false);\n            return _context2.finish(14);\n          case 17:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[2, 10, 14, 17]]);\n    }));\n    return function testCreateLinkToken() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var testGetBalance = /*#__PURE__*/function () {\n    var _ref4 = PlaidTester_asyncToGenerator(/*#__PURE__*/PlaidTester_regeneratorRuntime().mark(function _callee3() {\n      var result;\n      return PlaidTester_regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            setLoading(true);\n            setError(null);\n            _context3.prev = 2;\n            _context3.next = 5;\n            return plaidApiService.getBalance();\n          case 5:\n            result = _context3.sent;\n            setBalance(result);\n            addTestResult(\'Get Balance\', true, result);\n            _context3.next = 14;\n            break;\n          case 10:\n            _context3.prev = 10;\n            _context3.t0 = _context3["catch"](2);\n            addTestResult(\'Get Balance\', false, null, _context3.t0);\n            setError(_context3.t0.message);\n          case 14:\n            _context3.prev = 14;\n            setLoading(false);\n            return _context3.finish(14);\n          case 17:\n          case "end":\n            return _context3.stop();\n        }\n      }, _callee3, null, [[2, 10, 14, 17]]);\n    }));\n    return function testGetBalance() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var testGetTransactions = /*#__PURE__*/function () {\n    var _ref5 = PlaidTester_asyncToGenerator(/*#__PURE__*/PlaidTester_regeneratorRuntime().mark(function _callee4() {\n      var endDate, startDate, result;\n      return PlaidTester_regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            setLoading(true);\n            setError(null);\n            _context4.prev = 2;\n            endDate = new Date().toISOString().split(\'T\')[0];\n            startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split(\'T\')[0];\n            _context4.next = 7;\n            return plaidApiService.getTransactions(startDate, endDate);\n          case 7:\n            result = _context4.sent;\n            setTransactions(result);\n            addTestResult(\'Get Transactions\', true, result);\n            _context4.next = 16;\n            break;\n          case 12:\n            _context4.prev = 12;\n            _context4.t0 = _context4["catch"](2);\n            addTestResult(\'Get Transactions\', false, null, _context4.t0);\n            setError(_context4.t0.message);\n          case 16:\n            _context4.prev = 16;\n            setLoading(false);\n            return _context4.finish(16);\n          case 19:\n          case "end":\n            return _context4.stop();\n        }\n      }, _callee4, null, [[2, 12, 16, 19]]);\n    }));\n    return function testGetTransactions() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var testMockDataToggle = function testMockDataToggle() {\n    plaidApiService.toggleMockData();\n    setApiStatus(plaidApiService.getApiStatus());\n    addTestResult(\'Toggle Mock Data\', true, {\n      usingMockData: plaidApiService.getApiStatus().usingMockData\n    });\n  };\n  var testSetAccessToken = function testSetAccessToken() {\n    var testToken = "test_access_token_".concat(Math.random().toString(36).substr(2, 9));\n    plaidApiService.setAccessToken(testToken);\n    setAccessToken(testToken);\n    setApiStatus(plaidApiService.getApiStatus());\n    addTestResult(\'Set Access Token\', true, {\n      token: testToken\n    });\n  };\n  var clearTestResults = function clearTestResults() {\n    setTestResults([]);\n  };\n  var formatCurrency = function formatCurrency(amount) {\n    if (amount === null) return \'N/A\';\n    return new Intl.NumberFormat(\'en-US\', {\n      style: \'currency\',\n      currency: \'USD\'\n    }).format(amount);\n  };\n  var formatDate = function formatDate(dateString) {\n    return new Date(dateString).toLocaleDateString();\n  };\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n    className: "plaid-tester",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "plaid-tester-header",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h2", {\n        children: title\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "api-status",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n          className: "status-indicator ".concat(apiStatus !== null && apiStatus !== void 0 && apiStatus.configured ? \'configured\' : \'not-configured\'),\n          children: apiStatus !== null && apiStatus !== void 0 && apiStatus.configured ? \'Configured\' : \'Not Configured\'\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n          className: "status-indicator ".concat(apiStatus !== null && apiStatus !== void 0 && apiStatus.usingMockData ? \'mock\' : \'real\'),\n          children: apiStatus !== null && apiStatus !== void 0 && apiStatus.usingMockData ? \'Mock Data\' : \'Real API\'\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n          className: "status-indicator ".concat(apiStatus !== null && apiStatus !== void 0 && apiStatus.hasAccessToken ? \'has-token\' : \'no-token\'),\n          children: apiStatus !== null && apiStatus !== void 0 && apiStatus.hasAccessToken ? \'Has Token\' : \'No Token\'\n        })]\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "plaid-tester-controls",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n        children: "API Tests"\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "button-group",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n          onClick: testApiConnection,\n          disabled: loading,\n          className: "btn btn-primary",\n          children: loading ? \'Testing...\' : \'Test Connection\'\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n          onClick: testCreateLinkToken,\n          disabled: loading,\n          className: "btn btn-secondary",\n          children: loading ? \'Creating...\' : \'Create Link Token\'\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n          onClick: testGetBalance,\n          disabled: loading,\n          className: "btn btn-secondary",\n          children: loading ? \'Loading...\' : \'Get Balance\'\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n          onClick: testGetTransactions,\n          disabled: loading,\n          className: "btn btn-secondary",\n          children: loading ? \'Loading...\' : \'Get Transactions\'\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "button-group",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n          onClick: testMockDataToggle,\n          className: "btn btn-warning",\n          children: "Toggle Mock Data"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n          onClick: testSetAccessToken,\n          className: "btn btn-info",\n          children: "Set Test Access Token"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n          onClick: clearTestResults,\n          className: "btn btn-outline",\n          children: "Clear Results"\n        })]\n      })]\n    }), error && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "error-message",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("strong", {\n        children: "Error:"\n      }), " ", error]\n    }), linkToken && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "result-section",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n        children: "Link Token"\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "token-display",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("code", {\n          children: linkToken\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("small", {\n          children: ["Expires: ", new Date(Date.now() + 24 * 60 * 60 * 1000).toLocaleString()]\n        })]\n      })]\n    }), balance && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "result-section",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n        children: "Account Balances"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "accounts-grid",\n        children: balance.accounts.map(function (account) {\n          return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "account-card",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "account-header",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n                children: account.name\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "account-type",\n                children: account.type\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "account-mask",\n              children: ["****", account.mask]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "account-balances",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "balance-item",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                  className: "label",\n                  children: "Available:"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                  className: "amount",\n                  children: formatCurrency(account.balances.available)\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "balance-item",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                  className: "label",\n                  children: "Current:"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                  className: "amount",\n                  children: formatCurrency(account.balances.current)\n                })]\n              }), account.balances.limit && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "balance-item",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                  className: "label",\n                  children: "Limit:"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                  className: "amount",\n                  children: formatCurrency(account.balances.limit)\n                })]\n              })]\n            })]\n          }, account.id);\n        })\n      })]\n    }), transactions && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "result-section",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n        children: "Recent Transactions"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "transactions-list",\n        children: transactions.transactions.slice(0, 10).map(function (transaction) {\n          return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "transaction-item",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "transaction-header",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "transaction-name",\n                children: transaction.name\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "transaction-amount ".concat(transaction.amount >= 0 ? \'positive\' : \'negative\'),\n                children: formatCurrency(Math.abs(transaction.amount))\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "transaction-details",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "transaction-date",\n                children: formatDate(transaction.date)\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "transaction-category",\n                children: transaction.category.join(\' > \')\n              }), transaction.merchant_name && /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "transaction-merchant",\n                children: transaction.merchant_name\n              }), transaction.pending && /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "transaction-pending",\n                children: "Pending"\n              })]\n            })]\n          }, transaction.id);\n        })\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "result-section",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n        children: "Test Results"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "test-results",\n        children: testResults.length === 0 ? /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n          className: "no-results",\n          children: "No tests run yet. Use the buttons above to test the Plaid API."\n        }) : testResults.map(function (result, index) {\n          return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "test-result ".concat(result.success ? \'success\' : \'error\'),\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "test-result-header",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "test-name",\n                children: result.test\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "test-status ".concat(result.success ? \'success\' : \'error\'),\n                children: result.success ? \'✓\' : \'✗\'\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "test-timestamp",\n                children: new Date(result.timestamp).toLocaleTimeString()\n              })]\n            }), result.error && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "test-error",\n              children: ["Error: ", result.error]\n            }), result.data && /*#__PURE__*/(0,jsx_runtime.jsxs)("details", {\n              className: "test-data",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("summary", {\n                children: "Data"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("pre", {\n                children: JSON.stringify(result.data, null, 2)\n              })]\n            })]\n          }, index);\n        })\n      })]\n    })]\n  });\n};\n/* harmony default export */ const components_PlaidTester = (PlaidTester);\n;// ./wwwroot/js/react/services/marketApi.ts\nfunction marketApi_slicedToArray(r, e) { return marketApi_arrayWithHoles(r) || marketApi_iterableToArrayLimit(r, e) || marketApi_unsupportedIterableToArray(r, e) || marketApi_nonIterableRest(); }\nfunction marketApi_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction marketApi_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return marketApi_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? marketApi_arrayLikeToArray(r, a) : void 0; } }\nfunction marketApi_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction marketApi_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction marketApi_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction marketApi_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction marketApi_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? marketApi_ownKeys(Object(t), !0).forEach(function (r) { marketApi_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : marketApi_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction marketApi_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ marketApi_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == marketApi_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(marketApi_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction marketApi_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction marketApi_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { marketApi_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { marketApi_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction marketApi_defineProperty(e, r, t) { return (r = marketApi_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction marketApi_typeof(o) { "@babel/helpers - typeof"; return marketApi_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, marketApi_typeof(o); }\nfunction marketApi_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }\nfunction marketApi_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, marketApi_toPropertyKey(o.key), o); } }\nfunction marketApi_createClass(e, r, t) { return r && marketApi_defineProperties(e.prototype, r), t && marketApi_defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }\nfunction marketApi_toPropertyKey(t) { var i = marketApi_toPrimitive(t, "string"); return "symbol" == marketApi_typeof(i) ? i : i + ""; }\nfunction marketApi_toPrimitive(t, r) { if ("object" != marketApi_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != marketApi_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\n\n\n// Market API Service - Now with Finnhub Integration + WebSocket Real-time Data + Mock Data Fallbacks\n// We\'ll gradually add real API integrations while keeping mock data as backup\n\n// API Configuration\nvar API_CONFIG = {\n  FINNHUB: {\n    BASE_URL: \'https://finnhub.io/api/v1\',\n    WEBSOCKET_URL: \'wss://ws.finnhub.io\',\n    API_KEY: \'d2e9vqhr01qr1ro8tkn0d2e9vqhr01qr1ro8tkng\',\n    FREE_TIER_LIMIT: 60 // requests per minute\n  }\n};\n\n// WebSocket message types\n\n// Types for market data\n// Mock data generators (kept as fallbacks)\nvar MockDataGenerator = /*#__PURE__*/function () {\n  function MockDataGenerator() {\n    marketApi_classCallCheck(this, MockDataGenerator);\n  }\n  return marketApi_createClass(MockDataGenerator, null, [{\n    key: "generateRandomPrice",\n    value: function generateRandomPrice(basePrice) {\n      var volatility = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.02;\n      var change = (Math.random() - 0.5) * volatility * basePrice;\n      return Math.round((basePrice + change) * 100) / 100;\n    }\n  }, {\n    key: "generateRandomChange",\n    value: function generateRandomChange(basePrice) {\n      var volatility = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.03;\n      var change = (Math.random() - 0.5) * volatility * basePrice;\n      return Math.round(change * 100) / 100;\n    }\n  }, {\n    key: "generateStockQuote",\n    value: function generateStockQuote(symbol, basePrice) {\n      var price = this.generateRandomPrice(basePrice);\n      var change = this.generateRandomChange(basePrice);\n      var changePercent = change / (price - change) * 100;\n      return {\n        symbol: symbol,\n        name: this.getCompanyName(symbol),\n        price: price,\n        change: change,\n        changePercent: Math.round(changePercent * 100) / 100,\n        volume: Math.floor(Math.random() * 10000000) + 1000000,\n        marketCap: Math.floor(Math.random() * 100000000000) + 1000000000,\n        pe: Math.round((Math.random() * 30 + 10) * 100) / 100,\n        dividend: Math.round(Math.random() * 5 * 100) / 100,\n        dividendYield: Math.round(Math.random() * 3 * 100) / 100,\n        sector: this.getRandomSector(),\n        industry: this.getRandomIndustry(),\n        lastUpdated: new Date().toISOString(),\n        isRealTime: true\n      };\n    }\n  }, {\n    key: "generateHistoricalData",\n    value: function generateHistoricalData(symbol) {\n      var days = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;\n      var data = [];\n      var basePrice = 100 + Math.random() * 200; // Random starting price\n\n      for (var i = days - 1; i >= 0; i--) {\n        var date = new Date();\n        date.setDate(date.getDate() - i);\n        var open = basePrice;\n        var high = open + Math.random() * 10;\n        var low = open - Math.random() * 10;\n        var close = this.generateRandomPrice(open, 0.02);\n        var volume = Math.floor(Math.random() * 10000000) + 1000000;\n        data.push({\n          date: date.toISOString().split(\'T\')[0],\n          open: Math.round(open * 100) / 100,\n          high: Math.round(high * 100) / 100,\n          low: Math.round(low * 100) / 100,\n          close: Math.round(close * 100) / 100,\n          volume: volume\n        });\n        basePrice = close; // Next day starts with previous close\n      }\n      return data;\n    }\n  }, {\n    key: "generateMarketNews",\n    value: function generateMarketNews() {\n      var _this = this;\n      var newsTemplates = [{\n        title: "Tech Stocks Rally on Strong Earnings Reports",\n        summary: "Major technology companies exceeded quarterly expectations, driving market gains.",\n        category: "earnings",\n        sentiment: "positive"\n      }, {\n        title: "Federal Reserve Signals Potential Rate Changes",\n        summary: "Central bank officials hint at possible monetary policy adjustments.",\n        category: "general",\n        sentiment: "neutral"\n      }, {\n        title: "Crypto Market Shows Signs of Recovery",\n        summary: "Digital assets gain momentum after recent market correction.",\n        category: "crypto",\n        sentiment: "positive"\n      }, {\n        title: "Merger Talks Between Major Banks Surface",\n        summary: "Industry consolidation discussions could reshape financial landscape.",\n        category: "merger",\n        sentiment: "neutral"\n      }, {\n        title: "Economic Data Shows Mixed Signals",\n        summary: "Inflation concerns balanced against strong employment numbers.",\n        category: "general",\n        sentiment: "negative"\n      }];\n      return newsTemplates.map(function (template, index) {\n        return {\n          id: "news-".concat(index + 1),\n          title: template.title,\n          summary: template.summary,\n          url: "https://example.com/news/".concat(index + 1),\n          publishedAt: new Date(Date.now() - Math.random() * 86400000).toISOString(),\n          // Random time in last 24h\n          source: _this.getRandomSource(),\n          sentiment: template.sentiment,\n          category: template.category\n        };\n      });\n    }\n  }, {\n    key: "generateCryptoData",\n    value: function generateCryptoData(symbol) {\n      var basePrice = 1000 + Math.random() * 50000;\n      var currentPrice = this.generateRandomPrice(basePrice, 0.05);\n      var change24h = this.generateRandomChange(basePrice, 0.08);\n      return {\n        id: symbol.toLowerCase(),\n        symbol: symbol.toUpperCase(),\n        name: this.getCryptoName(symbol),\n        currentPrice: Math.round(currentPrice * 100) / 100,\n        marketCap: Math.floor(Math.random() * 1000000000000) + 1000000000,\n        volume24h: Math.floor(Math.random() * 1000000000) + 10000000,\n        change24h: Math.round(change24h * 100) / 100,\n        changePercent24h: Math.round(change24h / (currentPrice - change24h) * 10000) / 100\n      };\n    }\n  }, {\n    key: "generateForexRate",\n    value: function generateForexRate(from, to) {\n      var baseRate = 0.5 + Math.random() * 2;\n      var change = this.generateRandomChange(baseRate, 0.01);\n      return {\n        fromCurrency: from,\n        toCurrency: to,\n        rate: Math.round(baseRate * 10000) / 10000,\n        change: Math.round(change * 10000) / 10000,\n        changePercent: Math.round(change / (baseRate - change) * 10000) / 100,\n        lastUpdated: new Date().toISOString()\n      };\n    }\n  }, {\n    key: "generateEconomicIndicator",\n    value: function generateEconomicIndicator(name) {\n      var value = 100 + Math.random() * 50;\n      var previousValue = value + this.generateRandomChange(value, 0.05);\n      var change = value - previousValue;\n      return {\n        name: name,\n        value: Math.round(value * 100) / 100,\n        unit: this.getUnitForIndicator(name),\n        date: new Date().toISOString().split(\'T\')[0],\n        previousValue: Math.round(previousValue * 100) / 100,\n        change: Math.round(change * 100) / 100,\n        changePercent: Math.round(change / previousValue * 10000) / 100\n      };\n    }\n\n    // Helper methods - Made public so they can be accessed\n  }, {\n    key: "getCompanyName",\n    value: function getCompanyName(symbol) {\n      var names = {\n        \'AAPL\': \'Apple Inc.\',\n        \'MSFT\': \'Microsoft Corporation\',\n        \'GOOGL\': \'Alphabet Inc.\',\n        \'AMZN\': \'Amazon.com Inc.\',\n        \'TSLA\': \'Tesla Inc.\',\n        \'META\': \'Meta Platforms Inc.\',\n        \'NVDA\': \'NVIDIA Corporation\',\n        \'JPM\': \'JPMorgan Chase & Co.\',\n        \'JNJ\': \'Johnson & Johnson\',\n        \'V\': \'Visa Inc.\'\n      };\n      return names[symbol] || "".concat(symbol, " Corporation");\n    }\n  }, {\n    key: "getCryptoName",\n    value: function getCryptoName(symbol) {\n      var names = {\n        \'BTC\': \'Bitcoin\',\n        \'ETH\': \'Ethereum\',\n        \'USDT\': \'Tether\',\n        \'BNB\': \'Binance Coin\',\n        \'ADA\': \'Cardano\',\n        \'SOL\': \'Solana\',\n        \'DOT\': \'Polkadot\',\n        \'DOGE\': \'Dogecoin\',\n        \'AVAX\': \'Avalanche\',\n        \'MATIC\': \'Polygon\'\n      };\n      return names[symbol] || symbol;\n    }\n  }, {\n    key: "getRandomSector",\n    value: function getRandomSector() {\n      var sectors = [\'Technology\', \'Healthcare\', \'Financial\', \'Consumer Discretionary\', \'Industrial\', \'Energy\', \'Materials\', \'Utilities\', \'Real Estate\', \'Communication Services\'];\n      return sectors[Math.floor(Math.random() * sectors.length)];\n    }\n  }, {\n    key: "getRandomIndustry",\n    value: function getRandomIndustry() {\n      var industries = [\'Software\', \'Pharmaceuticals\', \'Banking\', \'Retail\', \'Manufacturing\', \'Oil & Gas\', \'Mining\', \'Electric Utilities\', \'Real Estate Investment Trusts\', \'Media\'];\n      return industries[Math.floor(Math.random() * industries.length)];\n    }\n  }, {\n    key: "getRandomSource",\n    value: function getRandomSource() {\n      var sources = [\'Reuters\', \'Bloomberg\', \'CNBC\', \'MarketWatch\', \'Yahoo Finance\', \'Financial Times\', \'Wall Street Journal\', \'Forbes\', \'Investing.com\', \'Seeking Alpha\'];\n      return sources[Math.floor(Math.random() * sources.length)];\n    }\n  }, {\n    key: "getUnitForIndicator",\n    value: function getUnitForIndicator(name) {\n      var units = {\n        \'GDP Growth\': \'%\',\n        \'Inflation Rate\': \'%\',\n        \'Unemployment Rate\': \'%\',\n        \'Interest Rate\': \'%\',\n        \'Consumer Confidence\': \'Index\',\n        \'Housing Starts\': \'Thousands\',\n        \'Retail Sales\': \'Billions USD\',\n        \'Industrial Production\': \'Index\'\n      };\n      return units[name] || \'Units\';\n    }\n  }]);\n}(); // WebSocket Service for Real-time Data\nvar WebSocketService = /*#__PURE__*/function () {\n  function WebSocketService() {\n    marketApi_classCallCheck(this, WebSocketService);\n    marketApi_defineProperty(this, "ws", null);\n    marketApi_defineProperty(this, "isConnected", false);\n    marketApi_defineProperty(this, "reconnectAttempts", 0);\n    marketApi_defineProperty(this, "maxReconnectAttempts", 5);\n    marketApi_defineProperty(this, "reconnectDelay", 1000);\n    marketApi_defineProperty(this, "subscribedSymbols", new Set());\n    marketApi_defineProperty(this, "messageHandlers", new Map());\n    marketApi_defineProperty(this, "pingInterval", null);\n    // Event emitter functionality\n    marketApi_defineProperty(this, "listeners", new Map());\n    this.setupMessageHandlers();\n  }\n  return marketApi_createClass(WebSocketService, [{\n    key: "setupMessageHandlers",\n    value: function setupMessageHandlers() {\n      var _this2 = this;\n      // Handle different message types\n      this.messageHandlers.set(\'trade\', function (data) {\n        return _this2.handleTradeData(data);\n      });\n      this.messageHandlers.set(\'ping\', function () {\n        return _this2.handlePing();\n      });\n      this.messageHandlers.set(\'error\', function (data) {\n        return _this2.handleError(data);\n      });\n    }\n  }, {\n    key: "connect",\n    value: function connect() {\n      var _this3 = this;\n      return new Promise(function (resolve, reject) {\n        try {\n          _this3.ws = new WebSocket(API_CONFIG.FINNHUB.WEBSOCKET_URL);\n          _this3.ws.onopen = function () {\n            console.log(\'WebSocket connected to Finnhub\');\n            _this3.isConnected = true;\n            _this3.reconnectAttempts = 0;\n            _this3.startPingInterval();\n            _this3.resubscribeSymbols();\n            resolve(true);\n          };\n          _this3.ws.onmessage = function (event) {\n            try {\n              var message = JSON.parse(event.data);\n              _this3.handleMessage(message);\n            } catch (error) {\n              console.error(\'Error parsing WebSocket message:\', error);\n            }\n          };\n          _this3.ws.onclose = function () {\n            console.log(\'WebSocket disconnected\');\n            _this3.isConnected = false;\n            _this3.stopPingInterval();\n            _this3.attemptReconnect();\n          };\n          _this3.ws.onerror = function (error) {\n            console.error(\'WebSocket error:\', error);\n            _this3.isConnected = false;\n            reject(error);\n          };\n\n          // Set connection timeout\n          setTimeout(function () {\n            if (!_this3.isConnected) {\n              reject(new Error(\'WebSocket connection timeout\'));\n            }\n          }, 10000);\n        } catch (error) {\n          console.error(\'Failed to create WebSocket connection:\', error);\n          reject(error);\n        }\n      });\n    }\n  }, {\n    key: "handleMessage",\n    value: function handleMessage(message) {\n      var handler = this.messageHandlers.get(message.type);\n      if (handler) {\n        handler(message.data);\n      } else {\n        console.log(\'Unhandled WebSocket message type:\', message.type);\n      }\n    }\n  }, {\n    key: "handleTradeData",\n    value: function handleTradeData(data) {\n      var _this4 = this;\n      if (Array.isArray(data)) {\n        data.forEach(function (trade) {\n          // Emit trade data to subscribers\n          _this4.emit(\'trade\', {\n            symbol: trade.s,\n            price: trade.p,\n            volume: trade.v,\n            timestamp: trade.t,\n            conditions: trade.c || []\n          });\n        });\n      }\n    }\n  }, {\n    key: "handlePing",\n    value: function handlePing() {\n      // Respond to ping with pong\n      if (this.ws && this.isConnected) {\n        this.ws.send(JSON.stringify({\n          type: \'pong\'\n        }));\n      }\n    }\n  }, {\n    key: "handleError",\n    value: function handleError(data) {\n      console.error(\'WebSocket error:\', data);\n    }\n  }, {\n    key: "startPingInterval",\n    value: function startPingInterval() {\n      var _this5 = this;\n      this.pingInterval = setInterval(function () {\n        if (_this5.ws && _this5.isConnected) {\n          _this5.ws.send(JSON.stringify({\n            type: \'ping\'\n          }));\n        }\n      }, 30000); // Send ping every 30 seconds\n    }\n  }, {\n    key: "stopPingInterval",\n    value: function stopPingInterval() {\n      if (this.pingInterval) {\n        clearInterval(this.pingInterval);\n        this.pingInterval = null;\n      }\n    }\n  }, {\n    key: "attemptReconnect",\n    value: function () {\n      var _attemptReconnect = marketApi_asyncToGenerator(/*#__PURE__*/marketApi_regeneratorRuntime().mark(function _callee2() {\n        var _this6 = this;\n        return marketApi_regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(this.reconnectAttempts >= this.maxReconnectAttempts)) {\n                _context2.next = 3;\n                break;\n              }\n              console.error(\'Max reconnection attempts reached\');\n              return _context2.abrupt("return");\n            case 3:\n              this.reconnectAttempts++;\n              console.log("Attempting to reconnect (".concat(this.reconnectAttempts, "/").concat(this.maxReconnectAttempts, ")..."));\n              setTimeout(/*#__PURE__*/marketApi_asyncToGenerator(/*#__PURE__*/marketApi_regeneratorRuntime().mark(function _callee() {\n                return marketApi_regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.prev = 0;\n                      _context.next = 3;\n                      return _this6.connect();\n                    case 3:\n                      _context.next = 8;\n                      break;\n                    case 5:\n                      _context.prev = 5;\n                      _context.t0 = _context["catch"](0);\n                      console.error(\'Reconnection failed:\', _context.t0);\n                    case 8:\n                    case "end":\n                      return _context.stop();\n                  }\n                }, _callee, null, [[0, 5]]);\n              })), this.reconnectDelay * this.reconnectAttempts);\n            case 6:\n            case "end":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function attemptReconnect() {\n        return _attemptReconnect.apply(this, arguments);\n      }\n      return attemptReconnect;\n    }()\n  }, {\n    key: "subscribe",\n    value: function subscribe(symbol) {\n      if (!this.ws || !this.isConnected) {\n        console.error(\'WebSocket not connected\');\n        return false;\n      }\n      try {\n        var message = {\n          type: \'subscribe\',\n          symbol: symbol.toUpperCase()\n        };\n        this.ws.send(JSON.stringify(message));\n        this.subscribedSymbols.add(symbol.toUpperCase());\n        console.log("Subscribed to ".concat(symbol.toUpperCase()));\n        return true;\n      } catch (error) {\n        console.error("Failed to subscribe to ".concat(symbol, ":"), error);\n        return false;\n      }\n    }\n  }, {\n    key: "unsubscribe",\n    value: function unsubscribe(symbol) {\n      if (!this.ws || !this.isConnected) {\n        return false;\n      }\n      try {\n        var message = {\n          type: \'unsubscribe\',\n          symbol: symbol.toUpperCase()\n        };\n        this.ws.send(JSON.stringify(message));\n        this.subscribedSymbols["delete"](symbol.toUpperCase());\n        console.log("Unsubscribed from ".concat(symbol.toUpperCase()));\n        return true;\n      } catch (error) {\n        console.error("Failed to unsubscribe from ".concat(symbol, ":"), error);\n        return false;\n      }\n    }\n  }, {\n    key: "resubscribeSymbols",\n    value: function resubscribeSymbols() {\n      var _this7 = this;\n      this.subscribedSymbols.forEach(function (symbol) {\n        _this7.subscribe(symbol);\n      });\n    }\n  }, {\n    key: "disconnect",\n    value: function disconnect() {\n      if (this.ws) {\n        this.ws.close();\n        this.ws = null;\n      }\n      this.isConnected = false;\n      this.stopPingInterval();\n    }\n  }, {\n    key: "isConnectedStatus",\n    value: function isConnectedStatus() {\n      return this.isConnected;\n    }\n  }, {\n    key: "getSubscribedSymbols",\n    value: function getSubscribedSymbols() {\n      return Array.from(this.subscribedSymbols);\n    }\n  }, {\n    key: "on",\n    value: function on(event, callback) {\n      if (!this.listeners.has(event)) {\n        this.listeners.set(event, []);\n      }\n      this.listeners.get(event).push(callback);\n    }\n  }, {\n    key: "off",\n    value: function off(event, callback) {\n      if (this.listeners.has(event)) {\n        var callbacks = this.listeners.get(event);\n        var index = callbacks.indexOf(callback);\n        if (index > -1) {\n          callbacks.splice(index, 1);\n        }\n      }\n    }\n  }, {\n    key: "emit",\n    value: function emit(event, data) {\n      if (this.listeners.has(event)) {\n        this.listeners.get(event).forEach(function (callback) {\n          try {\n            callback(data);\n          } catch (error) {\n            console.error(\'Error in event callback:\', error);\n          }\n        });\n      }\n    }\n  }]);\n}(); // Main Market API Service with Finnhub Integration\nvar MarketApiService = /*#__PURE__*/function () {\n  function MarketApiService() {\n    marketApi_classCallCheck(this, MarketApiService);\n    marketApi_defineProperty(this, "finnhub", void 0);\n    marketApi_defineProperty(this, "popularStocks", [\'AAPL\', \'MSFT\', \'GOOGL\', \'AMZN\', \'TSLA\', \'META\', \'NVDA\', \'JPM\', \'JNJ\', \'V\']);\n    marketApi_defineProperty(this, "popularCrypto", [\'BTC\', \'ETH\', \'USDT\', \'BNB\', \'ADA\', \'SOL\', \'DOT\', \'DOGE\', \'AVAX\', \'MATIC\']);\n    marketApi_defineProperty(this, "popularForex", [\'EUR/USD\', \'GBP/USD\', \'USD/JPY\', \'USD/CHF\', \'AUD/USD\', \'USD/CAD\', \'NZD/USD\']);\n    marketApi_defineProperty(this, "useMockData", false);\n    // Now using real Finnhub API calls\n    marketApi_defineProperty(this, "webSocketService", void 0);\n    // Add WebSocket service instance\n    marketApi_defineProperty(this, "realTimeData", new Map());\n    marketApi_defineProperty(this, "priceUpdateCallbacks", new Map());\n    this.finnhub = axios/* default */.A.create({\n      baseURL: API_CONFIG.FINNHUB.BASE_URL,\n      timeout: 10000\n    });\n    this.webSocketService = new WebSocketService(); // Initialize WebSocket service\n    this.setupWebSocketListeners();\n    console.log(\'Market API Service initialized with Finnhub API integration\');\n  }\n  return marketApi_createClass(MarketApiService, [{\n    key: "setupWebSocketListeners",\n    value: function setupWebSocketListeners() {\n      var _this8 = this;\n      // Listen for real-time trade data\n      this.webSocketService.on(\'trade\', function (tradeData) {\n        _this8.handleRealTimeTrade(tradeData);\n      });\n    }\n  }, {\n    key: "handleRealTimeTrade",\n    value: function handleRealTimeTrade(tradeData) {\n      var symbol = tradeData.symbol;\n      var currentQuote = this.realTimeData.get(symbol);\n      if (currentQuote) {\n        // Update existing quote with real-time data\n        var updatedQuote = marketApi_objectSpread(marketApi_objectSpread({}, currentQuote), {}, {\n          price: tradeData.price,\n          volume: tradeData.volume,\n          lastUpdated: new Date(tradeData.timestamp).toISOString(),\n          isRealTime: true\n        });\n\n        // Calculate change and change percent\n        if (currentQuote.price !== tradeData.price) {\n          updatedQuote.change = tradeData.price - currentQuote.price;\n          updatedQuote.changePercent = updatedQuote.change / currentQuote.price * 100;\n        }\n        this.realTimeData.set(symbol, updatedQuote);\n\n        // Notify subscribers of price update\n        this.notifyPriceUpdate(symbol, updatedQuote);\n      }\n    }\n  }, {\n    key: "notifyPriceUpdate",\n    value: function notifyPriceUpdate(symbol, quote) {\n      var callbacks = this.priceUpdateCallbacks.get(symbol);\n      if (callbacks) {\n        callbacks.forEach(function (callback) {\n          try {\n            callback(quote);\n          } catch (error) {\n            console.error("Error in price update callback for ".concat(symbol, ":"), error);\n          }\n        });\n      }\n    }\n\n    // Subscribe to real-time price updates for a symbol\n  }, {\n    key: "subscribeToPriceUpdates",\n    value: function subscribeToPriceUpdates(symbol, callback) {\n      var upperSymbol = symbol.toUpperCase();\n      if (!this.priceUpdateCallbacks.has(upperSymbol)) {\n        this.priceUpdateCallbacks.set(upperSymbol, []);\n      }\n      this.priceUpdateCallbacks.get(upperSymbol).push(callback);\n\n      // Also subscribe to WebSocket updates\n      this.webSocketService.subscribe(upperSymbol);\n      return true;\n    }\n\n    // Unsubscribe from real-time price updates\n  }, {\n    key: "unsubscribeFromPriceUpdates",\n    value: function unsubscribeFromPriceUpdates(symbol, callback) {\n      var upperSymbol = symbol.toUpperCase();\n      var callbacks = this.priceUpdateCallbacks.get(upperSymbol);\n      if (callbacks) {\n        var index = callbacks.indexOf(callback);\n        if (index > -1) {\n          callbacks.splice(index, 1);\n\n          // If no more callbacks, unsubscribe from WebSocket\n          if (callbacks.length === 0) {\n            this.priceUpdateCallbacks["delete"](upperSymbol);\n            this.webSocketService.unsubscribe(upperSymbol);\n          }\n          return true;\n        }\n      }\n      return false;\n    }\n\n    // Get cached real-time data if available\n  }, {\n    key: "getCachedQuote",\n    value: function getCachedQuote(symbol) {\n      return this.realTimeData.get(symbol.toUpperCase()) || null;\n    }\n\n    // Toggle between real API and mock data\n  }, {\n    key: "setUseMockData",\n    value: function setUseMockData(useMock) {\n      this.useMockData = useMock;\n      console.log("Market API: ".concat(useMock ? \'Using mock data\' : \'Using Finnhub API\'));\n    }\n\n    // Stock methods with Finnhub integration\n  }, {\n    key: "getStockQuote",\n    value: function () {\n      var _getStockQuote = marketApi_asyncToGenerator(/*#__PURE__*/marketApi_regeneratorRuntime().mark(function _callee3(symbol) {\n        var upperSymbol, cachedQuote, basePrice, quote, response, data, profile, _quote, _basePrice, _quote2;\n        return marketApi_regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              upperSymbol = symbol.toUpperCase(); // Check if we have cached real-time data\n              cachedQuote = this.realTimeData.get(upperSymbol);\n              if (!(cachedQuote && cachedQuote.isRealTime)) {\n                _context3.next = 4;\n                break;\n              }\n              return _context3.abrupt("return", cachedQuote);\n            case 4:\n              if (!this.useMockData) {\n                _context3.next = 11;\n                break;\n              }\n              _context3.next = 7;\n              return this.simulateDelay();\n            case 7:\n              basePrice = 50 + Math.random() * 200;\n              quote = MockDataGenerator.generateStockQuote(upperSymbol, basePrice);\n              this.realTimeData.set(upperSymbol, quote);\n              return _context3.abrupt("return", quote);\n            case 11:\n              _context3.prev = 11;\n              console.log("Fetching real stock quote for ".concat(upperSymbol, " from Finnhub..."));\n              _context3.next = 15;\n              return this.finnhub.get(\'/quote\', {\n                params: {\n                  symbol: upperSymbol,\n                  token: API_CONFIG.FINNHUB.API_KEY\n                }\n              });\n            case 15:\n              response = _context3.sent;\n              data = response.data;\n              if (data.c) {\n                _context3.next = 19;\n                break;\n              }\n              throw new Error("No data found for symbol: ".concat(upperSymbol));\n            case 19:\n              _context3.next = 21;\n              return this.getCompanyProfile(upperSymbol);\n            case 21:\n              profile = _context3.sent;\n              _quote = {\n                symbol: upperSymbol,\n                name: profile.name || upperSymbol,\n                price: data.c,\n                // Current price\n                change: data.d,\n                // Change\n                changePercent: data.dp,\n                // Change percent\n                volume: data.v || 0,\n                // Volume\n                marketCap: profile.marketCap || 0,\n                pe: profile.pe || 0,\n                dividend: profile.dividend || 0,\n                dividendYield: profile.dividendYield || 0,\n                sector: profile.sector || \'Unknown\',\n                industry: profile.industry || \'Unknown\',\n                lastUpdated: new Date().toISOString(),\n                isRealTime: false\n              }; // Cache the quote\n              this.realTimeData.set(upperSymbol, _quote);\n              return _context3.abrupt("return", _quote);\n            case 27:\n              _context3.prev = 27;\n              _context3.t0 = _context3["catch"](11);\n              console.error("Error fetching stock quote for ".concat(upperSymbol, " from Finnhub:"), _context3.t0);\n              console.log("Falling back to mock data for ".concat(upperSymbol));\n\n              // Fallback to mock data\n              _basePrice = 50 + Math.random() * 200;\n              _quote2 = MockDataGenerator.generateStockQuote(upperSymbol, _basePrice);\n              this.realTimeData.set(upperSymbol, _quote2);\n              return _context3.abrupt("return", _quote2);\n            case 35:\n            case "end":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[11, 27]]);\n      }));\n      function getStockQuote(_x) {\n        return _getStockQuote.apply(this, arguments);\n      }\n      return getStockQuote;\n    }()\n  }, {\n    key: "getCompanyProfile",\n    value: function () {\n      var _getCompanyProfile = marketApi_asyncToGenerator(/*#__PURE__*/marketApi_regeneratorRuntime().mark(function _callee4(symbol) {\n        var response, data;\n        return marketApi_regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return this.finnhub.get(\'/stock/profile2\', {\n                params: {\n                  symbol: symbol.toUpperCase(),\n                  token: API_CONFIG.FINNHUB.API_KEY\n                }\n              });\n            case 3:\n              response = _context4.sent;\n              data = response.data;\n              return _context4.abrupt("return", {\n                symbol: data.ticker || symbol,\n                name: data.name || symbol,\n                sector: data.finnhubIndustry || \'Unknown\',\n                industry: data.finnhubIndustry || \'Unknown\',\n                description: data.description || \'No description available\',\n                employees: data.employeeTotal || 0,\n                website: data.weburl || \'\',\n                ceo: data.ceo || \'Unknown\',\n                marketCap: data.marketCapitalization || 0,\n                pe: data.peRatio || 0,\n                dividend: data.dividendYield || 0,\n                dividendYield: data.dividendYield || 0\n              });\n            case 8:\n              _context4.prev = 8;\n              _context4.t0 = _context4["catch"](0);\n              console.error("Error fetching company profile for ".concat(symbol, ":"), _context4.t0);\n              return _context4.abrupt("return", {\n                symbol: symbol,\n                name: MockDataGenerator.getCompanyName(symbol),\n                sector: \'Unknown\',\n                industry: \'Unknown\',\n                description: \'No description available\',\n                employees: 0,\n                website: \'\',\n                ceo: \'Unknown\',\n                marketCap: 0,\n                pe: 0,\n                dividend: 0,\n                dividendYield: 0\n              });\n            case 12:\n            case "end":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[0, 8]]);\n      }));\n      function getCompanyProfile(_x2) {\n        return _getCompanyProfile.apply(this, arguments);\n      }\n      return getCompanyProfile;\n    }()\n  }, {\n    key: "getMultipleStockQuotes",\n    value: function () {\n      var _getMultipleStockQuotes = marketApi_asyncToGenerator(/*#__PURE__*/marketApi_regeneratorRuntime().mark(function _callee5(symbols) {\n        var _this9 = this;\n        var promises, quotes;\n        return marketApi_regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              promises = symbols.map(function (symbol) {\n                return _this9.getStockQuote(symbol);\n              });\n              _context5.next = 3;\n              return Promise.all(promises);\n            case 3:\n              quotes = _context5.sent;\n              // Cache all quotes\n              quotes.forEach(function (quote) {\n                _this9.realTimeData.set(quote.symbol, quote);\n              });\n              return _context5.abrupt("return", quotes);\n            case 6:\n            case "end":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }));\n      function getMultipleStockQuotes(_x3) {\n        return _getMultipleStockQuotes.apply(this, arguments);\n      }\n      return getMultipleStockQuotes;\n    }()\n  }, {\n    key: "getPopularStocks",\n    value: function () {\n      var _getPopularStocks = marketApi_asyncToGenerator(/*#__PURE__*/marketApi_regeneratorRuntime().mark(function _callee6() {\n        var _this0 = this;\n        var quotes;\n        return marketApi_regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this.getMultipleStockQuotes(this.popularStocks);\n            case 2:\n              quotes = _context6.sent;\n              // Subscribe to real-time updates for popular stocks\n              quotes.forEach(function (quote) {\n                if (!_this0.webSocketService.isConnectedStatus()) {\n                  _this0.webSocketService.connect().then(function () {\n                    _this0.webSocketService.subscribe(quote.symbol);\n                  });\n                } else {\n                  _this0.webSocketService.subscribe(quote.symbol);\n                }\n              });\n              return _context6.abrupt("return", quotes);\n            case 5:\n            case "end":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function getPopularStocks() {\n        return _getPopularStocks.apply(this, arguments);\n      }\n      return getPopularStocks;\n    }()\n  }, {\n    key: "searchStocks",\n    value: function () {\n      var _searchStocks = marketApi_asyncToGenerator(/*#__PURE__*/marketApi_regeneratorRuntime().mark(function _callee7(query) {\n        var matches;\n        return marketApi_regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this.simulateDelay();\n            case 2:\n              // Filter popular stocks based on query\n              matches = this.popularStocks.filter(function (symbol) {\n                return symbol.toLowerCase().includes(query.toLowerCase());\n              }).map(function (symbol) {\n                return {\n                  symbol: symbol,\n                  name: MockDataGenerator.getCompanyName(symbol)\n                };\n              });\n              return _context7.abrupt("return", matches.slice(0, 10));\n            case 4:\n            case "end":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function searchStocks(_x4) {\n        return _searchStocks.apply(this, arguments);\n      }\n      return searchStocks;\n    }()\n  }, {\n    key: "getHistoricalData",\n    value: function () {\n      var _getHistoricalData = marketApi_asyncToGenerator(/*#__PURE__*/marketApi_regeneratorRuntime().mark(function _callee8(symbol) {\n        var interval,\n          days,\n          _args8 = arguments;\n        return marketApi_regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              interval = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : \'daily\';\n              _context8.next = 3;\n              return this.simulateDelay();\n            case 3:\n              days = interval === \'daily\' ? 30 : interval === \'weekly\' ? 52 : 12;\n              return _context8.abrupt("return", MockDataGenerator.generateHistoricalData(symbol, days));\n            case 5:\n            case "end":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function getHistoricalData(_x5) {\n        return _getHistoricalData.apply(this, arguments);\n      }\n      return getHistoricalData;\n    }() // News methods (using mock data for now)\n  }, {\n    key: "getMarketNews",\n    value: function () {\n      var _getMarketNews = marketApi_asyncToGenerator(/*#__PURE__*/marketApi_regeneratorRuntime().mark(function _callee9(category) {\n        var news;\n        return marketApi_regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this.simulateDelay();\n            case 2:\n              news = MockDataGenerator.generateMarketNews();\n              if (category) {\n                news = news.filter(function (item) {\n                  return item.category === category;\n                });\n              }\n              return _context9.abrupt("return", news);\n            case 5:\n            case "end":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n      function getMarketNews(_x6) {\n        return _getMarketNews.apply(this, arguments);\n      }\n      return getMarketNews;\n    }() // Crypto methods (using mock data for now)\n  }, {\n    key: "getCryptoData",\n    value: function () {\n      var _getCryptoData = marketApi_asyncToGenerator(/*#__PURE__*/marketApi_regeneratorRuntime().mark(function _callee0(symbol) {\n        return marketApi_regeneratorRuntime().wrap(function _callee0$(_context0) {\n          while (1) switch (_context0.prev = _context0.next) {\n            case 0:\n              _context0.next = 2;\n              return this.simulateDelay();\n            case 2:\n              return _context0.abrupt("return", MockDataGenerator.generateCryptoData(symbol));\n            case 3:\n            case "end":\n              return _context0.stop();\n          }\n        }, _callee0, this);\n      }));\n      function getCryptoData(_x7) {\n        return _getCryptoData.apply(this, arguments);\n      }\n      return getCryptoData;\n    }()\n  }, {\n    key: "getPopularCrypto",\n    value: function () {\n      var _getPopularCrypto = marketApi_asyncToGenerator(/*#__PURE__*/marketApi_regeneratorRuntime().mark(function _callee1() {\n        var _this1 = this;\n        var promises;\n        return marketApi_regeneratorRuntime().wrap(function _callee1$(_context1) {\n          while (1) switch (_context1.prev = _context1.next) {\n            case 0:\n              promises = this.popularCrypto.map(function (symbol) {\n                return _this1.getCryptoData(symbol);\n              });\n              return _context1.abrupt("return", Promise.all(promises));\n            case 2:\n            case "end":\n              return _context1.stop();\n          }\n        }, _callee1, this);\n      }));\n      function getPopularCrypto() {\n        return _getPopularCrypto.apply(this, arguments);\n      }\n      return getPopularCrypto;\n    }() // Forex methods (using mock data for now)\n  }, {\n    key: "getForexRate",\n    value: function () {\n      var _getForexRate = marketApi_asyncToGenerator(/*#__PURE__*/marketApi_regeneratorRuntime().mark(function _callee10(from, to) {\n        return marketApi_regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return this.simulateDelay();\n            case 2:\n              return _context10.abrupt("return", MockDataGenerator.generateForexRate(from, to));\n            case 3:\n            case "end":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function getForexRate(_x8, _x9) {\n        return _getForexRate.apply(this, arguments);\n      }\n      return getForexRate;\n    }()\n  }, {\n    key: "getPopularForex",\n    value: function () {\n      var _getPopularForex = marketApi_asyncToGenerator(/*#__PURE__*/marketApi_regeneratorRuntime().mark(function _callee11() {\n        var _this10 = this;\n        var promises;\n        return marketApi_regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              promises = this.popularForex.map(function (pair) {\n                var _pair$split = pair.split(\'/\'),\n                  _pair$split2 = marketApi_slicedToArray(_pair$split, 2),\n                  from = _pair$split2[0],\n                  to = _pair$split2[1];\n                return _this10.getForexRate(from, to);\n              });\n              return _context11.abrupt("return", Promise.all(promises));\n            case 2:\n            case "end":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function getPopularForex() {\n        return _getPopularForex.apply(this, arguments);\n      }\n      return getPopularForex;\n    }() // Economic indicators (using mock data for now)\n  }, {\n    key: "getEconomicIndicators",\n    value: function () {\n      var _getEconomicIndicators = marketApi_asyncToGenerator(/*#__PURE__*/marketApi_regeneratorRuntime().mark(function _callee12() {\n        var indicators;\n        return marketApi_regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return this.simulateDelay();\n            case 2:\n              indicators = [\'GDP Growth\', \'Inflation Rate\', \'Unemployment Rate\', \'Interest Rate\', \'Consumer Confidence\', \'Housing Starts\', \'Retail Sales\', \'Industrial Production\'];\n              return _context12.abrupt("return", indicators.map(function (name) {\n                return MockDataGenerator.generateEconomicIndicator(name);\n              }));\n            case 4:\n            case "end":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }));\n      function getEconomicIndicators() {\n        return _getEconomicIndicators.apply(this, arguments);\n      }\n      return getEconomicIndicators;\n    }() // WebSocket methods\n  }, {\n    key: "connectWebSocket",\n    value: function () {\n      var _connectWebSocket = marketApi_asyncToGenerator(/*#__PURE__*/marketApi_regeneratorRuntime().mark(function _callee13() {\n        return marketApi_regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              return _context13.abrupt("return", this.webSocketService.connect());\n            case 1:\n            case "end":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n      function connectWebSocket() {\n        return _connectWebSocket.apply(this, arguments);\n      }\n      return connectWebSocket;\n    }()\n  }, {\n    key: "subscribeToSymbol",\n    value: function subscribeToSymbol(symbol) {\n      return this.webSocketService.subscribe(symbol);\n    }\n  }, {\n    key: "unsubscribeFromSymbol",\n    value: function unsubscribeFromSymbol(symbol) {\n      return this.webSocketService.unsubscribe(symbol);\n    }\n  }, {\n    key: "getWebSocketStatus",\n    value: function getWebSocketStatus() {\n      return this.webSocketService.isConnectedStatus();\n    }\n  }, {\n    key: "getSubscribedSymbols",\n    value: function getSubscribedSymbols() {\n      return this.webSocketService.getSubscribedSymbols();\n    }\n\n    // Utility methods\n  }, {\n    key: "simulateDelay",\n    value: function () {\n      var _simulateDelay = marketApi_asyncToGenerator(/*#__PURE__*/marketApi_regeneratorRuntime().mark(function _callee14() {\n        var min,\n          max,\n          delay,\n          _args14 = arguments;\n        return marketApi_regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              min = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : 100;\n              max = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : 500;\n              delay = Math.random() * (max - min) + min;\n              return _context14.abrupt("return", new Promise(function (resolve) {\n                return setTimeout(resolve, delay);\n              }));\n            case 4:\n            case "end":\n              return _context14.stop();\n          }\n        }, _callee14);\n      }));\n      function simulateDelay() {\n        return _simulateDelay.apply(this, arguments);\n      }\n      return simulateDelay;\n    }() // Get available symbols for testing\n  }, {\n    key: "getAvailableSymbols",\n    value: function getAvailableSymbols() {\n      return {\n        stocks: this.popularStocks,\n        crypto: this.popularCrypto,\n        forex: this.popularForex\n      };\n    }\n\n    // Get API status\n  }, {\n    key: "getApiStatus",\n    value: function getApiStatus() {\n      return {\n        finnhub: {\n          configured: true,\n          apiKey: API_CONFIG.FINNHUB.API_KEY ? \'Set\' : \'Not Set\',\n          baseUrl: API_CONFIG.FINNHUB.BASE_URL,\n          status: \'Active - Real API calls enabled\'\n        },\n        mockData: {\n          enabled: this.useMockData,\n          available: true,\n          note: \'Available as fallback if API calls fail\'\n        },\n        webSocket: {\n          connected: this.webSocketService.isConnectedStatus(),\n          subscribedSymbols: this.getSubscribedSymbols(),\n          status: this.webSocketService.isConnectedStatus() ? \'Connected\' : \'Disconnected\'\n        }\n      };\n    }\n\n    // Get WebSocket service instance for direct access\n  }, {\n    key: "getWebSocketService",\n    value: function getWebSocketService() {\n      return this.webSocketService;\n    }\n\n    // Get real-time data cache\n  }, {\n    key: "getRealTimeDataCache",\n    value: function getRealTimeDataCache() {\n      return new Map(this.realTimeData);\n    }\n\n    // Clear real-time data cache\n  }, {\n    key: "clearRealTimeDataCache",\n    value: function clearRealTimeDataCache() {\n      this.realTimeData.clear();\n    }\n  }]);\n}();\nvar marketApi_marketApiService = new MarketApiService();\n\n// Export WebSocket service for direct access if needed\nvar webSocketService = marketApi_marketApiService.getWebSocketService();\n;// ./wwwroot/js/react/hooks/useRealTimeStockData.ts\nfunction useRealTimeStockData_typeof(o) { "@babel/helpers - typeof"; return useRealTimeStockData_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, useRealTimeStockData_typeof(o); }\nfunction useRealTimeStockData_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ useRealTimeStockData_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == useRealTimeStockData_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(useRealTimeStockData_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction useRealTimeStockData_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction useRealTimeStockData_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { useRealTimeStockData_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { useRealTimeStockData_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction useRealTimeStockData_slicedToArray(r, e) { return useRealTimeStockData_arrayWithHoles(r) || useRealTimeStockData_iterableToArrayLimit(r, e) || useRealTimeStockData_unsupportedIterableToArray(r, e) || useRealTimeStockData_nonIterableRest(); }\nfunction useRealTimeStockData_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction useRealTimeStockData_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return useRealTimeStockData_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? useRealTimeStockData_arrayLikeToArray(r, a) : void 0; } }\nfunction useRealTimeStockData_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction useRealTimeStockData_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction useRealTimeStockData_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n/**\r\n * React Hook for Real-time Stock Data\r\n * \r\n * This hook provides real-time stock price updates using WebSocket connections\r\n * through the Finnhub API. It automatically manages subscriptions and cleanup.\r\n * \r\n * @param symbol - The stock symbol to track (e.g., \'AAPL\', \'MSFT\')\r\n * @returns Object containing quote data, connection status, and utility functions\r\n */\nvar useRealTimeStockData = function useRealTimeStockData(symbol) {\n  var _useState = useState(null),\n    _useState2 = useRealTimeStockData_slicedToArray(_useState, 2),\n    quote = _useState2[0],\n    setQuote = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = useRealTimeStockData_slicedToArray(_useState3, 2),\n    isConnected = _useState4[0],\n    setIsConnected = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = useRealTimeStockData_slicedToArray(_useState5, 2),\n    error = _useState6[0],\n    setError = _useState6[1];\n  var _useState7 = useState(true),\n    _useState8 = useRealTimeStockData_slicedToArray(_useState7, 2),\n    isLoading = _useState8[0],\n    setIsLoading = _useState8[1];\n  useEffect(function () {\n    var isMounted = true;\n    var handlePriceUpdate = function handlePriceUpdate(updatedQuote) {\n      if (isMounted) {\n        setQuote(updatedQuote);\n        setIsLoading(false);\n      }\n    };\n    var initializeData = /*#__PURE__*/function () {\n      var _ref = useRealTimeStockData_asyncToGenerator(/*#__PURE__*/useRealTimeStockData_regeneratorRuntime().mark(function _callee() {\n        var initialQuote;\n        return useRealTimeStockData_regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              setIsLoading(true);\n              setError(null);\n\n              // Get initial quote\n              _context.next = 5;\n              return marketApiService.getStockQuote(symbol);\n            case 5:\n              initialQuote = _context.sent;\n              if (isMounted) {\n                setQuote(initialQuote);\n                setIsLoading(false);\n              }\n\n              // Subscribe to real-time updates\n              marketApiService.subscribeToPriceUpdates(symbol, handlePriceUpdate);\n\n              // Check WebSocket connection status\n              setIsConnected(marketApiService.getWebSocketStatus());\n\n              // Connect WebSocket if not already connected\n              if (marketApiService.getWebSocketStatus()) {\n                _context.next = 20;\n                break;\n              }\n              _context.prev = 10;\n              _context.next = 13;\n              return marketApiService.connectWebSocket();\n            case 13:\n              setIsConnected(true);\n              _context.next = 20;\n              break;\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context["catch"](10);\n              console.error(\'WebSocket connection failed:\', _context.t0);\n              setError(\'Real-time updates unavailable\');\n            case 20:\n              _context.next = 25;\n              break;\n            case 22:\n              _context.prev = 22;\n              _context.t1 = _context["catch"](0);\n              if (isMounted) {\n                setError(_context.t1 instanceof Error ? _context.t1.message : \'Failed to load stock data\');\n                setIsLoading(false);\n              }\n            case 25:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 22], [10, 16]]);\n      }));\n      return function initializeData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    initializeData();\n    return function () {\n      isMounted = false;\n      marketApiService.unsubscribeFromPriceUpdates(symbol, handlePriceUpdate);\n    };\n  }, [symbol]);\n  var refreshData = /*#__PURE__*/function () {\n    var _ref2 = useRealTimeStockData_asyncToGenerator(/*#__PURE__*/useRealTimeStockData_regeneratorRuntime().mark(function _callee2() {\n      var updatedQuote;\n      return useRealTimeStockData_regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            setIsLoading(true);\n            setError(null);\n            _context2.next = 5;\n            return marketApiService.getStockQuote(symbol);\n          case 5:\n            updatedQuote = _context2.sent;\n            setQuote(updatedQuote);\n            _context2.next = 12;\n            break;\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2["catch"](0);\n            setError(_context2.t0 instanceof Error ? _context2.t0.message : \'Failed to refresh data\');\n          case 12:\n            _context2.prev = 12;\n            setIsLoading(false);\n            return _context2.finish(12);\n          case 15:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[0, 9, 12, 15]]);\n    }));\n    return function refreshData() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var toggleRealTime = /*#__PURE__*/function () {\n    var _ref3 = useRealTimeStockData_asyncToGenerator(/*#__PURE__*/useRealTimeStockData_regeneratorRuntime().mark(function _callee3() {\n      return useRealTimeStockData_regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!isConnected) {\n              _context3.next = 5;\n              break;\n            }\n            // Disconnect WebSocket\n            marketApiService.unsubscribeFromPriceUpdates(symbol, function () {});\n            setIsConnected(false);\n            _context3.next = 15;\n            break;\n          case 5:\n            _context3.prev = 5;\n            _context3.next = 8;\n            return marketApiService.connectWebSocket();\n          case 8:\n            marketApiService.subscribeToPriceUpdates(symbol, function (updatedQuote) {\n              setQuote(updatedQuote);\n            });\n            setIsConnected(true);\n            _context3.next = 15;\n            break;\n          case 12:\n            _context3.prev = 12;\n            _context3.t0 = _context3["catch"](5);\n            setError(\'Failed to enable real-time updates\');\n          case 15:\n          case "end":\n            return _context3.stop();\n        }\n      }, _callee3, null, [[5, 12]]);\n    }));\n    return function toggleRealTime() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return {\n    quote: quote,\n    isConnected: isConnected,\n    error: error,\n    isLoading: isLoading,\n    refreshData: refreshData,\n    toggleRealTime: toggleRealTime,\n    isRealTime: (quote === null || quote === void 0 ? void 0 : quote.isRealTime) || false,\n    lastUpdated: quote === null || quote === void 0 ? void 0 : quote.lastUpdated,\n    // Helper properties for easy access\n    price: (quote === null || quote === void 0 ? void 0 : quote.price) || 0,\n    change: (quote === null || quote === void 0 ? void 0 : quote.change) || 0,\n    changePercent: (quote === null || quote === void 0 ? void 0 : quote.changePercent) || 0,\n    volume: (quote === null || quote === void 0 ? void 0 : quote.volume) || 0,\n    name: (quote === null || quote === void 0 ? void 0 : quote.name) || symbol\n  };\n};\n\n/**\r\n * Hook for multiple stock symbols\r\n */\nvar useMultipleRealTimeStocks = function useMultipleRealTimeStocks(symbols) {\n  var _useState9 = (0,react.useState)(new Map()),\n    _useState0 = useRealTimeStockData_slicedToArray(_useState9, 2),\n    quotes = _useState0[0],\n    setQuotes = _useState0[1];\n  var _useState1 = (0,react.useState)(false),\n    _useState10 = useRealTimeStockData_slicedToArray(_useState1, 2),\n    isConnected = _useState10[0],\n    setIsConnected = _useState10[1];\n  var _useState11 = (0,react.useState)(null),\n    _useState12 = useRealTimeStockData_slicedToArray(_useState11, 2),\n    error = _useState12[0],\n    setError = _useState12[1];\n  var _useState13 = (0,react.useState)(true),\n    _useState14 = useRealTimeStockData_slicedToArray(_useState13, 2),\n    isLoading = _useState14[0],\n    setIsLoading = _useState14[1];\n  (0,react.useEffect)(function () {\n    var isMounted = true;\n    var handlePriceUpdate = function handlePriceUpdate(symbol, updatedQuote) {\n      if (isMounted) {\n        setQuotes(function (prev) {\n          return new Map(prev).set(symbol, updatedQuote);\n        });\n      }\n    };\n    var initializeData = /*#__PURE__*/function () {\n      var _ref4 = useRealTimeStockData_asyncToGenerator(/*#__PURE__*/useRealTimeStockData_regeneratorRuntime().mark(function _callee4() {\n        var initialQuotes, quotesMap;\n        return useRealTimeStockData_regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              setIsLoading(true);\n              setError(null);\n\n              // Get initial quotes for all symbols\n              _context4.next = 5;\n              return marketApi_marketApiService.getMultipleStockQuotes(symbols);\n            case 5:\n              initialQuotes = _context4.sent;\n              if (isMounted) {\n                quotesMap = new Map();\n                initialQuotes.forEach(function (quote) {\n                  quotesMap.set(quote.symbol, quote);\n                  // Subscribe to real-time updates for each symbol\n                  marketApi_marketApiService.subscribeToPriceUpdates(quote.symbol, function (updatedQuote) {\n                    handlePriceUpdate(quote.symbol, updatedQuote);\n                  });\n                });\n                setQuotes(quotesMap);\n                setIsLoading(false);\n              }\n\n              // Check WebSocket connection status\n              setIsConnected(marketApi_marketApiService.getWebSocketStatus());\n\n              // Connect WebSocket if not already connected\n              if (marketApi_marketApiService.getWebSocketStatus()) {\n                _context4.next = 19;\n                break;\n              }\n              _context4.prev = 9;\n              _context4.next = 12;\n              return marketApi_marketApiService.connectWebSocket();\n            case 12:\n              setIsConnected(true);\n              _context4.next = 19;\n              break;\n            case 15:\n              _context4.prev = 15;\n              _context4.t0 = _context4["catch"](9);\n              console.error(\'WebSocket connection failed:\', _context4.t0);\n              setError(\'Real-time updates unavailable\');\n            case 19:\n              _context4.next = 24;\n              break;\n            case 21:\n              _context4.prev = 21;\n              _context4.t1 = _context4["catch"](0);\n              if (isMounted) {\n                setError(_context4.t1 instanceof Error ? _context4.t1.message : \'Failed to load stock data\');\n                setIsLoading(false);\n              }\n            case 24:\n            case "end":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[0, 21], [9, 15]]);\n      }));\n      return function initializeData() {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n    initializeData();\n    return function () {\n      isMounted = false;\n      // Unsubscribe from all symbols\n      symbols.forEach(function (symbol) {\n        marketApi_marketApiService.unsubscribeFromPriceUpdates(symbol, function () {});\n      });\n    };\n  }, [symbols.join(\',\')]); // Re-run when symbols change\n\n  var refreshData = /*#__PURE__*/function () {\n    var _ref5 = useRealTimeStockData_asyncToGenerator(/*#__PURE__*/useRealTimeStockData_regeneratorRuntime().mark(function _callee5() {\n      var updatedQuotes, quotesMap;\n      return useRealTimeStockData_regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            setIsLoading(true);\n            setError(null);\n            _context5.next = 5;\n            return marketApi_marketApiService.getMultipleStockQuotes(symbols);\n          case 5:\n            updatedQuotes = _context5.sent;\n            quotesMap = new Map();\n            updatedQuotes.forEach(function (quote) {\n              quotesMap.set(quote.symbol, quote);\n            });\n            setQuotes(quotesMap);\n            _context5.next = 14;\n            break;\n          case 11:\n            _context5.prev = 11;\n            _context5.t0 = _context5["catch"](0);\n            setError(_context5.t0 instanceof Error ? _context5.t0.message : \'Failed to refresh data\');\n          case 14:\n            _context5.prev = 14;\n            setIsLoading(false);\n            return _context5.finish(14);\n          case 17:\n          case "end":\n            return _context5.stop();\n        }\n      }, _callee5, null, [[0, 11, 14, 17]]);\n    }));\n    return function refreshData() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  return {\n    quotes: quotes,\n    isConnected: isConnected,\n    error: error,\n    isLoading: isLoading,\n    refreshData: refreshData,\n    getQuote: function getQuote(symbol) {\n      return quotes.get(symbol) || null;\n    },\n    // Helper properties for easy access\n    allQuotes: Array.from(quotes.values()),\n    totalValue: Array.from(quotes.values()).reduce(function (sum, quote) {\n      return sum + quote.price;\n    }, 0)\n  };\n};\n;// ./wwwroot/js/react/components/RealTimeStockTicker.tsx\nfunction RealTimeStockTicker_typeof(o) { "@babel/helpers - typeof"; return RealTimeStockTicker_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, RealTimeStockTicker_typeof(o); }\nfunction RealTimeStockTicker_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ RealTimeStockTicker_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == RealTimeStockTicker_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(RealTimeStockTicker_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction RealTimeStockTicker_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction RealTimeStockTicker_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { RealTimeStockTicker_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { RealTimeStockTicker_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction RealTimeStockTicker_slicedToArray(r, e) { return RealTimeStockTicker_arrayWithHoles(r) || RealTimeStockTicker_iterableToArrayLimit(r, e) || RealTimeStockTicker_unsupportedIterableToArray(r, e) || RealTimeStockTicker_nonIterableRest(); }\nfunction RealTimeStockTicker_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction RealTimeStockTicker_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return RealTimeStockTicker_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? RealTimeStockTicker_arrayLikeToArray(r, a) : void 0; } }\nfunction RealTimeStockTicker_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction RealTimeStockTicker_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction RealTimeStockTicker_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\n/**\r\n * Real-time Stock Ticker Component\r\n * \r\n * Displays live stock prices with WebSocket real-time updates\r\n * Automatically connects to Finnhub WebSocket API for live data\r\n */\nvar RealTimeStockTicker = function RealTimeStockTicker(_ref) {\n  var _ref$symbols = _ref.symbols,\n    symbols = _ref$symbols === void 0 ? [\'AAPL\', \'MSFT\', \'GOOGL\', \'AMZN\', \'TSLA\'] : _ref$symbols,\n    _ref$autoConnect = _ref.autoConnect,\n    autoConnect = _ref$autoConnect === void 0 ? true : _ref$autoConnect,\n    _ref$showConnectionSt = _ref.showConnectionStatus,\n    showConnectionStatus = _ref$showConnectionSt === void 0 ? true : _ref$showConnectionSt,\n    _ref$refreshInterval = _ref.refreshInterval,\n    refreshInterval = _ref$refreshInterval === void 0 ? 0 : _ref$refreshInterval;\n  var _useState = (0,react.useState)(false),\n    _useState2 = RealTimeStockTicker_slicedToArray(_useState, 2),\n    isWebSocketConnected = _useState2[0],\n    setIsWebSocketConnected = _useState2[1];\n  var _useState3 = (0,react.useState)(null),\n    _useState4 = RealTimeStockTicker_slicedToArray(_useState3, 2),\n    connectionError = _useState4[0],\n    setConnectionError = _useState4[1];\n  var _useState5 = (0,react.useState)(0),\n    _useState6 = RealTimeStockTicker_slicedToArray(_useState5, 2),\n    manualRefreshCount = _useState6[0],\n    setManualRefreshCount = _useState6[1];\n  var _useMultipleRealTimeS = useMultipleRealTimeStocks(symbols),\n    quotes = _useMultipleRealTimeS.quotes,\n    isConnected = _useMultipleRealTimeS.isConnected,\n    error = _useMultipleRealTimeS.error,\n    isLoading = _useMultipleRealTimeS.isLoading,\n    refreshData = _useMultipleRealTimeS.refreshData,\n    allQuotes = _useMultipleRealTimeS.allQuotes,\n    totalValue = _useMultipleRealTimeS.totalValue;\n\n  // Manual refresh interval\n  (0,react.useEffect)(function () {\n    if (refreshInterval > 0) {\n      var interval = setInterval(function () {\n        refreshData();\n        setManualRefreshCount(function (prev) {\n          return prev + 1;\n        });\n      }, refreshInterval);\n      return function () {\n        return clearInterval(interval);\n      };\n    }\n  }, [refreshInterval, refreshData]);\n\n  // WebSocket connection status\n  (0,react.useEffect)(function () {\n    var checkWebSocketStatus = function checkWebSocketStatus() {\n      var status = marketApi_marketApiService.getWebSocketStatus();\n      setIsWebSocketConnected(status);\n    };\n    if (autoConnect) {\n      // Try to connect WebSocket if not connected\n      if (!marketApi_marketApiService.getWebSocketStatus()) {\n        marketApi_marketApiService.connectWebSocket().then(function () {\n          setIsWebSocketConnected(true);\n          setConnectionError(null);\n        })["catch"](function (error) {\n          console.error(\'WebSocket connection failed:\', error);\n          setConnectionError(\'Real-time updates unavailable\');\n          setIsWebSocketConnected(false);\n        });\n      } else {\n        setIsWebSocketConnected(true);\n      }\n    }\n\n    // Check status periodically\n    var statusInterval = setInterval(checkWebSocketStatus, 5000);\n    return function () {\n      return clearInterval(statusInterval);\n    };\n  }, [autoConnect]);\n  var handleManualRefresh = /*#__PURE__*/function () {\n    var _ref2 = RealTimeStockTicker_asyncToGenerator(/*#__PURE__*/RealTimeStockTicker_regeneratorRuntime().mark(function _callee() {\n      return RealTimeStockTicker_regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return refreshData();\n          case 3:\n            setManualRefreshCount(function (prev) {\n              return prev + 1;\n            });\n            _context.next = 9;\n            break;\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context["catch"](0);\n            console.error(\'Manual refresh failed:\', _context.t0);\n          case 9:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee, null, [[0, 6]]);\n    }));\n    return function handleManualRefresh() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var toggleWebSocket = /*#__PURE__*/function () {\n    var _ref3 = RealTimeStockTicker_asyncToGenerator(/*#__PURE__*/RealTimeStockTicker_regeneratorRuntime().mark(function _callee2() {\n      return RealTimeStockTicker_regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!isWebSocketConnected) {\n              _context2.next = 5;\n              break;\n            }\n            // Disconnect\n            marketApi_marketApiService[\'webSocketService\'].disconnect();\n            setIsWebSocketConnected(false);\n            _context2.next = 15;\n            break;\n          case 5:\n            _context2.prev = 5;\n            _context2.next = 8;\n            return marketApi_marketApiService.connectWebSocket();\n          case 8:\n            setIsWebSocketConnected(true);\n            setConnectionError(null);\n            _context2.next = 15;\n            break;\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2["catch"](5);\n            setConnectionError(\'Failed to connect\');\n          case 15:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[5, 12]]);\n    }));\n    return function toggleWebSocket() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  if (isLoading && allQuotes.length === 0) {\n    return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "stock-ticker loading",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "loading-spinner",\n        children: "Loading stock data..."\n      })\n    });\n  }\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n    className: "stock-ticker",\n    children: [showConnectionStatus && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "connection-status",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "status-indicators",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n          className: "status-dot ".concat(isWebSocketConnected ? \'connected\' : \'disconnected\')\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n          className: "status-text",\n          children: isWebSocketConnected ? \'Real-time Connected\' : \'Real-time Disconnected\'\n        }), connectionError && /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n          className: "error-text",\n          children: connectionError\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "connection-controls",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n          onClick: toggleWebSocket,\n          className: "btn ".concat(isWebSocketConnected ? \'btn-danger\' : \'btn-success\'),\n          children: isWebSocketConnected ? \'Disconnect\' : \'Connect\'\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("button", {\n          onClick: handleManualRefresh,\n          className: "btn btn-primary",\n          children: ["Refresh (", manualRefreshCount, ")"]\n        })]\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "ticker-container",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "ticker-header",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n          children: "Live Stock Prices"\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "ticker-info",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n            children: ["Total Value: $", totalValue.toLocaleString()]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n            children: ["Last Update: ", new Date().toLocaleTimeString()]\n          })]\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "ticker-grid",\n        children: allQuotes.map(function (quote) {\n          return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "stock-card",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "stock-header",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n                className: "stock-symbol",\n                children: quote.symbol\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "stock-name",\n                children: quote.name\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "real-time-indicator ".concat(quote.isRealTime ? \'active\' : \'inactive\'),\n                children: quote.isRealTime ? \'LIVE\' : \'CACHED\'\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "stock-price",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n                className: "price",\n                children: ["$", quote.price.toFixed(2)]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n                className: "change ".concat(quote.change >= 0 ? \'positive\' : \'negative\'),\n                children: [quote.change >= 0 ? \'+\' : \'\', quote.change.toFixed(2), " (", quote.changePercent.toFixed(2), "%)"]\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "stock-details",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n                className: "volume",\n                children: ["Vol: ", quote.volume.toLocaleString()]\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                className: "last-updated",\n                children: quote.lastUpdated ? new Date(quote.lastUpdated).toLocaleTimeString() : \'N/A\'\n              })]\n            })]\n          }, quote.symbol);\n        })\n      })]\n    }), error && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "error-message",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("strong", {\n        children: "Error:"\n      }), " ", error]\n    })]\n  });\n};\n/* harmony default export */ const components_RealTimeStockTicker = (RealTimeStockTicker);\n// EXTERNAL MODULE: ./wwwroot/js/react/components/CongressionalTrading.tsx + 1 modules\nvar CongressionalTrading = __webpack_require__(43667);\n// EXTERNAL MODULE: ./wwwroot/js/react/components/DashboardCard.tsx\nvar DashboardCard = __webpack_require__(18020);\n;// ./wwwroot/js/react/components/StockDetails.jsx\nfunction StockDetails_typeof(o) { "@babel/helpers - typeof"; return StockDetails_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, StockDetails_typeof(o); }\nfunction StockDetails_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ StockDetails_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == StockDetails_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(StockDetails_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction StockDetails_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction StockDetails_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { StockDetails_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { StockDetails_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction StockDetails_slicedToArray(r, e) { return StockDetails_arrayWithHoles(r) || StockDetails_iterableToArrayLimit(r, e) || StockDetails_unsupportedIterableToArray(r, e) || StockDetails_nonIterableRest(); }\nfunction StockDetails_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction StockDetails_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return StockDetails_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? StockDetails_arrayLikeToArray(r, a) : void 0; } }\nfunction StockDetails_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction StockDetails_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction StockDetails_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\n\n/**\r\n * Stock Details Component\r\n * \r\n * Displays detailed information about a specific stock\r\n * including price history, key metrics, and news\r\n */\n\nfunction StockDetails(_ref) {\n  var _ref$symbol = _ref.symbol,\n    symbol = _ref$symbol === void 0 ? \'AAPL\' : _ref$symbol;\n  var _useAppContext = useAppContext(),\n    isLoading = _useAppContext.isLoading,\n    error = _useAppContext.error;\n  var _useState = (0,react.useState)(\'overview\'),\n    _useState2 = StockDetails_slicedToArray(_useState, 2),\n    activeTab = _useState2[0],\n    setActiveTab = _useState2[1];\n  var _useState3 = (0,react.useState)(null),\n    _useState4 = StockDetails_slicedToArray(_useState3, 2),\n    stockData = _useState4[0],\n    setStockData = _useState4[1];\n  var _useState5 = (0,react.useState)(true),\n    _useState6 = StockDetails_slicedToArray(_useState5, 2),\n    loading = _useState6[0],\n    setLoading = _useState6[1];\n  var _useState7 = (0,react.useState)(null),\n    _useState8 = StockDetails_slicedToArray(_useState7, 2),\n    stockError = _useState8[0],\n    setStockError = _useState8[1];\n\n  // Fetch stock data when component mounts or symbol changes\n  (0,react.useEffect)(function () {\n    var fetchStockData = /*#__PURE__*/function () {\n      var _ref2 = StockDetails_asyncToGenerator(/*#__PURE__*/StockDetails_regeneratorRuntime().mark(function _callee() {\n        return StockDetails_regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              setLoading(true);\n              setStockError(null);\n\n              // In a real app, this would be an API call\n              // For demo purposes, we\'re using a timeout to simulate network request\n              _context.next = 5;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 1000);\n              });\n            case 5:\n              // Mock stock data\n              setStockData({\n                symbol: symbol,\n                name: symbol === \'AAPL\' ? \'Apple Inc.\' : symbol === \'MSFT\' ? \'Microsoft Corporation\' : symbol === \'GOOGL\' ? \'Alphabet Inc.\' : \'Unknown Company\',\n                price: 178.72,\n                change: +2.35,\n                changePercent: +1.33,\n                marketCap: \'2.82T\',\n                peRatio: 29.45,\n                dividend: 0.92,\n                dividendYield: 0.51,\n                volume: \'52.3M\',\n                avgVolume: \'58.7M\',\n                high52Week: 199.62,\n                low52Week: 143.90,\n                open: 176.15,\n                previousClose: 176.37,\n                news: [{\n                  id: 1,\n                  title: "".concat(symbol, " Announces New Product Line"),\n                  date: \'2023-06-15\',\n                  source: \'Financial Times\'\n                }, {\n                  id: 2,\n                  title: "".concat(symbol, " Exceeds Quarterly Earnings Expectations"),\n                  date: \'2023-05-02\',\n                  source: \'Wall Street Journal\'\n                }, {\n                  id: 3,\n                  title: "Analysts Raise Price Target for ".concat(symbol),\n                  date: \'2023-04-18\',\n                  source: \'Bloomberg\'\n                }]\n              });\n              setLoading(false);\n              _context.next = 14;\n              break;\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context["catch"](0);\n              console.error("Failed to fetch data for ".concat(symbol, ":"), _context.t0);\n              setStockError("Failed to load data for ".concat(symbol, ". Please try again later."));\n              setLoading(false);\n            case 14:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 9]]);\n      }));\n      return function fetchStockData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    fetchStockData();\n  }, [symbol]);\n  if (loading || isLoading) {\n    return /*#__PURE__*/(0,jsx_runtime.jsx)(common_Loading, {\n      message: "Loading data for ".concat(symbol, "...")\n    });\n  }\n  if (stockError || error) {\n    return /*#__PURE__*/(0,jsx_runtime.jsx)(common_ErrorMessage, {\n      message: stockError || error\n    });\n  }\n  if (!stockData) {\n    return /*#__PURE__*/(0,jsx_runtime.jsx)(common_ErrorMessage, {\n      message: "No data available for ".concat(symbol)\n    });\n  }\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n    className: "stock-details",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "card shadow-sm mb-4",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "card-body",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "d-flex justify-content-between align-items-start mb-3",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h2", {\n              className: "mb-0",\n              children: stockData.name\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "text-muted",\n              children: stockData.symbol\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "text-end",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("h3", {\n              className: "mb-0",\n              children: ["$", stockData.price.toFixed(2)]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: stockData.change >= 0 ? \'text-success\' : \'text-danger\',\n              children: [stockData.change >= 0 ? \'+\' : \'\', stockData.change.toFixed(2), "(", stockData.change >= 0 ? \'+\' : \'\', stockData.changePercent.toFixed(2), "%)"]\n            })]\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "row mb-3",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "col-md-3 col-6 mb-2",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "text-muted small",\n              children: "Market Cap"\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              children: ["$", stockData.marketCap]\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "col-md-3 col-6 mb-2",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "text-muted small",\n              children: "P/E Ratio"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              children: stockData.peRatio\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "col-md-3 col-6 mb-2",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "text-muted small",\n              children: "Dividend Yield"\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              children: [stockData.dividendYield, "%"]\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "col-md-3 col-6 mb-2",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "text-muted small",\n              children: "Volume"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              children: stockData.volume\n            })]\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "d-flex gap-2",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("button", {\n            className: "btn btn-primary",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n              className: "bi bi-plus-circle me-1"\n            }), " Add to Portfolio"]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("button", {\n            className: "btn btn-outline-secondary",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n              className: "bi bi-bell me-1"\n            }), " Set Alert"]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("button", {\n            className: "btn btn-outline-secondary",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n              className: "bi bi-star me-1"\n            }), " Add to Watchlist"]\n          })]\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)("ul", {\n      className: "nav nav-tabs mb-4",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n        className: "nav-item",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n          className: "nav-link ".concat(activeTab === \'overview\' ? \'active\' : \'\'),\n          onClick: function onClick() {\n            return setActiveTab(\'overview\');\n          },\n          children: "Overview"\n        })\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n        className: "nav-item",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n          className: "nav-link ".concat(activeTab === \'chart\' ? \'active\' : \'\'),\n          onClick: function onClick() {\n            return setActiveTab(\'chart\');\n          },\n          children: "Chart"\n        })\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n        className: "nav-item",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n          className: "nav-link ".concat(activeTab === \'financials\' ? \'active\' : \'\'),\n          onClick: function onClick() {\n            return setActiveTab(\'financials\');\n          },\n          children: "Financials"\n        })\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n        className: "nav-item",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n          className: "nav-link ".concat(activeTab === \'news\' ? \'active\' : \'\'),\n          onClick: function onClick() {\n            return setActiveTab(\'news\');\n          },\n          children: "News"\n        })\n      })]\n    }), activeTab === \'overview\' && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "row",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "col-md-8",\n        children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "card shadow-sm mb-4",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "card-header bg-white",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("h5", {\n              className: "card-title mb-0",\n              children: "Price History"\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "card-body",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "chart-placeholder",\n              style: {\n                height: \'300px\',\n                position: \'relative\'\n              },\n              children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "position-absolute top-50 start-50 translate-middle text-center",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                  className: "text-muted mb-2",\n                  children: /*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n                    className: "bi bi-graph-up fs-1"\n                  })\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("p", {\n                  className: "text-muted",\n                  children: ["In a real implementation, this would be a chart showing price history for ", stockData.symbol, "."]\n                })]\n              })\n            })\n          })]\n        })\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "col-md-4",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "card shadow-sm mb-4",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "card-header bg-white",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("h5", {\n              className: "card-title mb-0",\n              children: "Key Statistics"\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "card-body p-0",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("table", {\n              className: "table table-sm m-0",\n              children: /*#__PURE__*/(0,jsx_runtime.jsxs)("tbody", {\n                children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("tr", {\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("td", {\n                    children: "Open"\n                  }), /*#__PURE__*/(0,jsx_runtime.jsxs)("td", {\n                    className: "text-end",\n                    children: ["$", stockData.open.toFixed(2)]\n                  })]\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("tr", {\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("td", {\n                    children: "Previous Close"\n                  }), /*#__PURE__*/(0,jsx_runtime.jsxs)("td", {\n                    className: "text-end",\n                    children: ["$", stockData.previousClose.toFixed(2)]\n                  })]\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("tr", {\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("td", {\n                    children: "Day Range"\n                  }), /*#__PURE__*/(0,jsx_runtime.jsxs)("td", {\n                    className: "text-end",\n                    children: ["$", (stockData.price - 1.5).toFixed(2), " - $", (stockData.price + 0.8).toFixed(2)]\n                  })]\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("tr", {\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("td", {\n                    children: "52 Week Range"\n                  }), /*#__PURE__*/(0,jsx_runtime.jsxs)("td", {\n                    className: "text-end",\n                    children: ["$", stockData.low52Week.toFixed(2), " - $", stockData.high52Week.toFixed(2)]\n                  })]\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("tr", {\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("td", {\n                    children: "Volume"\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("td", {\n                    className: "text-end",\n                    children: stockData.volume\n                  })]\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("tr", {\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("td", {\n                    children: "Avg. Volume"\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("td", {\n                    className: "text-end",\n                    children: stockData.avgVolume\n                  })]\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("tr", {\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("td", {\n                    children: "Market Cap"\n                  }), /*#__PURE__*/(0,jsx_runtime.jsxs)("td", {\n                    className: "text-end",\n                    children: ["$", stockData.marketCap]\n                  })]\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("tr", {\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("td", {\n                    children: "P/E Ratio"\n                  }), /*#__PURE__*/(0,jsx_runtime.jsx)("td", {\n                    className: "text-end",\n                    children: stockData.peRatio\n                  })]\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("tr", {\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("td", {\n                    children: "Dividend"\n                  }), /*#__PURE__*/(0,jsx_runtime.jsxs)("td", {\n                    className: "text-end",\n                    children: ["$", stockData.dividend, " (", stockData.dividendYield, "%)"]\n                  })]\n                })]\n              })\n            })\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "card shadow-sm",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "card-header bg-white",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("h5", {\n              className: "card-title mb-0",\n              children: "Recent News"\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "card-body p-0",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("ul", {\n              className: "list-group list-group-flush",\n              children: stockData.news.map(function (item) {\n                return /*#__PURE__*/(0,jsx_runtime.jsxs)("li", {\n                  className: "list-group-item",\n                  children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h6", {\n                    className: "mb-1",\n                    children: item.title\n                  }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                    className: "d-flex justify-content-between",\n                    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("small", {\n                      className: "text-muted",\n                      children: item.source\n                    }), /*#__PURE__*/(0,jsx_runtime.jsx)("small", {\n                      className: "text-muted",\n                      children: item.date\n                    })]\n                  })]\n                }, item.id);\n              })\n            })\n          })]\n        })]\n      })]\n    }), activeTab === \'chart\' && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "card shadow-sm",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "card-header bg-white",\n        children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "d-flex justify-content-between align-items-center",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h5", {\n            className: "card-title mb-0",\n            children: "Interactive Chart"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "btn-group",\n            role: "group",\n            children: [\'1D\', \'1W\', \'1M\', \'3M\', \'6M\', \'YTD\', \'1Y\', \'5Y\'].map(function (period) {\n              return /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n                type: "button",\n                className: "btn btn-sm btn-outline-secondary",\n                children: period\n              }, period);\n            })\n          })]\n        })\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "card-body",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "chart-placeholder",\n          style: {\n            height: \'500px\',\n            position: \'relative\'\n          },\n          children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "position-absolute top-50 start-50 translate-middle text-center",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n              className: "text-muted mb-2",\n              children: /*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n                className: "bi bi-graph-up fs-1"\n              })\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("p", {\n              className: "text-muted",\n              children: ["In a real implementation, this would be an interactive chart for ", stockData.symbol, "."]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("p", {\n              className: "text-muted small",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("strong", {\n                children: "Note:"\n              }), " To implement actual charts, install a library like Chart.js or Recharts."]\n            })]\n          })\n        })\n      })]\n    }), activeTab === \'financials\' && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "alert alert-info",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n        className: "bi bi-info-circle me-2"\n      }), "The Financials tab would display quarterly and annual financial statements."]\n    }), activeTab === \'news\' && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "alert alert-info",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n        className: "bi bi-info-circle me-2"\n      }), "The News tab would display a comprehensive list of news articles related to ", stockData.symbol, "."]\n    })]\n  });\n}\n/* harmony default export */ const components_StockDetails = (StockDetails);\n;// ./wwwroot/js/react/components/WebApp.jsx\nfunction WebApp_slicedToArray(r, e) { return WebApp_arrayWithHoles(r) || WebApp_iterableToArrayLimit(r, e) || WebApp_unsupportedIterableToArray(r, e) || WebApp_nonIterableRest(); }\nfunction WebApp_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction WebApp_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return WebApp_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? WebApp_arrayLikeToArray(r, a) : void 0; } }\nfunction WebApp_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction WebApp_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction WebApp_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\nvar WebApp = function WebApp() {\n  var _useState = (0,react.useState)(\'landing\'),\n    _useState2 = WebApp_slicedToArray(_useState, 2),\n    currentView = _useState2[0],\n    setCurrentView = _useState2[1]; // \'landing\' or \'playground\'\n  var _useState3 = (0,react.useState)(null),\n    _useState4 = WebApp_slicedToArray(_useState3, 2),\n    user = _useState4[0],\n    setUser = _useState4[1];\n  var _useState5 = (0,react.useState)(false),\n    _useState6 = WebApp_slicedToArray(_useState5, 2),\n    showPlayground = _useState6[0],\n    setShowPlayground = _useState6[1];\n  var handleLogin = function handleLogin(userData) {\n    setUser(userData);\n    setCurrentView(\'playground\');\n  };\n  var handleRegister = function handleRegister(userData) {\n    setUser(userData);\n    setCurrentView(\'playground\');\n  };\n  var handleDemo = function handleDemo() {\n    setUser({\n      email: \'demo@ezana.com\',\n      name: \'Demo User\'\n    });\n    setCurrentView(\'playground\');\n  };\n  var handleLogout = function handleLogout() {\n    setUser(null);\n    setCurrentView(\'landing\');\n  };\n  var handleBackToLanding = function handleBackToLanding() {\n    setCurrentView(\'landing\');\n  };\n  if (currentView === \'landing\') {\n    return /*#__PURE__*/(0,jsx_runtime.jsx)(components_LandingPage, {\n      onLogin: handleLogin,\n      onRegister: handleRegister,\n      onDemo: handleDemo\n    });\n  }\n\n  // Component Playground View\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n    className: "web-app",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("header", {\n      className: "app-header",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "header-content",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "header-left",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("button", {\n            className: "btn btn-outline-secondary btn-sm",\n            onClick: handleBackToLanding,\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n              className: "bi bi-arrow-left"\n            }), " Back to Landing"]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("h1", {\n            className: "app-title",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n              className: "bi bi-graph-up-arrow"\n            }), " Ezana Component Playground"]\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "header-right",\n          children: user && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "user-info",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n              className: "user-name",\n              children: ["Welcome, ", user.name, "!"]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("button", {\n              className: "btn btn-outline-danger btn-sm",\n              onClick: handleLogout,\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n                className: "bi bi-box-arrow-right"\n              }), " Logout"]\n            })]\n          })\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("main", {\n      className: "app-main",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "playground-container",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "playground-intro",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h2", {\n            children: "Welcome to the Component Playground!"\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("p", {\n            children: ["You\'re now logged in as ", /*#__PURE__*/(0,jsx_runtime.jsx)("strong", {\n              children: user === null || user === void 0 ? void 0 : user.email\n            }), ". Use this playground to test and develop React components for the Ezana application."]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "playground-features",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "feature-item",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n                className: "bi bi-check-circle text-success"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                children: "Test components in isolation"\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "feature-item",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n                className: "bi bi-check-circle text-success"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                children: "Real-time stock data with WebSockets"\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "feature-item",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n                className: "bi bi-check-circle text-success"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                children: "Plaid API integration testing"\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "feature-item",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n                className: "bi bi-check-circle text-success"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                children: "Dashboard and analytics components"\n              })]\n            })]\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "component-sections",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "section-group",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n              children: "Core Components"\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "section-grid",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "section-card",\n                onClick: function onClick() {\n                  return testDashboard();\n                },\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n                  className: "bi bi-speedometer2"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n                  children: "Dashboard"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                  children: "Test the main dashboard component"\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "section-card",\n                onClick: function onClick() {\n                  return testDashboardCard();\n                },\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n                  className: "bi bi-card-text"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n                  children: "Dashboard Cards"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                  children: "Test individual dashboard cards"\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "section-card",\n                onClick: function onClick() {\n                  return testChart();\n                },\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n                  className: "bi bi-graph-up"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n                  children: "Investment Charts"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                  children: "Test chart components"\n                })]\n              })]\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "section-group",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n              children: "Market Data"\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "section-grid",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "section-card",\n                onClick: function onClick() {\n                  return testStockQuotes();\n                },\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n                  className: "bi bi-currency-dollar"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n                  children: "Stock Quotes"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                  children: "Test stock price data"\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "section-card",\n                onClick: function onClick() {\n                  return testRealTimeStockTicker();\n                },\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n                  className: "bi bi-lightning"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n                  children: "Real-Time Ticker"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                  children: "Test WebSocket live data"\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "section-card",\n                onClick: function onClick() {\n                  return testMarketNews();\n                },\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n                  className: "bi bi-newspaper"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n                  children: "Market News"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                  children: "Test news components"\n                })]\n              })]\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "section-group",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n              children: "Advanced Features"\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "section-grid",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "section-card",\n                onClick: function onClick() {\n                  return testCongressionalTrading();\n                },\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n                  className: "bi bi-building"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n                  children: "Congressional Trading"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                  children: "Test trading dashboard"\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "section-card",\n                onClick: function onClick() {\n                  return testPlaidIntegration();\n                },\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n                  className: "bi bi-bank"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n                  children: "Plaid Integration"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                  children: "Test financial data API"\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "section-card",\n                onClick: function onClick() {\n                  return testCryptoData();\n                },\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("i", {\n                  className: "bi bi-currency-bitcoin"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("h4", {\n                  children: "Crypto Data"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                  children: "Test cryptocurrency data"\n                })]\n              })]\n            })]\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          id: "test-results-container",\n          className: "test-results",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "results-header",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n              children: "Test Results"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n              className: "btn btn-outline-secondary btn-sm",\n              onClick: function onClick() {\n                return clearAllTests();\n              },\n              children: "Clear All"\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            id: "test-output",\n            className: "test-output",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n              className: "text-muted",\n              children: "Click on any component card above to start testing..."\n            })\n          })]\n        })]\n      })\n    })]\n  });\n};\n\n// Helper functions for component testing\nfunction testDashboard() {\n  var container = document.getElementById(\'test-output\');\n  if (container) {\n    container.innerHTML = \'<div class="alert alert-info">Testing Dashboard component...</div>\';\n    // This would call the actual test function from the playground\n    if (typeof window.testDashboard === \'function\') {\n      window.testDashboard();\n    }\n  }\n}\nfunction testDashboardCard() {\n  var container = document.getElementById(\'test-output\');\n  if (container) {\n    container.innerHTML = \'<div class="alert alert-info">Testing Dashboard Card component...</div>\';\n    if (typeof window.testDashboardCard === \'function\') {\n      window.testDashboardCard();\n    }\n  }\n}\nfunction testChart() {\n  var container = document.getElementById(\'test-output\');\n  if (container) {\n    container.innerHTML = \'<div class="alert alert-info">Testing Investment Chart component...</div>\';\n    if (typeof window.testChart === \'function\') {\n      window.testChart();\n    }\n  }\n}\nfunction testStockQuotes() {\n  var container = document.getElementById(\'test-output\');\n  if (container) {\n    container.innerHTML = \'<div class="alert alert-info">Testing Stock Quotes...</div>\';\n    if (typeof window.testStockQuotes === \'function\') {\n      window.testStockQuotes();\n    }\n  }\n}\nfunction testRealTimeStockTicker() {\n  var container = document.getElementById(\'test-output\');\n  if (container) {\n    container.innerHTML = \'<div class="alert alert-info">Testing Real-Time Stock Ticker...</div>\';\n    if (typeof window.testRealTimeStockTicker === \'function\') {\n      window.testRealTimeStockTicker();\n    }\n  }\n}\nfunction testMarketNews() {\n  var container = document.getElementById(\'test-output\');\n  if (container) {\n    container.innerHTML = \'<div class="alert alert-info">Testing Market News...</div>\';\n    if (typeof window.testMarketNews === \'function\') {\n      window.testMarketNews();\n    }\n  }\n}\nfunction testCongressionalTrading() {\n  var container = document.getElementById(\'test-output\');\n  if (container) {\n    container.innerHTML = \'<div class="alert alert-info">Testing Congressional Trading Dashboard...</div>\';\n    if (typeof window.testCongressionalTrading === \'function\') {\n      window.testCongressionalTrading();\n    }\n  }\n}\nfunction testPlaidIntegration() {\n  var container = document.getElementById(\'test-output\');\n  if (container) {\n    container.innerHTML = \'<div class="alert alert-info">Testing Plaid API Integration...</div>\';\n    if (typeof window.testPlaidIntegration === \'function\') {\n      window.testPlaidIntegration();\n    }\n  }\n}\nfunction testCryptoData() {\n  var container = document.getElementById(\'test-output\');\n  if (container) {\n    container.innerHTML = \'<div class="alert alert-info">Testing Crypto Data...</div>\';\n    if (typeof window.testCryptoData === \'function\') {\n      window.testCryptoData();\n    }\n  }\n}\nfunction clearAllTests() {\n  var container = document.getElementById(\'test-output\');\n  if (container) {\n    container.innerHTML = \'<p class="text-muted">Click on any component card above to start testing...</p>\';\n  }\n\n  // Clear all test containers\n  var testContainers = [\'dashboard-test-container\', \'card-test-container\', \'chart-test-container\', \'market-api-test-container\', \'congressional-trading-test-container\', \'home-landing-test-container\', \'plaid-test-container\'];\n  testContainers.forEach(function (id) {\n    var element = document.getElementById(id);\n    if (element) {\n      element.innerHTML = \'\';\n    }\n  });\n}\n/* harmony default export */ const components_WebApp = (WebApp);\n;// ./wwwroot/js/react/components/ShadcnDemo.tsx\nfunction ShadcnDemo_typeof(o) { "@babel/helpers - typeof"; return ShadcnDemo_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, ShadcnDemo_typeof(o); }\nfunction ShadcnDemo_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction ShadcnDemo_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ShadcnDemo_ownKeys(Object(t), !0).forEach(function (r) { ShadcnDemo_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ShadcnDemo_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction ShadcnDemo_defineProperty(e, r, t) { return (r = ShadcnDemo_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction ShadcnDemo_toPropertyKey(t) { var i = ShadcnDemo_toPrimitive(t, "string"); return "symbol" == ShadcnDemo_typeof(i) ? i : i + ""; }\nfunction ShadcnDemo_toPrimitive(t, r) { if ("object" != ShadcnDemo_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != ShadcnDemo_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction ShadcnDemo_slicedToArray(r, e) { return ShadcnDemo_arrayWithHoles(r) || ShadcnDemo_iterableToArrayLimit(r, e) || ShadcnDemo_unsupportedIterableToArray(r, e) || ShadcnDemo_nonIterableRest(); }\nfunction ShadcnDemo_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction ShadcnDemo_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return ShadcnDemo_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? ShadcnDemo_arrayLikeToArray(r, a) : void 0; } }\nfunction ShadcnDemo_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction ShadcnDemo_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction ShadcnDemo_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\nvar ShadcnDemo = function ShadcnDemo() {\n  var _useState = (0,react.useState)(\'components\'),\n    _useState2 = ShadcnDemo_slicedToArray(_useState, 2),\n    activeTab = _useState2[0],\n    setActiveTab = _useState2[1];\n  var _useState3 = (0,react.useState)({\n      name: \'\',\n      email: \'\',\n      message: \'\'\n    }),\n    _useState4 = ShadcnDemo_slicedToArray(_useState3, 2),\n    formData = _useState4[0],\n    setFormData = _useState4[1];\n  var handleInputChange = function handleInputChange(e) {\n    setFormData(ShadcnDemo_objectSpread(ShadcnDemo_objectSpread({}, formData), {}, ShadcnDemo_defineProperty({}, e.target.name, e.target.value)));\n  };\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n    className: "min-h-screen bg-background text-foreground p-6",\n    children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "max-w-6xl mx-auto",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "text-center mb-12",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h1", {\n          className: "text-4xl font-bold text-primary mb-4",\n          children: "Shadcn Theme Demo"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n          className: "text-lg text-muted-foreground max-w-2xl mx-auto",\n          children: "Experience the modern design system with CSS custom properties, featuring a beautiful amber/orange color palette and comprehensive theming support."\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "flex justify-center mb-8",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "flex bg-muted rounded-lg p-1",\n          children: [\'components\', \'colors\', \'typography\', \'forms\'].map(function (tab) {\n            return /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n              onClick: function onClick() {\n                return setActiveTab(tab);\n              },\n              className: "px-4 py-2 rounded-md font-medium transition-all ".concat(activeTab === tab ? \'bg-background text-foreground shadow-sm\' : \'text-muted-foreground hover:text-foreground\'),\n              children: tab.charAt(0).toUpperCase() + tab.slice(1)\n            }, tab);\n          })\n        })\n      }), activeTab === \'components\' && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "space-y-8",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("section", {\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h2", {\n            className: "text-2xl font-semibold mb-4",\n            children: "Buttons"\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "flex flex-wrap gap-4",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n              className: "shadcn-btn shadcn-btn-primary",\n              children: "Primary Button"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n              className: "shadcn-btn shadcn-btn-secondary",\n              children: "Secondary Button"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n              className: "shadcn-btn shadcn-btn-outline",\n              children: "Outline Button"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n              className: "shadcn-btn bg-destructive text-destructive-foreground",\n              children: "Destructive Button"\n            })]\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("section", {\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h2", {\n            className: "text-2xl font-semibold mb-4",\n            children: "Cards"\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "shadcn-card p-6",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n                className: "text-lg font-semibold mb-2",\n                children: "Feature Card"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                className: "text-muted-foreground mb-4",\n                children: "This card demonstrates the new shadcn theme with hover effects and shadows."\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n                className: "shadcn-btn shadcn-btn-primary text-sm",\n                children: "Learn More"\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "shadcn-card p-6",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n                className: "text-lg font-semibold mb-2",\n                children: "Stats Card"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "text-3xl font-bold text-primary mb-2",\n                children: "2,847"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                className: "text-muted-foreground",\n                children: "Total Investments"\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "shadcn-card p-6",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n                className: "text-lg font-semibold mb-2",\n                children: "Info Card"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                className: "text-muted-foreground mb-4",\n                children: "Beautiful, accessible components built with modern CSS."\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "flex gap-2",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                  className: "px-2 py-1 bg-accent text-accent-foreground rounded text-sm",\n                  children: "New"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                  className: "px-2 py-1 bg-secondary text-secondary-foreground rounded text-sm",\n                  children: "Updated"\n                })]\n              })]\n            })]\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("section", {\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h2", {\n            className: "text-2xl font-semibold mb-4",\n            children: "Alerts & Notifications"\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "space-y-4",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "p-4 bg-primary text-primary-foreground rounded-lg",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("strong", {\n                children: "Primary Alert:"\n              }), " This is an important message using the primary color."]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "p-4 bg-accent text-accent-foreground rounded-lg",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("strong", {\n                children: "Accent Alert:"\n              }), " This is an informational message using the accent color."]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "p-4 bg-destructive text-destructive-foreground rounded-lg",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("strong", {\n                children: "Destructive Alert:"\n              }), " This is an error message using the destructive color."]\n            })]\n          })]\n        })]\n      }), activeTab === \'colors\' && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "space-y-8",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h2", {\n          className: "text-2xl font-semibold mb-6",\n          children: "Color Palette"\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("section", {\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n            className: "text-xl font-semibold mb-4",\n            children: "Primary Colors"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "grid grid-cols-2 md:grid-cols-5 gap-4",\n            children: [50, 100, 200, 300, 400, 500, 600, 700, 800, 900].map(function (shade) {\n              return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "text-center",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "w-16 h-16 rounded-lg mb-2 mx-auto shadow-sm",\n                  style: {\n                    backgroundColor: "var(--primary-".concat(shade, ")")\n                  }\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "text-sm font-mono text-muted-foreground",\n                  children: shade\n                })]\n              }, shade);\n            })\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("section", {\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n            className: "text-xl font-semibold mb-4",\n            children: "Semantic Colors"\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "p-4 bg-background border border-border rounded-lg",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "text-sm font-medium mb-2",\n                children: "Background"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "text-xs text-muted-foreground",\n                children: "var(--background)"\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "p-4 bg-card border border-border rounded-lg",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "text-sm font-medium mb-2",\n                children: "Card"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "text-xs text-muted-foreground",\n                children: "var(--card)"\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "p-4 bg-muted border border-border rounded-lg",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "text-sm font-medium mb-2",\n                children: "Muted"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "text-xs text-muted-foreground",\n                children: "var(--muted)"\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "p-4 bg-accent border border-border rounded-lg",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "text-sm font-medium mb-2",\n                children: "Accent"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "text-xs text-muted-foreground",\n                children: "var(--accent)"\n              })]\n            })]\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("section", {\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n            className: "text-xl font-semibold mb-4",\n            children: "Chart Colors"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "grid grid-cols-5 gap-4",\n            children: [1, 2, 3, 4, 5].map(function (num) {\n              return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "text-center",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                  className: "w-16 h-16 rounded-lg mb-2 mx-auto shadow-sm",\n                  style: {\n                    backgroundColor: "var(--chart-".concat(num, ")")\n                  }\n                }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                  className: "text-sm font-mono text-muted-foreground",\n                  children: ["Chart ", num]\n                })]\n              }, num);\n            })\n          })]\n        })]\n      }), activeTab === \'typography\' && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "space-y-8",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h2", {\n          className: "text-2xl font-semibold mb-6",\n          children: "Typography System"\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("section", {\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n            className: "text-xl font-semibold mb-4",\n            children: "Font Families"\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "space-y-4",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "text-sm font-medium text-muted-foreground mb-2",\n                children: "Inter (Sans)"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "text-2xl font-sans",\n                children: "The quick brown fox jumps over the lazy dog"\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "text-sm font-medium text-muted-foreground mb-2",\n                children: "Source Serif 4 (Serif)"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "text-2xl font-serif",\n                children: "The quick brown fox jumps over the lazy dog"\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "text-sm font-medium text-muted-foreground mb-2",\n                children: "JetBrains Mono (Monospace)"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "text-2xl font-mono",\n                children: "The quick brown fox jumps over the lazy dog"\n              })]\n            })]\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("section", {\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n            className: "text-xl font-semibold mb-4",\n            children: "Text Sizes & Weights"\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "space-y-4",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "text-6xl font-bold",\n              children: "Heading 1 (6xl, Bold)"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "text-5xl font-semibold",\n              children: "Heading 2 (5xl, Semibold)"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "text-4xl font-medium",\n              children: "Heading 3 (4xl, Medium)"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "text-3xl font-normal",\n              children: "Heading 4 (3xl, Normal)"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "text-2xl font-light",\n              children: "Heading 5 (2xl, Light)"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "text-xl font-light",\n              children: "Heading 6 (xl, Light)"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "text-lg",\n              children: "Body Large (lg)"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "text-base",\n              children: "Body (base)"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "text-sm",\n              children: "Body Small (sm)"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "text-xs",\n              children: "Caption (xs)"\n            })]\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("section", {\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n            className: "text-xl font-semibold mb-4",\n            children: "Text Colors"\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "space-y-2",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "text-foreground",\n              children: "Foreground text (default)"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "text-muted-foreground",\n              children: "Muted foreground text"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "text-primary",\n              children: "Primary text"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "text-secondary-foreground",\n              children: "Secondary text"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "text-accent-foreground",\n              children: "Accent text"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "text-destructive",\n              children: "Destructive text"\n            })]\n          })]\n        })]\n      }), activeTab === \'forms\' && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "space-y-8",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h2", {\n          className: "text-2xl font-semibold mb-6",\n          children: "Form Components"\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("section", {\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n            className: "text-xl font-semibold mb-4",\n            children: "Input Fields"\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "max-w-md space-y-4",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n                className: "block text-sm font-medium mb-2",\n                children: "Name"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n                type: "text",\n                name: "name",\n                value: formData.name,\n                onChange: handleInputChange,\n                className: "shadcn-input",\n                placeholder: "Enter your name"\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n                className: "block text-sm font-medium mb-2",\n                children: "Email"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n                type: "email",\n                name: "email",\n                value: formData.email,\n                onChange: handleInputChange,\n                className: "shadcn-input",\n                placeholder: "Enter your email"\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n                className: "block text-sm font-medium mb-2",\n                children: "Message"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("textarea", {\n                name: "message",\n                value: formData.message,\n                onChange: handleInputChange,\n                className: "shadcn-input min-h-[100px] resize-none",\n                placeholder: "Enter your message"\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n              className: "shadcn-btn shadcn-btn-primary w-full",\n              children: "Submit Form"\n            })]\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("section", {\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n            className: "text-xl font-semibold mb-4",\n            children: "Form Validation States"\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "max-w-md space-y-4",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n                className: "block text-sm font-medium mb-2",\n                children: "Valid Input"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n                type: "text",\n                className: "shadcn-input border-green-500",\n                value: "Valid input",\n                readOnly: true\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n                className: "block text-sm font-medium mb-2",\n                children: "Invalid Input"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n                type: "text",\n                className: "shadcn-input border-destructive",\n                value: "Invalid input",\n                readOnly: true\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n                className: "block text-sm font-medium mb-2",\n                children: "Disabled Input"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("input", {\n                type: "text",\n                className: "shadcn-input opacity-50 cursor-not-allowed",\n                value: "Disabled input",\n                disabled: true\n              })]\n            })]\n          })]\n        })]\n      })]\n    })\n  });\n};\n/* harmony default export */ const components_ShadcnDemo = (ShadcnDemo);\n;// ./wwwroot/js/react/components/ComponentPlayground.tsx\nfunction ComponentPlayground_typeof(o) { "@babel/helpers - typeof"; return ComponentPlayground_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, ComponentPlayground_typeof(o); }\nfunction ComponentPlayground_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction ComponentPlayground_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ComponentPlayground_ownKeys(Object(t), !0).forEach(function (r) { ComponentPlayground_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ComponentPlayground_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction ComponentPlayground_defineProperty(e, r, t) { return (r = ComponentPlayground_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction ComponentPlayground_toPropertyKey(t) { var i = ComponentPlayground_toPrimitive(t, "string"); return "symbol" == ComponentPlayground_typeof(i) ? i : i + ""; }\nfunction ComponentPlayground_toPrimitive(t, r) { if ("object" != ComponentPlayground_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != ComponentPlayground_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction ComponentPlayground_slicedToArray(r, e) { return ComponentPlayground_arrayWithHoles(r) || ComponentPlayground_iterableToArrayLimit(r, e) || ComponentPlayground_unsupportedIterableToArray(r, e) || ComponentPlayground_nonIterableRest(); }\nfunction ComponentPlayground_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction ComponentPlayground_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return ComponentPlayground_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? ComponentPlayground_arrayLikeToArray(r, a) : void 0; } }\nfunction ComponentPlayground_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction ComponentPlayground_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction ComponentPlayground_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\n// Import all your components\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar components = [{\n  name: \'Dashboard\',\n  component: Dashboard/* default */.A,\n  icon: /*#__PURE__*/(0,jsx_runtime.jsx)(bar_chart_3/* default */.A, {\n    className: "w-4 h-4"\n  }),\n  description: \'Main dashboard with investment analytics\',\n  category: \'Dashboard\',\n  props: {\n    isPlayground: true\n  }\n}, {\n  name: \'ModernDashboard\',\n  component: components_ModernDashboard,\n  icon: /*#__PURE__*/(0,jsx_runtime.jsx)(trending_up/* default */.A, {\n    className: "w-4 h-4"\n  }),\n  description: \'Enhanced modern dashboard with animations\',\n  category: \'Dashboard\',\n  props: {\n    isPlayground: true\n  }\n}, {\n  name: \'LandingPage\',\n  component: components_LandingPage,\n  icon: /*#__PURE__*/(0,jsx_runtime.jsx)(eye/* default */.A, {\n    className: "w-4 h-4"\n  }),\n  description: \'Landing page component\',\n  category: \'Marketing\',\n  props: {\n    isPlayground: true\n  }\n}, {\n  name: \'ModernLandingPage\',\n  component: components_ModernLandingPage,\n  icon: /*#__PURE__*/(0,jsx_runtime.jsx)(zap/* default */.A, {\n    className: "w-4 h-4"\n  }),\n  description: \'Enhanced landing page with modern design\',\n  category: \'Marketing\',\n  props: {\n    isPlayground: true\n  }\n}, {\n  name: \'InvestmentPreferences\',\n  component: components_InvestmentPreferences,\n  icon: /*#__PURE__*/(0,jsx_runtime.jsx)(settings/* default */.A, {\n    className: "w-4 h-4"\n  }),\n  description: \'Investment preferences form\',\n  category: \'Forms\',\n  props: {\n    isPlayground: true\n  }\n}, {\n  name: \'ModernInvestmentPreferences\',\n  component: components_ModernInvestmentPreferences,\n  icon: /*#__PURE__*/(0,jsx_runtime.jsx)(pie_chart/* default */.A, {\n    className: "w-4 h-4"\n  }),\n  description: \'Enhanced investment preferences with charts\',\n  category: \'Forms\',\n  props: {\n    isPlayground: true\n  }\n}, {\n  name: \'PlaidDemo\',\n  component: components_PlaidDemo,\n  icon: /*#__PURE__*/(0,jsx_runtime.jsx)(credit_card/* default */.A, {\n    className: "w-4 h-4"\n  }),\n  description: \'Plaid integration demo\',\n  category: \'Integration\',\n  props: {\n    isPlayground: true\n  }\n}, {\n  name: \'PlaidTester\',\n  component: components_PlaidTester,\n  icon: /*#__PURE__*/(0,jsx_runtime.jsx)(activity/* default */.A, {\n    className: "w-4 h-4"\n  }),\n  description: \'Plaid API testing interface\',\n  category: \'Integration\',\n  props: {\n    isPlayground: true\n  }\n}, {\n  name: \'RealTimeStockTicker\',\n  component: components_RealTimeStockTicker,\n  icon: /*#__PURE__*/(0,jsx_runtime.jsx)(trending_up/* default */.A, {\n    className: "w-4 h-4"\n  }),\n  description: \'Real-time stock price ticker\',\n  category: \'Data\',\n  props: {\n    isPlayground: true\n  }\n}, {\n  name: \'CongressionalTrading\',\n  component: CongressionalTrading/* default */.A,\n  icon: /*#__PURE__*/(0,jsx_runtime.jsx)(users/* default */.A, {\n    className: "w-4 h-4"\n  }),\n  description: \'Congressional trading data visualization\',\n  category: \'Data\',\n  props: {\n    isPlayground: true\n  }\n}, {\n  name: \'PortfolioSummary\',\n  component: PortfolioSummary/* default */.A,\n  icon: /*#__PURE__*/(0,jsx_runtime.jsx)(dollar_sign/* default */.A, {\n    className: "w-4 h-4"\n  }),\n  description: \'Portfolio summary component\',\n  category: \'Portfolio\',\n  props: {\n    isPlayground: true\n  }\n}, {\n  name: \'InvestmentChart\',\n  component: InvestmentChart/* default */.A,\n  icon: /*#__PURE__*/(0,jsx_runtime.jsx)(bar_chart_3/* default */.A, {\n    className: "w-4 h-4"\n  }),\n  description: \'Investment performance charts\',\n  category: \'Charts\',\n  props: {\n    isPlayground: true\n  }\n}, {\n  name: \'DashboardCard\',\n  component: DashboardCard/* default */.A,\n  icon: /*#__PURE__*/(0,jsx_runtime.jsx)(activity/* default */.A, {\n    className: "w-4 h-4"\n  }),\n  description: \'Individual dashboard card component\',\n  category: \'UI\',\n  props: {\n    isPlayground: true,\n    title: "Sample Card",\n    value: "$10,000",\n    change: "+5.2%",\n    isPositive: true\n  }\n}, {\n  name: \'StockDetails\',\n  component: components_StockDetails,\n  icon: /*#__PURE__*/(0,jsx_runtime.jsx)(trending_up/* default */.A, {\n    className: "w-4 h-4"\n  }),\n  description: \'Detailed stock information display\',\n  category: \'Data\',\n  props: {\n    isPlayground: true\n  }\n}, {\n  name: \'WebApp\',\n  component: components_WebApp,\n  icon: /*#__PURE__*/(0,jsx_runtime.jsx)(code/* default */.A, {\n    className: "w-4 h-4"\n  }),\n  description: \'Web application wrapper\',\n  category: \'App\',\n  props: {\n    isPlayground: true\n  }\n}, {\n  name: \'ShadcnDemo\',\n  component: components_ShadcnDemo,\n  icon: /*#__PURE__*/(0,jsx_runtime.jsx)(shield/* default */.A, {\n    className: "w-4 h-4"\n  }),\n  description: \'Shadcn UI components demo\',\n  category: \'UI\',\n  props: {\n    isPlayground: true\n  }\n}];\nvar categories = [\'All\', \'Dashboard\', \'Marketing\', \'Forms\', \'Integration\', \'Data\', \'Portfolio\', \'Charts\', \'UI\', \'App\'];\nvar ComponentPlayground = function ComponentPlayground() {\n  var _useState = (0,react.useState)(null),\n    _useState2 = ComponentPlayground_slicedToArray(_useState, 2),\n    selectedComponent = _useState2[0],\n    setSelectedComponent = _useState2[1];\n  var _useState3 = (0,react.useState)(\'All\'),\n    _useState4 = ComponentPlayground_slicedToArray(_useState3, 2),\n    selectedCategory = _useState4[0],\n    setSelectedCategory = _useState4[1];\n  var _useState5 = (0,react.useState)(false),\n    _useState6 = ComponentPlayground_slicedToArray(_useState5, 2),\n    showCode = _useState6[0],\n    setShowCode = _useState6[1];\n  var _useState7 = (0,react.useState)(false),\n    _useState8 = ComponentPlayground_slicedToArray(_useState7, 2),\n    sidebarCollapsed = _useState8[0],\n    setSidebarCollapsed = _useState8[1];\n  var filteredComponents = selectedCategory === \'All\' ? components : components.filter(function (comp) {\n    return comp.category === selectedCategory;\n  });\n  var handleComponentSelect = function handleComponentSelect(component) {\n    setSelectedComponent(component);\n    setShowCode(false);\n  };\n  var toggleSidebar = function toggleSidebar() {\n    setSidebarCollapsed(!sidebarCollapsed);\n  };\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n    className: "min-h-screen bg-gray-50 flex",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(proxy/* motion */.P.div, {\n      className: "bg-white border-r border-gray-200 shadow-sm ".concat(sidebarCollapsed ? \'w-16\' : \'w-80\'),\n      initial: {\n        width: 320\n      },\n      animate: {\n        width: sidebarCollapsed ? 64 : 320\n      },\n      transition: {\n        duration: 0.3\n      },\n      children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "p-4 border-b border-gray-200",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "flex items-center justify-between",\n          children: [!sidebarCollapsed && /*#__PURE__*/(0,jsx_runtime.jsx)("h1", {\n            className: "text-xl font-bold text-gray-900",\n            children: "Component Playground"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("button", {\n            onClick: toggleSidebar,\n            className: "p-2 rounded-lg hover:bg-gray-100 transition-colors",\n            children: sidebarCollapsed ? /*#__PURE__*/(0,jsx_runtime.jsx)(chevron_right/* default */.A, {\n              className: "w-4 h-4"\n            }) : /*#__PURE__*/(0,jsx_runtime.jsx)(chevron_down/* default */.A, {\n              className: "w-4 h-4"\n            })\n          })]\n        }), !sidebarCollapsed && /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n          className: "text-sm text-gray-600 mt-1",\n          children: "Test and preview your React components"\n        })]\n      }), !sidebarCollapsed && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: "p-4 border-b border-gray-200",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n          className: "block text-sm font-medium text-gray-700 mb-2",\n          children: "Category"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("select", {\n          value: selectedCategory,\n          onChange: function onChange(e) {\n            return setSelectedCategory(e.target.value);\n          },\n          className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",\n          children: categories.map(function (category) {\n            return /*#__PURE__*/(0,jsx_runtime.jsx)("option", {\n              value: category,\n              children: category\n            }, category);\n          })\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "flex-1 overflow-y-auto",\n        children: filteredComponents.map(function (component) {\n          return /*#__PURE__*/(0,jsx_runtime.jsx)(proxy/* motion */.P.div, {\n            className: "p-4 cursor-pointer transition-colors hover:bg-gray-50 ".concat((selectedComponent === null || selectedComponent === void 0 ? void 0 : selectedComponent.name) === component.name ? \'bg-blue-50 border-r-2 border-blue-500\' : \'\'),\n            onClick: function onClick() {\n              return handleComponentSelect(component);\n            },\n            whileHover: {\n              backgroundColor: \'#f9fafb\'\n            },\n            whileTap: {\n              scale: 0.98\n            },\n            children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n              className: "flex items-center space-x-3",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n                className: "text-blue-600",\n                children: component.icon\n              }), !sidebarCollapsed && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n                className: "flex-1 min-w-0",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n                  className: "text-sm font-medium text-gray-900 truncate",\n                  children: component.name\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n                  className: "text-xs text-gray-500 truncate",\n                  children: component.description\n                })]\n              })]\n            })\n          }, component.name);\n        })\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: "flex-1 flex flex-col",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "bg-white border-b border-gray-200 px-6 py-4",\n        children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "flex items-center justify-between",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h2", {\n              className: "text-2xl font-bold text-gray-900",\n              children: selectedComponent ? selectedComponent.name : \'Select a Component\'\n            }), selectedComponent && /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n              className: "text-gray-600 mt-1",\n              children: selectedComponent.description\n            })]\n          }), selectedComponent && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "flex space-x-2",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("button", {\n              onClick: function onClick() {\n                return setShowCode(!showCode);\n              },\n              className: "px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors ".concat(showCode ? \'bg-gray-800 text-white\' : \'bg-gray-100 text-gray-700 hover:bg-gray-200\'),\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(code/* default */.A, {\n                className: "w-4 h-4"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                children: showCode ? \'Hide Code\' : \'Show Code\'\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)("button", {\n              onClick: function onClick() {\n                return window.open("/Home/React", \'_blank\');\n              },\n              className: "px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(play/* default */.A, {\n                className: "w-4 h-4"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n                children: "Open in New Tab"\n              })]\n            })]\n          })]\n        })\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "flex-1 p-6 overflow-auto",\n        children: selectedComponent ? /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "space-y-6",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "bg-white rounded-lg border border-gray-200 p-6 shadow-sm",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("h3", {\n              className: "text-lg font-medium text-gray-900 mb-4 flex items-center",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(eye/* default */.A, {\n                className: "w-5 h-5 mr-2 text-blue-600"\n              }), "Component Preview"]\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "border border-gray-200 rounded-lg p-4 bg-gray-50",\n              children: /*#__PURE__*/(0,jsx_runtime.jsx)(selectedComponent.component, ComponentPlayground_objectSpread({}, selectedComponent.props))\n            })]\n          }), showCode && /*#__PURE__*/(0,jsx_runtime.jsxs)(proxy/* motion */.P.div, {\n            className: "bg-white rounded-lg border border-gray-200 p-6 shadow-sm",\n            initial: {\n              opacity: 0,\n              y: 20\n            },\n            animate: {\n              opacity: 1,\n              y: 0\n            },\n            transition: {\n              duration: 0.3\n            },\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("h3", {\n              className: "text-lg font-medium text-gray-900 mb-4 flex items-center",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(code/* default */.A, {\n                className: "w-5 h-5 mr-2 text-green-600"\n              }), "Component Code"]\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "bg-gray-900 rounded-lg p-4 overflow-x-auto",\n              children: /*#__PURE__*/(0,jsx_runtime.jsx)("pre", {\n                className: "text-green-400 text-sm",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)("code", {\n                  children: "import { ".concat(selectedComponent.name, " } from \'./components/").concat(selectedComponent.name, "\';\\n\\n// Usage\\n<").concat(selectedComponent.name, " \\n  ").concat(Object.entries(selectedComponent.props || {}).map(function (_ref) {\n                    var _ref2 = ComponentPlayground_slicedToArray(_ref, 2),\n                      key = _ref2[0],\n                      value = _ref2[1];\n                    return "".concat(key, "={").concat(JSON.stringify(value), "}");\n                  }).join(\'\\n  \'), "\\n/>")\n                })\n              })\n            })]\n          })]\n        }) : /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "flex items-center justify-center h-full",\n          children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n            className: "text-center",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n              className: "w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4",\n              children: /*#__PURE__*/(0,jsx_runtime.jsx)(code/* default */.A, {\n                className: "w-8 h-8 text-blue-600"\n              })\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n              className: "text-lg font-medium text-gray-900 mb-2",\n              children: "Welcome to Component Playground"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n              className: "text-gray-600",\n              children: "Select a component from the sidebar to preview and test it"\n            })]\n          })\n        })\n      })]\n    })]\n  });\n};\n/* harmony default export */ const components_ComponentPlayground = (ComponentPlayground);\n// EXTERNAL MODULE: ./wwwroot/js/react/index.css\nvar js_react = __webpack_require__(60290);\n;// ./wwwroot/js/react/playground-entry.js\n\n\n\n\n\n// Create root and render the playground\n\nvar container = document.getElementById(\'react-playground-root\');\nif (container) {\n  var root = (0,client/* createRoot */.H)(container);\n  root.render(/*#__PURE__*/(0,jsx_runtime.jsx)(components_ComponentPlayground, {}));\n} else {\n  console.error(\'React playground root element not found\');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32354\n')},96098:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   K: () => (/* binding */ apiService)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(33319);\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(90888);\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\n\n\n\n// Types\n\n// API Configuration\nvar API_BASE_URL =  true ? \'https://api.ezana.com\' : 0;\nvar ApiService = /*#__PURE__*/function () {\n  function ApiService() {\n    _classCallCheck(this, ApiService);\n    _defineProperty(this, "api", void 0);\n    this.api = axios__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.create({\n      baseURL: API_BASE_URL,\n      timeout: 10000,\n      headers: {\n        \'Content-Type\': \'application/json\'\n      }\n    });\n    this.setupInterceptors();\n  }\n  return _createClass(ApiService, [{\n    key: "setupInterceptors",\n    value: function setupInterceptors() {\n      var _this = this;\n      // Request interceptor\n      this.api.interceptors.request.use(function (config) {\n        var token = _this.getAuthToken();\n        if (token && config.headers) {\n          config.headers.Authorization = "Bearer ".concat(token);\n        }\n        return config;\n      }, function (error) {\n        return Promise.reject(error);\n      });\n\n      // Response interceptor\n      this.api.interceptors.response.use(function (response) {\n        return response;\n      }, function (error) {\n        _this.handleApiError(error);\n        return Promise.reject(error);\n      });\n    }\n  }, {\n    key: "getAuthToken",\n    value: function getAuthToken() {\n      // Try to get token from localStorage first (for React frontend)\n      var token = localStorage.getItem(\'auth_token\');\n\n      // If not found, try to get from cookies (for traditional auth)\n      if (!token) {\n        var cookies = document.cookie.split(\';\');\n        var authCookie = cookies.find(function (cookie) {\n          return cookie.trim().startsWith(\'auth_token=\');\n        });\n        if (authCookie) {\n          token = authCookie.split(\'=\')[1];\n        }\n      }\n      return token;\n    }\n  }, {\n    key: "handleApiError",\n    value: function handleApiError(error) {\n      if (error.response) {\n        var _error$response = error.response,\n          status = _error$response.status,\n          data = _error$response.data;\n        switch (status) {\n          case 401:\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_0__/* .toast */ .oR.error(\'Authentication required. Please log in again.\');\n            this.handleUnauthorized();\n            break;\n          case 403:\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_0__/* .toast */ .oR.error(\'Access denied. You don\\\'t have permission for this action.\');\n            break;\n          case 404:\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_0__/* .toast */ .oR.error(\'Resource not found.\');\n            break;\n          case 422:\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_0__/* .toast */ .oR.error(\'Validation error. Please check your input.\');\n            break;\n          case 500:\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_0__/* .toast */ .oR.error(\'Server error. Please try again later.\');\n            break;\n          default:\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_0__/* .toast */ .oR.error(\'An unexpected error occurred.\');\n        }\n      } else if (error.request) {\n        react_hot_toast__WEBPACK_IMPORTED_MODULE_0__/* .toast */ .oR.error(\'Network error. Please check your connection.\');\n      } else {\n        react_hot_toast__WEBPACK_IMPORTED_MODULE_0__/* .toast */ .oR.error(\'An error occurred while processing your request.\');\n      }\n    }\n  }, {\n    key: "handleUnauthorized",\n    value: function handleUnauthorized() {\n      localStorage.removeItem(\'auth_token\');\n      // Redirect to login page\n      window.location.href = \'/Auth/Login\';\n    }\n\n    // Generic request methods\n  }, {\n    key: "get",\n    value: function () {\n      var _get = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(url, params) {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return this.api.get(url, {\n                params: params\n              });\n            case 3:\n              response = _context.sent;\n              return _context.abrupt("return", response.data);\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context["catch"](0);\n              throw _context.t0;\n            case 10:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n      function get(_x, _x2) {\n        return _get.apply(this, arguments);\n      }\n      return get;\n    }()\n  }, {\n    key: "post",\n    value: function () {\n      var _post = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url, data) {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return this.api.post(url, data);\n            case 3:\n              response = _context2.sent;\n              return _context2.abrupt("return", response.data);\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2["catch"](0);\n              throw _context2.t0;\n            case 10:\n            case "end":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[0, 7]]);\n      }));\n      function post(_x3, _x4) {\n        return _post.apply(this, arguments);\n      }\n      return post;\n    }()\n  }, {\n    key: "put",\n    value: function () {\n      var _put = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(url, data) {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return this.api.put(url, data);\n            case 3:\n              response = _context3.sent;\n              return _context3.abrupt("return", response.data);\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3["catch"](0);\n              throw _context3.t0;\n            case 10:\n            case "end":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[0, 7]]);\n      }));\n      function put(_x5, _x6) {\n        return _put.apply(this, arguments);\n      }\n      return put;\n    }()\n  }, {\n    key: "delete",\n    value: function () {\n      var _delete2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(url) {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return this.api["delete"](url);\n            case 3:\n              response = _context4.sent;\n              return _context4.abrupt("return", response.data);\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4["catch"](0);\n              throw _context4.t0;\n            case 10:\n            case "end":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[0, 7]]);\n      }));\n      function _delete(_x7) {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }() // Authentication endpoints\n  }, {\n    key: "login",\n    value: function () {\n      var _login = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(credentials) {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.api.post(\'/api/auth/login\', credentials);\n            case 2:\n              response = _context5.sent;\n              if (response.data.success && response.data.token) {\n                localStorage.setItem(\'auth_token\', response.data.token);\n              }\n              return _context5.abrupt("return", response.data);\n            case 5:\n            case "end":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function login(_x8) {\n        return _login.apply(this, arguments);\n      }\n      return login;\n    }()\n  }, {\n    key: "register",\n    value: function () {\n      var _register = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(userData) {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this.api.post(\'/api/auth/register\', userData);\n            case 2:\n              response = _context6.sent;\n              if (response.data.success && response.data.token) {\n                localStorage.setItem(\'auth_token\', response.data.token);\n              }\n              return _context6.abrupt("return", response.data);\n            case 5:\n            case "end":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function register(_x9) {\n        return _register.apply(this, arguments);\n      }\n      return register;\n    }()\n  }, {\n    key: "logout",\n    value: function () {\n      var _logout = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              _context7.next = 3;\n              return this.post(\'/api/auth/logout\');\n            case 3:\n              _context7.prev = 3;\n              localStorage.removeItem(\'auth_token\');\n              return _context7.finish(3);\n            case 6:\n            case "end":\n              return _context7.stop();\n          }\n        }, _callee7, this, [[0,, 3, 6]]);\n      }));\n      function logout() {\n        return _logout.apply(this, arguments);\n      }\n      return logout;\n    }() // Investment endpoints\n  }, {\n    key: "getInvestments",\n    value: function () {\n      var _getInvestments = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(params) {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this.get(\'/api/investments\', params);\n            case 2:\n              response = _context8.sent;\n              return _context8.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {\n                pagination: {\n                  page: (params === null || params === void 0 ? void 0 : params.page) || 1,\n                  pageSize: (params === null || params === void 0 ? void 0 : params.pageSize) || 10,\n                  totalCount: response.data.length,\n                  totalPages: Math.ceil(response.data.length / ((params === null || params === void 0 ? void 0 : params.pageSize) || 10))\n                }\n              }));\n            case 4:\n            case "end":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function getInvestments(_x0) {\n        return _getInvestments.apply(this, arguments);\n      }\n      return getInvestments;\n    }()\n  }, {\n    key: "getInvestmentById",\n    value: function () {\n      var _getInvestmentById = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(id) {\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              return _context9.abrupt("return", this.get("/api/investments/".concat(id)));\n            case 1:\n            case "end":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n      function getInvestmentById(_x1) {\n        return _getInvestmentById.apply(this, arguments);\n      }\n      return getInvestmentById;\n    }()\n  }, {\n    key: "searchInvestments",\n    value: function () {\n      var _searchInvestments = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee0(query) {\n        return _regeneratorRuntime().wrap(function _callee0$(_context0) {\n          while (1) switch (_context0.prev = _context0.next) {\n            case 0:\n              return _context0.abrupt("return", this.get(\'/api/investments/search\', {\n                q: query\n              }));\n            case 1:\n            case "end":\n              return _context0.stop();\n          }\n        }, _callee0, this);\n      }));\n      function searchInvestments(_x10) {\n        return _searchInvestments.apply(this, arguments);\n      }\n      return searchInvestments;\n    }() // Portfolio endpoints\n  }, {\n    key: "getPortfolios",\n    value: function () {\n      var _getPortfolios = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee1() {\n        return _regeneratorRuntime().wrap(function _callee1$(_context1) {\n          while (1) switch (_context1.prev = _context1.next) {\n            case 0:\n              return _context1.abrupt("return", this.get(\'/api/portfolios\'));\n            case 1:\n            case "end":\n              return _context1.stop();\n          }\n        }, _callee1, this);\n      }));\n      function getPortfolios() {\n        return _getPortfolios.apply(this, arguments);\n      }\n      return getPortfolios;\n    }()\n  }, {\n    key: "getPortfolioById",\n    value: function () {\n      var _getPortfolioById = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10(id) {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              return _context10.abrupt("return", this.get("/api/portfolios/".concat(id)));\n            case 1:\n            case "end":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function getPortfolioById(_x11) {\n        return _getPortfolioById.apply(this, arguments);\n      }\n      return getPortfolioById;\n    }()\n  }, {\n    key: "createPortfolio",\n    value: function () {\n      var _createPortfolio = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11(data) {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              return _context11.abrupt("return", this.post(\'/api/portfolios\', data));\n            case 1:\n            case "end":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function createPortfolio(_x12) {\n        return _createPortfolio.apply(this, arguments);\n      }\n      return createPortfolio;\n    }()\n  }, {\n    key: "updatePortfolio",\n    value: function () {\n      var _updatePortfolio = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee12(id, data) {\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              return _context12.abrupt("return", this.put("/api/portfolios/".concat(id), data));\n            case 1:\n            case "end":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }));\n      function updatePortfolio(_x13, _x14) {\n        return _updatePortfolio.apply(this, arguments);\n      }\n      return updatePortfolio;\n    }()\n  }, {\n    key: "deletePortfolio",\n    value: function () {\n      var _deletePortfolio = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee13(id) {\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              return _context13.abrupt("return", this["delete"]("/api/portfolios/".concat(id)));\n            case 1:\n            case "end":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n      function deletePortfolio(_x15) {\n        return _deletePortfolio.apply(this, arguments);\n      }\n      return deletePortfolio;\n    }() // User endpoints\n  }, {\n    key: "getUserProfile",\n    value: function () {\n      var _getUserProfile = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              return _context14.abrupt("return", this.get(\'/api/user/profile\'));\n            case 1:\n            case "end":\n              return _context14.stop();\n          }\n        }, _callee14, this);\n      }));\n      function getUserProfile() {\n        return _getUserProfile.apply(this, arguments);\n      }\n      return getUserProfile;\n    }()\n  }, {\n    key: "updateUserProfile",\n    value: function () {\n      var _updateUserProfile = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee15(data) {\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              return _context15.abrupt("return", this.put(\'/api/user/profile\', data));\n            case 1:\n            case "end":\n              return _context15.stop();\n          }\n        }, _callee15, this);\n      }));\n      function updateUserProfile(_x16) {\n        return _updateUserProfile.apply(this, arguments);\n      }\n      return updateUserProfile;\n    }()\n  }, {\n    key: "updateUserPreferences",\n    value: function () {\n      var _updateUserPreferences = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee16(preferences) {\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              return _context16.abrupt("return", this.put(\'/api/user/preferences\', preferences));\n            case 1:\n            case "end":\n              return _context16.stop();\n          }\n        }, _callee16, this);\n      }));\n      function updateUserPreferences(_x17) {\n        return _updateUserPreferences.apply(this, arguments);\n      }\n      return updateUserPreferences;\n    }() // Utility methods\n  }, {\n    key: "isAuthenticated",\n    value: function isAuthenticated() {\n      return !!this.getAuthToken();\n    }\n  }, {\n    key: "getAuthHeaders",\n    value: function getAuthHeaders() {\n      var token = this.getAuthToken();\n      return token ? {\n        Authorization: "Bearer ".concat(token)\n      } : {};\n    }\n\n    // Token management\n  }, {\n    key: "setAuthToken",\n    value: function setAuthToken(token) {\n      localStorage.setItem(\'auth_token\', token);\n    }\n  }, {\n    key: "clearAuthToken",\n    value: function clearAuthToken() {\n      localStorage.removeItem(\'auth_token\');\n    }\n  }]);\n}(); // Export singleton instance\nvar apiService = new ApiService();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///96098\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={id:Q,loaded:!1,exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.loaded=!0,F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var s=1/0;for(x=0;x<deferred.length;x++){for(var[U,F,B]=deferred[x],t=!0,n=0;n<U.length;n++)(!1&B||s>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[n])))?U.splice(n--,1):(t=!1,B<s&&(s=B));if(t){deferred.splice(x--,1);var e=F();void 0!==e&&(Q=e)}}return Q}B=B||0;for(var x=deferred.length;x>0&&deferred[x-1][2]>B;x--)deferred[x]=deferred[x-1];deferred[x]=[U,F,B]},__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__.nmd=Q=>(Q.paths=[],Q.children||(Q.children=[]),Q),__webpack_require__.j=188,(()=>{__webpack_require__.b=document.baseURI||self.location.href;var Q={98:0,188:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,s,[t,n,e]=F,x=0;if(t.some((U=>0!==Q[U]))){for(B in n)__webpack_require__.o(n,B)&&(__webpack_require__.m[B]=n[B]);if(e)var c=e(__webpack_require__)}for(U&&U(F);x<t.length;x++)s=t[x],__webpack_require__.o(Q,s)&&Q[s]&&Q[s][0](),Q[s]=0;return __webpack_require__.O(c)},F=self.webpackChunkezanaezana=self.webpackChunkezanaezana||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})(),__webpack_require__.nc=void 0;var __webpack_exports__=__webpack_require__.O(void 0,[96,867,667],(()=>__webpack_require__(32354)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();