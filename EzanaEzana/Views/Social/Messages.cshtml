@using EzanaEzana.ViewModels
@model MessagesViewModel
@{
    ViewData["Title"] = "Messages";
}

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12 mb-3">
            <h1 class="h3">Messages</h1>
        </div>
    </div>

    <div class="row">
        <!-- Conversations List -->
        <div class="col-md-4 col-lg-3 mb-4 mb-md-0">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">Conversations</h5>
                        <a href="@Url.Action("Search", "Social")" class="btn btn-sm btn-outline-primary">
                            <i class="bi bi-plus"></i> New
                        </a>
                    </div>
                </div>
                <div class="list-group list-group-flush conversation-list">
                    @if (Model.Conversations.Count == 0)
                    {
                        <div class="list-group-item text-center py-4">
                            <i class="bi bi-chat-dots text-muted fs-2 mb-2"></i>
                            <p class="text-muted mb-0">No conversations yet</p>
                            <small class="text-muted">Start chatting with your friends</small>
                        </div>
                    }
                    else
                    {
                        @foreach (var conversation in Model.Conversations)
                        {
                            <a href="@Url.Action("Messages", "Social", new { userId = conversation.UserId })" 
                               class="list-group-item list-group-item-action @(Model.CurrentConversation != null && Model.CurrentConversation.UserId == conversation.UserId ? "active" : "")">
                                <div class="d-flex align-items-center">
                                    <div class="position-relative flex-shrink-0">
                                        @if (string.IsNullOrEmpty(conversation.ProfilePictureUrl))
                                        {
                                            <div class="avatar @(Model.CurrentConversation != null && Model.CurrentConversation.UserId == conversation.UserId ? "bg-white text-primary" : "bg-primary text-white") rounded-circle">
                                                <span>@(conversation.DisplayName?.Substring(0, 1).ToUpper() ?? conversation.Username.Substring(0, 1).ToUpper())</span>
                                            </div>
                                        }
                                        else
                                        {
                                            <img src="@conversation.ProfilePictureUrl" class="rounded-circle" width="40" height="40" alt="@conversation.DisplayName">
                                        }
                                        @if (conversation.HasUnreadMessages)
                                        {
                                            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                                                @(conversation.UnreadCount > 99 ? "99+" : conversation.UnreadCount.ToString())
                                            </span>
                                        }
                                    </div>
                                    <div class="flex-grow-1 ms-3 overflow-hidden">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <h6 class="mb-0 text-truncate">@conversation.DisplayName</h6>
                                            <small class="text-muted ms-2">@FormatMessageTime(conversation.LastMessageDate)</small>
                                        </div>
                                        <p class="text-truncate mb-0 small @(conversation.HasUnreadMessages ? "fw-bold" : "text-muted")">
                                            @conversation.LastMessagePreview
                                        </p>
                                    </div>
                                </div>
                            </a>
                        }
                    }
                </div>
            </div>
        </div>

        <!-- Message Content -->
        <div class="col-md-8 col-lg-9">
            @if (Model.CurrentConversation == null)
            {
                <div class="card h-100">
                    <div class="card-body d-flex flex-column align-items-center justify-content-center py-5">
                        <div class="text-center">
                            <i class="bi bi-chat-square-text text-muted" style="font-size: 4rem;"></i>
                            <h4 class="mt-3">Your Messages</h4>
                            <p class="text-muted">Select a conversation or start a new one</p>
                            <a href="@Url.Action("Search", "Social")" class="btn btn-primary">
                                <i class="bi bi-plus"></i> New Message
                            </a>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="card h-100 d-flex flex-column">
                    <!-- Conversation Header -->
                    <div class="card-header bg-light">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0">
                                @if (string.IsNullOrEmpty(Model.CurrentConversation.ProfilePictureUrl))
                                {
                                    <div class="avatar bg-primary text-white rounded-circle">
                                        <span>@(Model.CurrentConversation.DisplayName?.Substring(0, 1).ToUpper() ?? Model.CurrentConversation.Username.Substring(0, 1).ToUpper())</span>
                                    </div>
                                }
                                else
                                {
                                    <img src="@Model.CurrentConversation.ProfilePictureUrl" class="rounded-circle" width="40" height="40" alt="@Model.CurrentConversation.DisplayName">
                                }
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <h5 class="mb-0">@Model.CurrentConversation.DisplayName</h5>
                                <p class="text-muted mb-0 small">@@@Model.CurrentConversation.Username</p>
                            </div>
                            <div>
                                <a href="@Url.Action("Profile", "Social", new { username = Model.CurrentConversation.Username })" class="btn btn-sm btn-outline-secondary">
                                    <i class="bi bi-person"></i> View Profile
                                </a>
                            </div>
                        </div>
                    </div>

                    <!-- Messages -->
                    <div class="card-body p-4 overflow-auto" id="messageContainer" style="max-height: 500px;">
                        @if (Model.CurrentConversation.Messages.Count == 0)
                        {
                            <div class="text-center py-5">
                                <i class="bi bi-chat-text text-muted fs-1 mb-3"></i>
                                <p class="text-muted">No messages yet</p>
                                <p class="text-muted small">Send a message to start the conversation</p>
                            </div>
                        }
                        else
                        {
                            <div class="messages">
                                @{
                                    DateTime? lastMessageDate = null;
                                }
                                @foreach (var message in Model.CurrentConversation.Messages)
                                {
                                    @if (lastMessageDate == null || message.SentAt.Date != lastMessageDate.Value.Date)
                                    {
                                        <div class="message-date-divider">
                                            <span>@message.SentAt.ToString("MMMM d, yyyy")</span>
                                        </div>
                                        lastMessageDate = message.SentAt;
                                    }

                                    <div class="message @(message.IsFromCurrentUser ? "message-outgoing" : "message-incoming")">
                                        <div class="message-content">
                                            <div class="message-bubble">
                                                @message.Content
                                            </div>
                                            <div class="message-info">
                                                <small class="text-muted">
                                                    @message.SentAt.ToString("h:mm tt")
                                                    @if (message.IsFromCurrentUser && message.IsRead)
                                                    {
                                                        <i class="bi bi-check-all ms-1" title="Read"></i>
                                                    }
                                                    else if (message.IsFromCurrentUser)
                                                    {
                                                        <i class="bi bi-check ms-1" title="Sent"></i>
                                                    }
                                                </small>
                                            </div>
                                        </div>
                                    </div>

                                    @if (!message.IsRead && !message.IsFromCurrentUser)
                                    {
                                        <form method="post" action="@Url.Action("MarkAsRead", "Social")" id="markAsReadForm_@message.MessageId">
                                            <input type="hidden" name="messageId" value="@message.MessageId" />
                                            <input type="hidden" name="userId" value="@Model.CurrentConversation.UserId" />
                                        </form>
                                        <script>
                                            document.addEventListener('DOMContentLoaded', function() {
                                                document.getElementById('markAsReadForm_@message.MessageId').submit();
                                            });
                                        </script>
                                    }
                                }
                            </div>
                        }
                    </div>

                    <!-- Message Input -->
                    <div class="card-footer bg-light">
                        <form method="post" action="@Url.Action("SendMessage", "Social")" id="messageForm">
                            <input type="hidden" asp-for="NewMessage.RecipientId" value="@Model.CurrentConversation.UserId" />
                            <div class="input-group">
                                <textarea asp-for="NewMessage.Content" class="form-control" placeholder="Type a message..." rows="1" required></textarea>
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-send"></i>
                                </button>
                            </div>
                            <span asp-validation-for="NewMessage.Content" class="text-danger small"></span>
                        </form>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .avatar {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 1rem;
    }

    .conversation-list {
        max-height: 500px;
        overflow-y: auto;
    }

    .message-date-divider {
        display: flex;
        align-items: center;
        text-align: center;
        margin: 1rem 0;
    }

    .message-date-divider span {
        padding: 0.25rem 0.75rem;
        background-color: #f8f9fa;
        border-radius: 1rem;
        font-size: 0.75rem;
        color: #6c757d;
    }

    .message {
        display: flex;
        margin-bottom: 1rem;
    }

    .message-incoming {
        justify-content: flex-start;
    }

    .message-outgoing {
        justify-content: flex-end;
    }

    .message-content {
        max-width: 75%;
    }

    .message-bubble {
        padding: 0.75rem 1rem;
        border-radius: 1rem;
        word-break: break-word;
    }

    .message-incoming .message-bubble {
        background-color: #f8f9fa;
        border-top-left-radius: 0.25rem;
    }

    .message-outgoing .message-bubble {
        background-color: #0d6efd;
        color: white;
        border-top-right-radius: 0.25rem;
    }

    .message-info {
        margin-top: 0.25rem;
        font-size: 0.75rem;
        text-align: right;
    }

    .message-incoming .message-info {
        text-align: left;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const messageContainer = document.getElementById('messageContainer');
        if (messageContainer) {
            messageContainer.scrollTop = messageContainer.scrollHeight;
        }

        const textArea = document.querySelector('textarea');
        if (textArea) {
            textArea.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = (this.scrollHeight) + 'px';
            });
        }
    });
</script>

@functions {
    public string FormatMessageTime(DateTime messageTime)
    {
        var now = DateTime.Now;
        var diff = now - messageTime;

        if (diff.TotalMinutes < 1)
            return "Just now";
        if (diff.TotalHours < 1)
            return $"{(int)diff.TotalMinutes}m";
        if (diff.TotalHours < 24 && messageTime.Date == now.Date)
            return messageTime.ToString("h:mm tt");
        if (messageTime.Date == now.Date.AddDays(-1))
            return "Yesterday";
        if (diff.TotalDays < 7)
            return messageTime.ToString("ddd");

        return messageTime.ToString("MMM d");
    }
} 